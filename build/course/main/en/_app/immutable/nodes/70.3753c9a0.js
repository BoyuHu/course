import{s as ct,o as jt,n as Rs}from"../chunks/scheduler.37c15a92.js";import{S as Jt,i as ht,g as j,s as a,r as M,A as ut,h as J,f as n,c as e,j as rt,u as i,x as u,k as ot,y as Ut,a as t,v as y,d as r,t as o,w as c}from"../chunks/index.2bf4358c.js";import{T as Ws}from"../chunks/Tip.363c041f.js";import{Y as wt}from"../chunks/Youtube.1e50a667.js";import{C as U}from"../chunks/CodeBlock.4f5fc1ad.js";import{C as Tt}from"../chunks/CourseFloatingBanner.15ba07e6.js";import{H as xn}from"../chunks/Heading.8ada512a.js";function gt(g){let p,w="üí° This section covers BPE in depth, going as far as showing a full implementation. You can skip to the end if you just want a general overview of the tokenization algorithm.";return{c(){p=j("p"),p.textContent=w},l(h){p=J(h,"P",{"data-svelte-h":!0}),u(p)!=="svelte-ng6y15"&&(p.textContent=w)},m(h,T){t(h,p,T)},p:Rs,d(h){h&&n(p)}}}function mt(g){let p,w="The GPT-2 and RoBERTa tokenizers (which are pretty similar) have a clever way to deal with this: they don‚Äôt look at words as being written with Unicode characters, but with bytes. This way the base vocabulary has a small size (256), but every character you can think of will still be included and not end up being converted to the unknown token. This trick is called <em>byte-level BPE</em>.";return{c(){p=j("p"),p.innerHTML=w},l(h){p=J(h,"P",{"data-svelte-h":!0}),u(p)!=="svelte-98dqph"&&(p.innerHTML=w)},m(h,T){t(h,p,T)},p:Rs,d(h){h&&n(p)}}}function xt(g){let p,w="‚úèÔ∏è <strong>Now your turn!</strong> What do you think the next merge rule will be?";return{c(){p=j("p"),p.innerHTML=w},l(h){p=J(h,"P",{"data-svelte-h":!0}),u(p)!=="svelte-oqvl3w"&&(p.innerHTML=w)},m(h,T){t(h,p,T)},p:Rs,d(h){h&&n(p)}}}function Ct(g){let p,w="‚úèÔ∏è <strong>Now your turn!</strong> How do you think  the word <code>&quot;unhug&quot;</code> will be tokenized?";return{c(){p=j("p"),p.innerHTML=w},l(h){p=J(h,"P",{"data-svelte-h":!0}),u(p)!=="svelte-amahqs"&&(p.innerHTML=w)},m(h,T){t(h,p,T)},p:Rs,d(h){h&&n(p)}}}function dt(g){let p,w="üí° Using <code>train_new_from_iterator()</code> on the same corpus won‚Äôt result in the exact same vocabulary. This is because when there is a choice of the most frequent pair, we selected the first one encountered, while the ü§ó Tokenizers library selects the first one based on its inner IDs.";return{c(){p=j("p"),p.innerHTML=w},l(h){p=J(h,"P",{"data-svelte-h":!0}),u(p)!=="svelte-lvgbtz"&&(p.innerHTML=w)},m(h,T){t(h,p,T)},p:Rs,d(h){h&&n(p)}}}function ft(g){let p,w="‚ö†Ô∏è Our implementation will throw an error if there is an unknown character since we didn‚Äôt do anything to handle them. GPT-2 doesn‚Äôt actually have an unknown token (it‚Äôs impossible to get an unknown character when using byte-level BPE), but this could happen here because we did not include all the possible bytes in the initial vocabulary. This aspect of BPE is beyond the scope of this section, so we‚Äôve left the details out.";return{c(){p=j("p"),p.textContent=w},l(h){p=J(h,"P",{"data-svelte-h":!0}),u(p)!=="svelte-165040c"&&(p.textContent=w)},m(h,T){t(h,p,T)},p:Rs,d(h){h&&n(p)}}}function It(g){let p,w,h,T,b,Ps,k,Ks,$,Cn="Byte-Pair Encoding (BPE) was initially developed as an algorithm to compress texts, and then used by OpenAI for tokenization when pretraining the GPT model. It‚Äôs used by a lot of Transformer models, including GPT, GPT-2, RoBERTa, BART, and DeBERTa.",Fs,q,Ls,m,Os,Q,sl,A,dn="BPE training starts by computing the unique set of words used in the corpus (after the normalization and pre-tokenization steps are completed), then building the vocabulary by taking all the symbols used to write those words. As a very simple example, let‚Äôs say our corpus uses these five words:",ll,B,nl,z,fn="The base vocabulary will then be <code>[&quot;b&quot;, &quot;g&quot;, &quot;h&quot;, &quot;n&quot;, &quot;p&quot;, &quot;s&quot;, &quot;u&quot;]</code>. For real-world cases, that base vocabulary will contain all the ASCII characters, at the very least, and probably some Unicode characters as well. If an example you are tokenizing uses a character that is not in the training corpus, that character will be converted to the unknown token. That‚Äôs one reason why lots of NLP models are very bad at analyzing content with emojis, for instance.",tl,x,al,V,In="After getting this base vocabulary, we add new tokens until the desired vocabulary size is reached by learning <em>merges</em>, which are rules to merge two elements of the existing vocabulary together into a new one. So, at the beginning these merges will create tokens with two characters, and then, as training progresses, longer subwords.",el,v,bn="At any step during the tokenizer training, the BPE algorithm will search for the most frequent pair of existing tokens (by ‚Äúpair,‚Äù here we mean two consecutive tokens in a word). That most frequent pair is the one that will be merged, and we rinse and repeat for the next step.",pl,E,kn="Going back to our previous example, let‚Äôs assume the words had the following frequencies:",Ml,Z,il,S,$n="meaning <code>&quot;hug&quot;</code> was present 10 times in the corpus, <code>&quot;pug&quot;</code> 5 times, <code>&quot;pun&quot;</code> 12 times, <code>&quot;bun&quot;</code> 4 times, and <code>&quot;hugs&quot;</code> 5 times. We start the training by splitting each word into characters (the ones that form our initial vocabulary) so we can see each word as a list of tokens:",yl,G,rl,N,qn="Then we look at pairs. The pair <code>(&quot;h&quot;, &quot;u&quot;)</code> is present in the words <code>&quot;hug&quot;</code> and <code>&quot;hugs&quot;</code>, so 15 times total in the corpus. It‚Äôs not the most frequent pair, though: that honor belongs to <code>(&quot;u&quot;, &quot;g&quot;)</code>, which is present in <code>&quot;hug&quot;</code>, <code>&quot;pug&quot;</code>, and <code>&quot;hugs&quot;</code>, for a grand total of 20 times in the vocabulary.",ol,_,Qn="Thus, the first merge rule learned by the tokenizer is <code>(&quot;u&quot;, &quot;g&quot;) -&gt; &quot;ug&quot;</code>, which means that <code>&quot;ug&quot;</code> will be added to the vocabulary, and the pair should be merged in all the words of the corpus. At the end of this stage, the vocabulary and corpus look like this:",cl,H,jl,X,An="Now we have some pairs that result in a token longer than two characters: the pair <code>(&quot;h&quot;, &quot;ug&quot;)</code>, for instance (present 15 times in the corpus). The most frequent pair at this stage is <code>(&quot;u&quot;, &quot;n&quot;)</code>, however, present 16 times in the corpus, so the second merge rule learned is <code>(&quot;u&quot;, &quot;n&quot;) -&gt; &quot;un&quot;</code>. Adding that to the vocabulary and merging all existing occurrences leads us to:",Jl,D,hl,W,Bn="Now the most frequent pair is <code>(&quot;h&quot;, &quot;ug&quot;)</code>, so we learn the merge rule <code>(&quot;h&quot;, &quot;ug&quot;) -&gt; &quot;hug&quot;</code>, which gives us our first three-letter token. After the merge, the corpus looks like this:",ul,R,Ul,Y,zn="And we continue like this until we reach the desired vocabulary size.",wl,C,Tl,P,gl,K,Vn="Tokenization follows the training process closely, in the sense that new inputs are tokenized by applying the following steps:",ml,F,vn="<li>Normalization</li> <li>Pre-tokenization</li> <li>Splitting the words into individual characters</li> <li>Applying the merge rules learned in order on those splits</li>",xl,L,En="Let‚Äôs take the example we used during training, with the three merge rules learned:",Cl,O,dl,ss,Zn="The word <code>&quot;bug&quot;</code> will be tokenized as <code>[&quot;b&quot;, &quot;ug&quot;]</code>. <code>&quot;mug&quot;</code>, however, will be tokenized as <code>[&quot;[UNK]&quot;, &quot;ug&quot;]</code> since the letter <code>&quot;m&quot;</code> was not in the base vocabulary. Likewise, the word <code>&quot;thug&quot;</code> will be tokenized as <code>[&quot;[UNK]&quot;, &quot;hug&quot;]</code>: the letter <code>&quot;t&quot;</code> is not in the base vocabulary, and applying the merge rules results first in <code>&quot;u&quot;</code> and <code>&quot;g&quot;</code> being merged and then <code>&quot;h&quot;</code> and <code>&quot;ug&quot;</code> being merged.",fl,d,Il,ls,bl,ns,Sn="Now let‚Äôs take a look at an implementation of the BPE algorithm. This won‚Äôt be an optimized version you can actually use on a big corpus; we just want to show you the code so you can understand the algorithm a little bit better.",kl,ts,Gn="First we need a corpus, so let‚Äôs create a simple one with a few sentences:",$l,as,ql,es,Nn="Next, we need to pre-tokenize that corpus into words. Since we are replicating a BPE tokenizer (like GPT-2), we will use the <code>gpt2</code> tokenizer for the pre-tokenization:",Ql,ps,Al,Ms,_n="Then we compute the frequencies of each word in the corpus as we do the pre-tokenization:",Bl,is,zl,ys,Vl,rs,Hn="The next step is to compute the base vocabulary, formed by all the characters used in the corpus:",vl,os,El,cs,Zl,js,Xn="We also add the special tokens used by the model at the beginning of that vocabulary. In the case of GPT-2, the only special token is <code>&quot;&lt;|endoftext|&gt;&quot;</code>:",Sl,Js,Gl,hs,Dn="We now need to split each word into individual characters, to be able to start training:",Nl,us,_l,Us,Wn="Now that we are ready for training, let‚Äôs write a function that computes the frequency of each pair. We‚Äôll need to use this at each step of the training:",Hl,ws,Xl,Ts,Rn="Let‚Äôs have a look at a part of this dictionary after the initial splits:",Dl,gs,Wl,ms,Rl,xs,Yn="Now, finding the most frequent pair only takes a quick loop:",Yl,Cs,Pl,ds,Kl,fs,Pn="So the first merge to learn is <code>(&#39;ƒ†&#39;, &#39;t&#39;) -&gt; &#39;ƒ†t&#39;</code>, and we add <code>&#39;ƒ†t&#39;</code> to the vocabulary:",Fl,Is,Ll,bs,Kn="To continue, we need to apply that merge in our <code>splits</code> dictionary. Let‚Äôs write another function for this:",Ol,ks,sn,$s,Fn="And we can have a look at the result of the first merge:",ln,qs,nn,Qs,tn,As,Ln="Now we have everything we need to loop until we have learned all the merges we want. Let‚Äôs aim for a vocab size of 50:",an,Bs,en,zs,On="As a result, we‚Äôve learned 19 merge rules (the initial vocabulary had a size of 31 ‚Äî 30 characters in the alphabet, plus the special token):",pn,Vs,Mn,vs,yn,Es,st="And the vocabulary is composed of the special token, the initial alphabet, and all the results of the merges:",rn,Zs,on,Ss,cn,f,jn,Gs,lt="To tokenize a new text, we pre-tokenize it, split it, then apply all the merge rules learned:",Jn,Ns,hn,_s,nt="We can try this on any text composed of characters in the alphabet:",un,Hs,Un,Xs,wn,I,Tn,Ds,tt="That‚Äôs it for the BPE algorithm! Next, we‚Äôll have a look at WordPiece.",gn,Ys,mn;return b=new xn({props:{title:"Byte-Pair Encoding tokenization",local:"byte-pair-encoding-tokenization",headingTag:"h1"}}),k=new Tt({props:{chapter:6,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter6/section5.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter6/section5.ipynb"}]}}),q=new wt({props:{id:"HEikzVL-lZU"}}),m=new Ws({props:{$$slots:{default:[gt]},$$scope:{ctx:g}}}),Q=new xn({props:{title:"Training algorithm",local:"training-algorithm",headingTag:"h2"}}),B=new U({props:{code:"JTIyaHVnJTIyJTJDJTIwJTIycHVnJTIyJTJDJTIwJTIycHVuJTIyJTJDJTIwJTIyYnVuJTIyJTJDJTIwJTIyaHVncyUyMg==",highlighted:'<span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-string">&quot;pug&quot;</span>, <span class="hljs-string">&quot;pun&quot;</span>, <span class="hljs-string">&quot;bun&quot;</span>, <span class="hljs-string">&quot;hugs&quot;</span>',wrap:!1}}),x=new Ws({props:{$$slots:{default:[mt]},$$scope:{ctx:g}}}),Z=new U({props:{code:"KCUyMmh1ZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwdWclMjIlMkMlMjA1KSUyQyUyMCglMjJwdW4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYnVuJTIyJTJDJTIwNCklMkMlMjAoJTIyaHVncyUyMiUyQyUyMDUp",highlighted:'(<span class="hljs-string">&quot;hug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pug&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;pun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;bun&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;hugs&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)',wrap:!1}}),G=new U({props:{code:"KCUyMmglMjIlMjAlMjJ1JTIyJTIwJTIyZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwJTIyJTIwJTIydSUyMiUyMCUyMmclMjIlMkMlMjA1KSUyQyUyMCglMjJwJTIyJTIwJTIydSUyMiUyMCUyMm4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYiUyMiUyMCUyMnUlMjIlMjAlMjJuJTIyJTJDJTIwNCklMkMlMjAoJTIyaCUyMiUyMCUyMnUlMjIlMjAlMjJnJTIyJTIwJTIycyUyMiUyQyUyMDUp",highlighted:'(<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">10</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;g&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">12</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">4</span>)<span class="hljs-punctuation">,</span> (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;g&quot;</span> <span class="hljs-string">&quot;s&quot;</span><span class="hljs-punctuation">,</span> <span class="hljs-number">5</span>)',wrap:!1}}),H=new U({props:{code:"Vm9jYWJ1bGFyeSUzQSUyMCU1QiUyMmIlMjIlMkMlMjAlMjJnJTIyJTJDJTIwJTIyaCUyMiUyQyUyMCUyMm4lMjIlMkMlMjAlMjJwJTIyJTJDJTIwJTIycyUyMiUyQyUyMCUyMnUlMjIlMkMlMjAlMjJ1ZyUyMiU1RCUwQUNvcnB1cyUzQSUyMCglMjJoJTIyJTIwJTIydWclMjIlMkMlMjAxMCklMkMlMjAoJTIycCUyMiUyMCUyMnVnJTIyJTJDJTIwNSklMkMlMjAoJTIycCUyMiUyMCUyMnUlMjIlMjAlMjJuJTIyJTJDJTIwMTIpJTJDJTIwKCUyMmIlMjIlMjAlMjJ1JTIyJTIwJTIybiUyMiUyQyUyMDQpJTJDJTIwKCUyMmglMjIlMjAlMjJ1ZyUyMiUyMCUyMnMlMjIlMkMlMjA1KQ==",highlighted:`<span class="hljs-symbol">Vocabulary:</span> [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>]
<span class="hljs-symbol">Corpus:</span> (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;u&quot;</span> <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;ug&quot;</span> <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-number">5</span>)`,wrap:!1}}),D=new U({props:{code:"Vm9jYWJ1bGFyeSUzQSUyMCU1QiUyMmIlMjIlMkMlMjAlMjJnJTIyJTJDJTIwJTIyaCUyMiUyQyUyMCUyMm4lMjIlMkMlMjAlMjJwJTIyJTJDJTIwJTIycyUyMiUyQyUyMCUyMnUlMjIlMkMlMjAlMjJ1ZyUyMiUyQyUyMCUyMnVuJTIyJTVEJTBBQ29ycHVzJTNBJTIwKCUyMmglMjIlMjAlMjJ1ZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwJTIyJTIwJTIydWclMjIlMkMlMjA1KSUyQyUyMCglMjJwJTIyJTIwJTIydW4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYiUyMiUyMCUyMnVuJTIyJTJDJTIwNCklMkMlMjAoJTIyaCUyMiUyMCUyMnVnJTIyJTIwJTIycyUyMiUyQyUyMDUp",highlighted:`<span class="hljs-symbol">Vocabulary:</span> [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-string">&quot;un&quot;</span>]
<span class="hljs-symbol">Corpus:</span> (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;h&quot;</span> <span class="hljs-string">&quot;ug&quot;</span> <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-number">5</span>)`,wrap:!1}}),R=new U({props:{code:"Vm9jYWJ1bGFyeSUzQSUyMCU1QiUyMmIlMjIlMkMlMjAlMjJnJTIyJTJDJTIwJTIyaCUyMiUyQyUyMCUyMm4lMjIlMkMlMjAlMjJwJTIyJTJDJTIwJTIycyUyMiUyQyUyMCUyMnUlMjIlMkMlMjAlMjJ1ZyUyMiUyQyUyMCUyMnVuJTIyJTJDJTIwJTIyaHVnJTIyJTVEJTBBQ29ycHVzJTNBJTIwKCUyMmh1ZyUyMiUyQyUyMDEwKSUyQyUyMCglMjJwJTIyJTIwJTIydWclMjIlMkMlMjA1KSUyQyUyMCglMjJwJTIyJTIwJTIydW4lMjIlMkMlMjAxMiklMkMlMjAoJTIyYiUyMiUyMCUyMnVuJTIyJTJDJTIwNCklMkMlMjAoJTIyaHVnJTIyJTIwJTIycyUyMiUyQyUyMDUp",highlighted:`<span class="hljs-symbol">Vocabulary:</span> [<span class="hljs-string">&quot;b&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>, <span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>, <span class="hljs-string">&quot;p&quot;</span>, <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-string">&quot;hug&quot;</span>]
<span class="hljs-symbol">Corpus:</span> (<span class="hljs-string">&quot;hug&quot;</span>, <span class="hljs-number">10</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;ug&quot;</span>, <span class="hljs-number">5</span>), (<span class="hljs-string">&quot;p&quot;</span> <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-number">12</span>), (<span class="hljs-string">&quot;b&quot;</span> <span class="hljs-string">&quot;un&quot;</span>, <span class="hljs-number">4</span>), (<span class="hljs-string">&quot;hug&quot;</span> <span class="hljs-string">&quot;s&quot;</span>, <span class="hljs-number">5</span>)`,wrap:!1}}),C=new Ws({props:{$$slots:{default:[xt]},$$scope:{ctx:g}}}),P=new xn({props:{title:"Tokenization algorithm",local:"tokenization-algorithm",headingTag:"h2"}}),O=new U({props:{code:"KCUyMnUlMjIlMkMlMjAlMjJnJTIyKSUyMC0lM0UlMjAlMjJ1ZyUyMiUwQSglMjJ1JTIyJTJDJTIwJTIybiUyMiklMjAtJTNFJTIwJTIydW4lMjIlMEEoJTIyaCUyMiUyQyUyMCUyMnVnJTIyKSUyMC0lM0UlMjAlMjJodWclMjI=",highlighted:`<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;g&quot;</span>)</span> -&gt;</span> <span class="hljs-string">&quot;ug&quot;</span>
<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">&quot;u&quot;</span>, <span class="hljs-string">&quot;n&quot;</span>)</span> -&gt;</span> <span class="hljs-string">&quot;un&quot;</span>
<span class="hljs-function"><span class="hljs-params">(<span class="hljs-string">&quot;h&quot;</span>, <span class="hljs-string">&quot;ug&quot;</span>)</span> -&gt;</span> <span class="hljs-string">&quot;hug&quot;</span>`,wrap:!1}}),d=new Ws({props:{$$slots:{default:[Ct]},$$scope:{ctx:g}}}),ls=new xn({props:{title:"Implementing BPE",local:"implementing-bpe",headingTag:"h2"}}),as=new U({props:{code:"Y29ycHVzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIyVGhpcyUyMGlzJTIwdGhlJTIwSHVnZ2luZyUyMEZhY2UlMjBDb3Vyc2UuJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyVGhpcyUyMGNoYXB0ZXIlMjBpcyUyMGFib3V0JTIwdG9rZW5pemF0aW9uLiUyMiUyQyUwQSUyMCUyMCUyMCUyMCUyMlRoaXMlMjBzZWN0aW9uJTIwc2hvd3MlMjBzZXZlcmFsJTIwdG9rZW5pemVyJTIwYWxnb3JpdGhtcy4lMjIlMkMlMEElMjAlMjAlMjAlMjAlMjJIb3BlZnVsbHklMkMlMjB5b3UlMjB3aWxsJTIwYmUlMjBhYmxlJTIwdG8lMjB1bmRlcnN0YW5kJTIwaG93JTIwdGhleSUyMGFyZSUyMHRyYWluZWQlMjBhbmQlMjBnZW5lcmF0ZSUyMHRva2Vucy4lMjIlMkMlMEElNUQ=",highlighted:`corpus = [
    <span class="hljs-string">&quot;This is the Hugging Face Course.&quot;</span>,
    <span class="hljs-string">&quot;This chapter is about tokenization.&quot;</span>,
    <span class="hljs-string">&quot;This section shows several tokenizer algorithms.&quot;</span>,
    <span class="hljs-string">&quot;Hopefully, you will be able to understand how they are trained and generate tokens.&quot;</span>,
]`,wrap:!1}}),ps=new U({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJncHQyJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)`,wrap:!1}}),is=new U({props:{code:"ZnJvbSUyMGNvbGxlY3Rpb25zJTIwaW1wb3J0JTIwZGVmYXVsdGRpY3QlMEElMEF3b3JkX2ZyZXFzJTIwJTNEJTIwZGVmYXVsdGRpY3QoaW50KSUwQSUwQWZvciUyMHRleHQlMjBpbiUyMGNvcnB1cyUzQSUwQSUyMCUyMCUyMCUyMHdvcmRzX3dpdGhfb2Zmc2V0cyUyMCUzRCUyMHRva2VuaXplci5iYWNrZW5kX3Rva2VuaXplci5wcmVfdG9rZW5pemVyLnByZV90b2tlbml6ZV9zdHIodGV4dCklMEElMjAlMjAlMjAlMjBuZXdfd29yZHMlMjAlM0QlMjAlNUJ3b3JkJTIwZm9yJTIwd29yZCUyQyUyMG9mZnNldCUyMGluJTIwd29yZHNfd2l0aF9vZmZzZXRzJTVEJTBBJTIwJTIwJTIwJTIwZm9yJTIwd29yZCUyMGluJTIwbmV3X3dvcmRzJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwd29yZF9mcmVxcyU1QndvcmQlNUQlMjAlMkIlM0QlMjAxJTBBJTBBcHJpbnQod29yZF9mcmVxcyk=",highlighted:`<span class="hljs-keyword">from</span> collections <span class="hljs-keyword">import</span> defaultdict

word_freqs = defaultdict(<span class="hljs-built_in">int</span>)

<span class="hljs-keyword">for</span> text <span class="hljs-keyword">in</span> corpus:
    words_with_offsets = tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(text)
    new_words = [word <span class="hljs-keyword">for</span> word, offset <span class="hljs-keyword">in</span> words_with_offsets]
    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> new_words:
        word_freqs[word] += <span class="hljs-number">1</span>

<span class="hljs-built_in">print</span>(word_freqs)`,wrap:!1}}),ys=new U({props:{code:"ZGVmYXVsdGRpY3QoaW50JTJDJTIwJTdCJ1RoaXMnJTNBJTIwMyUyQyUyMCclQzQlQTBpcyclM0ElMjAyJTJDJTIwJyVDNCVBMHRoZSclM0ElMjAxJTJDJTIwJyVDNCVBMEh1Z2dpbmcnJTNBJTIwMSUyQyUyMCclQzQlQTBGYWNlJyUzQSUyMDElMkMlMjAnJUM0JUEwQ291cnNlJyUzQSUyMDElMkMlMjAnLiclM0ElMjA0JTJDJTIwJyVDNCVBMGNoYXB0ZXInJTNBJTIwMSUyQyUwQSUyMCUyMCUyMCUyMCclQzQlQTBhYm91dCclM0ElMjAxJTJDJTIwJyVDNCVBMHRva2VuaXphdGlvbiclM0ElMjAxJTJDJTIwJyVDNCVBMHNlY3Rpb24nJTNBJTIwMSUyQyUyMCclQzQlQTBzaG93cyclM0ElMjAxJTJDJTIwJyVDNCVBMHNldmVyYWwnJTNBJTIwMSUyQyUyMCclQzQlQTB0b2tlbml6ZXInJTNBJTIwMSUyQyUyMCclQzQlQTBhbGdvcml0aG1zJyUzQSUyMDElMkMlMEElMjAlMjAlMjAlMjAnSG9wZWZ1bGx5JyUzQSUyMDElMkMlMjAnJTJDJyUzQSUyMDElMkMlMjAnJUM0JUEweW91JyUzQSUyMDElMkMlMjAnJUM0JUEwd2lsbCclM0ElMjAxJTJDJTIwJyVDNCVBMGJlJyUzQSUyMDElMkMlMjAnJUM0JUEwYWJsZSclM0ElMjAxJTJDJTIwJyVDNCVBMHRvJyUzQSUyMDElMkMlMjAnJUM0JUEwdW5kZXJzdGFuZCclM0ElMjAxJTJDJTIwJyVDNCVBMGhvdyclM0ElMjAxJTJDJTBBJTIwJTIwJTIwJTIwJyVDNCVBMHRoZXknJTNBJTIwMSUyQyUyMCclQzQlQTBhcmUnJTNBJTIwMSUyQyUyMCclQzQlQTB0cmFpbmVkJyUzQSUyMDElMkMlMjAnJUM0JUEwYW5kJyUzQSUyMDElMkMlMjAnJUM0JUEwZ2VuZXJhdGUnJTNBJTIwMSUyQyUyMCclQzQlQTB0b2tlbnMnJTNBJTIwMSU3RCk=",highlighted:`defaultdict(<span class="hljs-built_in">int</span>, {<span class="hljs-string">&#x27;This&#x27;</span>: <span class="hljs-number">3</span>, <span class="hljs-string">&#x27;ƒ†is&#x27;</span>: <span class="hljs-number">2</span>, <span class="hljs-string">&#x27;ƒ†the&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†Hugging&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†Face&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†Course&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;.&#x27;</span>: <span class="hljs-number">4</span>, <span class="hljs-string">&#x27;ƒ†chapter&#x27;</span>: <span class="hljs-number">1</span>,
    <span class="hljs-string">&#x27;ƒ†about&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†tokenization&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†section&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†shows&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†several&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†tokenizer&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†algorithms&#x27;</span>: <span class="hljs-number">1</span>,
    <span class="hljs-string">&#x27;Hopefully&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;,&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†you&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†will&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†be&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†able&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†to&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†understand&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†how&#x27;</span>: <span class="hljs-number">1</span>,
    <span class="hljs-string">&#x27;ƒ†they&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†are&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†trained&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†and&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†generate&#x27;</span>: <span class="hljs-number">1</span>, <span class="hljs-string">&#x27;ƒ†tokens&#x27;</span>: <span class="hljs-number">1</span>})`,wrap:!1}}),os=new U({props:{code:"YWxwaGFiZXQlMjAlM0QlMjAlNUIlNUQlMEElMEFmb3IlMjB3b3JkJTIwaW4lMjB3b3JkX2ZyZXFzLmtleXMoKSUzQSUwQSUyMCUyMCUyMCUyMGZvciUyMGxldHRlciUyMGluJTIwd29yZCUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwbGV0dGVyJTIwbm90JTIwaW4lMjBhbHBoYWJldCUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGFscGhhYmV0LmFwcGVuZChsZXR0ZXIpJTBBYWxwaGFiZXQuc29ydCgpJTBBJTBBcHJpbnQoYWxwaGFiZXQp",highlighted:`alphabet = []

<span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> word_freqs.keys():
    <span class="hljs-keyword">for</span> letter <span class="hljs-keyword">in</span> word:
        <span class="hljs-keyword">if</span> letter <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> alphabet:
            alphabet.append(letter)
alphabet.sort()

<span class="hljs-built_in">print</span>(alphabet)`,wrap:!1}}),cs=new U({props:{code:"JTVCJTIwJyUyQyclMkMlMjAnLiclMkMlMjAnQyclMkMlMjAnRiclMkMlMjAnSCclMkMlMjAnVCclMkMlMjAnYSclMkMlMjAnYiclMkMlMjAnYyclMkMlMjAnZCclMkMlMjAnZSclMkMlMjAnZiclMkMlMjAnZyclMkMlMjAnaCclMkMlMjAnaSclMkMlMjAnayclMkMlMjAnbCclMkMlMjAnbSclMkMlMjAnbiclMkMlMjAnbyclMkMlMjAncCclMkMlMjAnciclMkMlMjAncyclMkMlMEElMjAlMjAndCclMkMlMjAndSclMkMlMjAndiclMkMlMjAndyclMkMlMjAneSclMkMlMjAneiclMkMlMjAnJUM0JUEwJyU1RA==",highlighted:`[ <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>,
  <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;ƒ†&#x27;</span>]`,wrap:!1}}),Js=new U({props:{code:"dm9jYWIlMjAlM0QlMjAlNUIlMjIlM0MlN0NlbmRvZnRleHQlN0MlM0UlMjIlNUQlMjAlMkIlMjBhbHBoYWJldC5jb3B5KCk=",highlighted:'vocab = [<span class="hljs-string">&quot;&lt;|endoftext|&gt;&quot;</span>] + alphabet.copy()',wrap:!1}}),us=new U({props:{code:"c3BsaXRzJTIwJTNEJTIwJTdCd29yZCUzQSUyMCU1QmMlMjBmb3IlMjBjJTIwaW4lMjB3b3JkJTVEJTIwZm9yJTIwd29yZCUyMGluJTIwd29yZF9mcmVxcy5rZXlzKCklN0Q=",highlighted:'splits = {word: [c <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> word] <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> word_freqs.keys()}',wrap:!1}}),ws=new U({props:{code:"ZGVmJTIwY29tcHV0ZV9wYWlyX2ZyZXFzKHNwbGl0cyklM0ElMEElMjAlMjAlMjAlMjBwYWlyX2ZyZXFzJTIwJTNEJTIwZGVmYXVsdGRpY3QoaW50KSUwQSUyMCUyMCUyMCUyMGZvciUyMHdvcmQlMkMlMjBmcmVxJTIwaW4lMjB3b3JkX2ZyZXFzLml0ZW1zKCklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzcGxpdCUyMCUzRCUyMHNwbGl0cyU1QndvcmQlNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpZiUyMGxlbihzcGxpdCklMjAlM0QlM0QlMjAxJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY29udGludWUlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmb3IlMjBpJTIwaW4lMjByYW5nZShsZW4oc3BsaXQpJTIwLSUyMDEpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcGFpciUyMCUzRCUyMChzcGxpdCU1QmklNUQlMkMlMjBzcGxpdCU1QmklMjAlMkIlMjAxJTVEKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHBhaXJfZnJlcXMlNUJwYWlyJTVEJTIwJTJCJTNEJTIwZnJlcSUwQSUyMCUyMCUyMCUyMHJldHVybiUyMHBhaXJfZnJlcXM=",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_pair_freqs</span>(<span class="hljs-params">splits</span>):
    pair_freqs = defaultdict(<span class="hljs-built_in">int</span>)
    <span class="hljs-keyword">for</span> word, freq <span class="hljs-keyword">in</span> word_freqs.items():
        split = splits[word]
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(split) == <span class="hljs-number">1</span>:
            <span class="hljs-keyword">continue</span>
        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>):
            pair = (split[i], split[i + <span class="hljs-number">1</span>])
            pair_freqs[pair] += freq
    <span class="hljs-keyword">return</span> pair_freqs`,wrap:!1}}),gs=new U({props:{code:"cGFpcl9mcmVxcyUyMCUzRCUyMGNvbXB1dGVfcGFpcl9mcmVxcyhzcGxpdHMpJTBBJTBBZm9yJTIwaSUyQyUyMGtleSUyMGluJTIwZW51bWVyYXRlKHBhaXJfZnJlcXMua2V5cygpKSUzQSUwQSUyMCUyMCUyMCUyMHByaW50KGYlMjIlN0JrZXklN0QlM0ElMjAlN0JwYWlyX2ZyZXFzJTVCa2V5JTVEJTdEJTIyKSUwQSUyMCUyMCUyMCUyMGlmJTIwaSUyMCUzRSUzRCUyMDUlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBicmVhaw==",highlighted:`pair_freqs = compute_pair_freqs(splits)

<span class="hljs-keyword">for</span> i, key <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(pair_freqs.keys()):
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">{key}</span>: <span class="hljs-subst">{pair_freqs[key]}</span>&quot;</span>)
    <span class="hljs-keyword">if</span> i &gt;= <span class="hljs-number">5</span>:
        <span class="hljs-keyword">break</span>`,wrap:!1}}),ms=new U({props:{code:"KCdUJyUyQyUyMCdoJyklM0ElMjAzJTBBKCdoJyUyQyUyMCdpJyklM0ElMjAzJTBBKCdpJyUyQyUyMCdzJyklM0ElMjA1JTBBKCclQzQlQTAnJTJDJTIwJ2knKSUzQSUyMDIlMEEoJyVDNCVBMCclMkMlMjAndCcpJTNBJTIwNyUwQSgndCclMkMlMjAnaCcpJTNBJTIwMw==",highlighted:`(<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>): <span class="hljs-number">3</span>
(<span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>): <span class="hljs-number">3</span>
(<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>): <span class="hljs-number">5</span>
(<span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>): <span class="hljs-number">2</span>
(<span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>): <span class="hljs-number">7</span>
(<span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>): <span class="hljs-number">3</span>`,wrap:!1}}),Cs=new U({props:{code:"YmVzdF9wYWlyJTIwJTNEJTIwJTIyJTIyJTBBbWF4X2ZyZXElMjAlM0QlMjBOb25lJTBBJTBBZm9yJTIwcGFpciUyQyUyMGZyZXElMjBpbiUyMHBhaXJfZnJlcXMuaXRlbXMoKSUzQSUwQSUyMCUyMCUyMCUyMGlmJTIwbWF4X2ZyZXElMjBpcyUyME5vbmUlMjBvciUyMG1heF9mcmVxJTIwJTNDJTIwZnJlcSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGJlc3RfcGFpciUyMCUzRCUyMHBhaXIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBtYXhfZnJlcSUyMCUzRCUyMGZyZXElMEElMEFwcmludChiZXN0X3BhaXIlMkMlMjBtYXhfZnJlcSk=",highlighted:`best_pair = <span class="hljs-string">&quot;&quot;</span>
max_freq = <span class="hljs-literal">None</span>

<span class="hljs-keyword">for</span> pair, freq <span class="hljs-keyword">in</span> pair_freqs.items():
    <span class="hljs-keyword">if</span> max_freq <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> max_freq &lt; freq:
        best_pair = pair
        max_freq = freq

<span class="hljs-built_in">print</span>(best_pair, max_freq)`,wrap:!1}}),ds=new U({props:{code:"KCclQzQlQTAnJTJDJTIwJ3QnKSUyMDc=",highlighted:'(<span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>) <span class="hljs-number">7</span>',wrap:!1}}),Is=new U({props:{code:"bWVyZ2VzJTIwJTNEJTIwJTdCKCUyMiVDNCVBMCUyMiUyQyUyMCUyMnQlMjIpJTNBJTIwJTIyJUM0JUEwdCUyMiU3RCUwQXZvY2FiLmFwcGVuZCglMjIlQzQlQTB0JTIyKQ==",highlighted:`merges = {(<span class="hljs-string">&quot;ƒ†&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>): <span class="hljs-string">&quot;ƒ†t&quot;</span>}
vocab.append(<span class="hljs-string">&quot;ƒ†t&quot;</span>)`,wrap:!1}}),ks=new U({props:{code:"ZGVmJTIwbWVyZ2VfcGFpcihhJTJDJTIwYiUyQyUyMHNwbGl0cyklM0ElMEElMjAlMjAlMjAlMjBmb3IlMjB3b3JkJTIwaW4lMjB3b3JkX2ZyZXFzJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3BsaXQlMjAlM0QlMjBzcGxpdHMlNUJ3b3JkJTVEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWYlMjBsZW4oc3BsaXQpJTIwJTNEJTNEJTIwMSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGNvbnRpbnVlJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaSUyMCUzRCUyMDAlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjB3aGlsZSUyMGklMjAlM0MlMjBsZW4oc3BsaXQpJTIwLSUyMDElM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpZiUyMHNwbGl0JTVCaSU1RCUyMCUzRCUzRCUyMGElMjBhbmQlMjBzcGxpdCU1QmklMjAlMkIlMjAxJTVEJTIwJTNEJTNEJTIwYiUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHNwbGl0JTIwJTNEJTIwc3BsaXQlNUIlM0FpJTVEJTIwJTJCJTIwJTVCYSUyMCUyQiUyMGIlNUQlMjAlMkIlMjBzcGxpdCU1QmklMjAlMkIlMjAyJTIwJTNBJTVEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZWxzZSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGklMjAlMkIlM0QlMjAxJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3BsaXRzJTVCd29yZCU1RCUyMCUzRCUyMHNwbGl0JTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwc3BsaXRz",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">merge_pair</span>(<span class="hljs-params">a, b, splits</span>):
    <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> word_freqs:
        split = splits[word]
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(split) == <span class="hljs-number">1</span>:
            <span class="hljs-keyword">continue</span>

        i = <span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>:
            <span class="hljs-keyword">if</span> split[i] == a <span class="hljs-keyword">and</span> split[i + <span class="hljs-number">1</span>] == b:
                split = split[:i] + [a + b] + split[i + <span class="hljs-number">2</span> :]
            <span class="hljs-keyword">else</span>:
                i += <span class="hljs-number">1</span>
        splits[word] = split
    <span class="hljs-keyword">return</span> splits`,wrap:!1}}),qs=new U({props:{code:"c3BsaXRzJTIwJTNEJTIwbWVyZ2VfcGFpciglMjIlQzQlQTAlMjIlMkMlMjAlMjJ0JTIyJTJDJTIwc3BsaXRzKSUwQXByaW50KHNwbGl0cyU1QiUyMiVDNCVBMHRyYWluZWQlMjIlNUQp",highlighted:`splits = merge_pair(<span class="hljs-string">&quot;ƒ†&quot;</span>, <span class="hljs-string">&quot;t&quot;</span>, splits)
<span class="hljs-built_in">print</span>(splits[<span class="hljs-string">&quot;ƒ†trained&quot;</span>])`,wrap:!1}}),Qs=new U({props:{code:"JTVCJyVDNCVBMHQnJTJDJTIwJ3InJTJDJTIwJ2EnJTJDJTIwJ2knJTJDJTIwJ24nJTJDJTIwJ2UnJTJDJTIwJ2QnJTVE",highlighted:'[<span class="hljs-string">&#x27;ƒ†t&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>]',wrap:!1}}),Bs=new U({props:{code:"dm9jYWJfc2l6ZSUyMCUzRCUyMDUwJTBBJTBBd2hpbGUlMjBsZW4odm9jYWIpJTIwJTNDJTIwdm9jYWJfc2l6ZSUzQSUwQSUyMCUyMCUyMCUyMHBhaXJfZnJlcXMlMjAlM0QlMjBjb21wdXRlX3BhaXJfZnJlcXMoc3BsaXRzKSUwQSUyMCUyMCUyMCUyMGJlc3RfcGFpciUyMCUzRCUyMCUyMiUyMiUwQSUyMCUyMCUyMCUyMG1heF9mcmVxJTIwJTNEJTIwTm9uZSUwQSUyMCUyMCUyMCUyMGZvciUyMHBhaXIlMkMlMjBmcmVxJTIwaW4lMjBwYWlyX2ZyZXFzLml0ZW1zKCklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpZiUyMG1heF9mcmVxJTIwaXMlMjBOb25lJTIwb3IlMjBtYXhfZnJlcSUyMCUzQyUyMGZyZXElM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBiZXN0X3BhaXIlMjAlM0QlMjBwYWlyJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwbWF4X2ZyZXElMjAlM0QlMjBmcmVxJTBBJTIwJTIwJTIwJTIwc3BsaXRzJTIwJTNEJTIwbWVyZ2VfcGFpcigqYmVzdF9wYWlyJTJDJTIwc3BsaXRzKSUwQSUyMCUyMCUyMCUyMG1lcmdlcyU1QmJlc3RfcGFpciU1RCUyMCUzRCUyMGJlc3RfcGFpciU1QjAlNUQlMjAlMkIlMjBiZXN0X3BhaXIlNUIxJTVEJTBBJTIwJTIwJTIwJTIwdm9jYWIuYXBwZW5kKGJlc3RfcGFpciU1QjAlNUQlMjAlMkIlMjBiZXN0X3BhaXIlNUIxJTVEKQ==",highlighted:`vocab_size = <span class="hljs-number">50</span>

<span class="hljs-keyword">while</span> <span class="hljs-built_in">len</span>(vocab) &lt; vocab_size:
    pair_freqs = compute_pair_freqs(splits)
    best_pair = <span class="hljs-string">&quot;&quot;</span>
    max_freq = <span class="hljs-literal">None</span>
    <span class="hljs-keyword">for</span> pair, freq <span class="hljs-keyword">in</span> pair_freqs.items():
        <span class="hljs-keyword">if</span> max_freq <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> max_freq &lt; freq:
            best_pair = pair
            max_freq = freq
    splits = merge_pair(*best_pair, splits)
    merges[best_pair] = best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>]
    vocab.append(best_pair[<span class="hljs-number">0</span>] + best_pair[<span class="hljs-number">1</span>])`,wrap:!1}}),Vs=new U({props:{code:"cHJpbnQobWVyZ2VzKQ==",highlighted:'<span class="hljs-built_in">print</span>(merges)',wrap:!1}}),vs=new U({props:{code:"JTdCKCclQzQlQTAnJTJDJTIwJ3QnKSUzQSUyMCclQzQlQTB0JyUyQyUyMCgnaSclMkMlMjAncycpJTNBJTIwJ2lzJyUyQyUyMCgnZSclMkMlMjAncicpJTNBJTIwJ2VyJyUyQyUyMCgnJUM0JUEwJyUyQyUyMCdhJyklM0ElMjAnJUM0JUEwYSclMkMlMjAoJyVDNCVBMHQnJTJDJTIwJ28nKSUzQSUyMCclQzQlQTB0byclMkMlMjAoJ2UnJTJDJTIwJ24nKSUzQSUyMCdlbiclMkMlMEElMjAoJ1QnJTJDJTIwJ2gnKSUzQSUyMCdUaCclMkMlMjAoJ1RoJyUyQyUyMCdpcycpJTNBJTIwJ1RoaXMnJTJDJTIwKCdvJyUyQyUyMCd1JyklM0ElMjAnb3UnJTJDJTIwKCdzJyUyQyUyMCdlJyklM0ElMjAnc2UnJTJDJTIwKCclQzQlQTB0byclMkMlMjAnaycpJTNBJTIwJyVDNCVBMHRvayclMkMlMEElMjAoJyVDNCVBMHRvayclMkMlMjAnZW4nKSUzQSUyMCclQzQlQTB0b2tlbiclMkMlMjAoJ24nJTJDJTIwJ2QnKSUzQSUyMCduZCclMkMlMjAoJyVDNCVBMCclMkMlMjAnaXMnKSUzQSUyMCclQzQlQTBpcyclMkMlMjAoJyVDNCVBMHQnJTJDJTIwJ2gnKSUzQSUyMCclQzQlQTB0aCclMkMlMjAoJyVDNCVBMHRoJyUyQyUyMCdlJyklM0ElMjAnJUM0JUEwdGhlJyUyQyUwQSUyMCgnaSclMkMlMjAnbicpJTNBJTIwJ2luJyUyQyUyMCgnJUM0JUEwYSclMkMlMjAnYicpJTNBJTIwJyVDNCVBMGFiJyUyQyUyMCgnJUM0JUEwdG9rZW4nJTJDJTIwJ2knKSUzQSUyMCclQzQlQTB0b2tlbmknJTdE",highlighted:`{(<span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>): <span class="hljs-string">&#x27;ƒ†t&#x27;</span>, (<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>): <span class="hljs-string">&#x27;is&#x27;</span>, (<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>): <span class="hljs-string">&#x27;er&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>): <span class="hljs-string">&#x27;ƒ†a&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†t&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>): <span class="hljs-string">&#x27;ƒ†to&#x27;</span>, (<span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>): <span class="hljs-string">&#x27;en&#x27;</span>,
 (<span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>): <span class="hljs-string">&#x27;Th&#x27;</span>, (<span class="hljs-string">&#x27;Th&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>): <span class="hljs-string">&#x27;This&#x27;</span>, (<span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>): <span class="hljs-string">&#x27;ou&#x27;</span>, (<span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;se&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†to&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>): <span class="hljs-string">&#x27;ƒ†tok&#x27;</span>,
 (<span class="hljs-string">&#x27;ƒ†tok&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>): <span class="hljs-string">&#x27;ƒ†token&#x27;</span>, (<span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>): <span class="hljs-string">&#x27;nd&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>): <span class="hljs-string">&#x27;ƒ†is&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†t&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>): <span class="hljs-string">&#x27;ƒ†th&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†th&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>): <span class="hljs-string">&#x27;ƒ†the&#x27;</span>,
 (<span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>): <span class="hljs-string">&#x27;in&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>): <span class="hljs-string">&#x27;ƒ†ab&#x27;</span>, (<span class="hljs-string">&#x27;ƒ†token&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>): <span class="hljs-string">&#x27;ƒ†tokeni&#x27;</span>}`,wrap:!1}}),Zs=new U({props:{code:"cHJpbnQodm9jYWIp",highlighted:'<span class="hljs-built_in">print</span>(vocab)',wrap:!1}}),Ss=new U({props:{code:"JTVCJyUzQyU3Q2VuZG9mdGV4dCU3QyUzRSclMkMlMjAnJTJDJyUyQyUyMCcuJyUyQyUyMCdDJyUyQyUyMCdGJyUyQyUyMCdIJyUyQyUyMCdUJyUyQyUyMCdhJyUyQyUyMCdiJyUyQyUyMCdjJyUyQyUyMCdkJyUyQyUyMCdlJyUyQyUyMCdmJyUyQyUyMCdnJyUyQyUyMCdoJyUyQyUyMCdpJyUyQyUyMCdrJyUyQyUyMCdsJyUyQyUyMCdtJyUyQyUyMCduJyUyQyUyMCdvJyUyQyUwQSUyMCdwJyUyQyUyMCdyJyUyQyUyMCdzJyUyQyUyMCd0JyUyQyUyMCd1JyUyQyUyMCd2JyUyQyUyMCd3JyUyQyUyMCd5JyUyQyUyMCd6JyUyQyUyMCclQzQlQTAnJTJDJTIwJyVDNCVBMHQnJTJDJTIwJ2lzJyUyQyUyMCdlciclMkMlMjAnJUM0JUEwYSclMkMlMjAnJUM0JUEwdG8nJTJDJTIwJ2VuJyUyQyUyMCdUaCclMkMlMjAnVGhpcyclMkMlMjAnb3UnJTJDJTIwJ3NlJyUyQyUwQSUyMCclQzQlQTB0b2snJTJDJTIwJyVDNCVBMHRva2VuJyUyQyUyMCduZCclMkMlMjAnJUM0JUEwaXMnJTJDJTIwJyVDNCVBMHRoJyUyQyUyMCclQzQlQTB0aGUnJTJDJTIwJ2luJyUyQyUyMCclQzQlQTBhYiclMkMlMjAnJUM0JUEwdG9rZW5pJyU1RA==",highlighted:`[<span class="hljs-string">&#x27;&lt;|endoftext|&gt;&#x27;</span>, <span class="hljs-string">&#x27;,&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-string">&#x27;H&#x27;</span>, <span class="hljs-string">&#x27;T&#x27;</span>, <span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-string">&#x27;d&#x27;</span>, <span class="hljs-string">&#x27;e&#x27;</span>, <span class="hljs-string">&#x27;f&#x27;</span>, <span class="hljs-string">&#x27;g&#x27;</span>, <span class="hljs-string">&#x27;h&#x27;</span>, <span class="hljs-string">&#x27;i&#x27;</span>, <span class="hljs-string">&#x27;k&#x27;</span>, <span class="hljs-string">&#x27;l&#x27;</span>, <span class="hljs-string">&#x27;m&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>,
 <span class="hljs-string">&#x27;p&#x27;</span>, <span class="hljs-string">&#x27;r&#x27;</span>, <span class="hljs-string">&#x27;s&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;u&#x27;</span>, <span class="hljs-string">&#x27;v&#x27;</span>, <span class="hljs-string">&#x27;w&#x27;</span>, <span class="hljs-string">&#x27;y&#x27;</span>, <span class="hljs-string">&#x27;z&#x27;</span>, <span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;ƒ†t&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;er&#x27;</span>, <span class="hljs-string">&#x27;ƒ†a&#x27;</span>, <span class="hljs-string">&#x27;ƒ†to&#x27;</span>, <span class="hljs-string">&#x27;en&#x27;</span>, <span class="hljs-string">&#x27;Th&#x27;</span>, <span class="hljs-string">&#x27;This&#x27;</span>, <span class="hljs-string">&#x27;ou&#x27;</span>, <span class="hljs-string">&#x27;se&#x27;</span>,
 <span class="hljs-string">&#x27;ƒ†tok&#x27;</span>, <span class="hljs-string">&#x27;ƒ†token&#x27;</span>, <span class="hljs-string">&#x27;nd&#x27;</span>, <span class="hljs-string">&#x27;ƒ†is&#x27;</span>, <span class="hljs-string">&#x27;ƒ†th&#x27;</span>, <span class="hljs-string">&#x27;ƒ†the&#x27;</span>, <span class="hljs-string">&#x27;in&#x27;</span>, <span class="hljs-string">&#x27;ƒ†ab&#x27;</span>, <span class="hljs-string">&#x27;ƒ†tokeni&#x27;</span>]`,wrap:!1}}),f=new Ws({props:{$$slots:{default:[dt]},$$scope:{ctx:g}}}),Ns=new U({props:{code:"ZGVmJTIwdG9rZW5pemUodGV4dCklM0ElMEElMjAlMjAlMjAlMjBwcmVfdG9rZW5pemVfcmVzdWx0JTIwJTNEJTIwdG9rZW5pemVyLl90b2tlbml6ZXIucHJlX3Rva2VuaXplci5wcmVfdG9rZW5pemVfc3RyKHRleHQpJTBBJTIwJTIwJTIwJTIwcHJlX3Rva2VuaXplZF90ZXh0JTIwJTNEJTIwJTVCd29yZCUyMGZvciUyMHdvcmQlMkMlMjBvZmZzZXQlMjBpbiUyMHByZV90b2tlbml6ZV9yZXN1bHQlNUQlMEElMjAlMjAlMjAlMjBzcGxpdHMlMjAlM0QlMjAlNUIlNUJsJTIwZm9yJTIwbCUyMGluJTIwd29yZCU1RCUyMGZvciUyMHdvcmQlMjBpbiUyMHByZV90b2tlbml6ZWRfdGV4dCU1RCUwQSUyMCUyMCUyMCUyMGZvciUyMHBhaXIlMkMlMjBtZXJnZSUyMGluJTIwbWVyZ2VzLml0ZW1zKCklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmb3IlMjBpZHglMkMlMjBzcGxpdCUyMGluJTIwZW51bWVyYXRlKHNwbGl0cyklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpJTIwJTNEJTIwMCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHdoaWxlJTIwaSUyMCUzQyUyMGxlbihzcGxpdCklMjAtJTIwMSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwc3BsaXQlNUJpJTVEJTIwJTNEJTNEJTIwcGFpciU1QjAlNUQlMjBhbmQlMjBzcGxpdCU1QmklMjAlMkIlMjAxJTVEJTIwJTNEJTNEJTIwcGFpciU1QjElNUQlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzcGxpdCUyMCUzRCUyMHNwbGl0JTVCJTNBaSU1RCUyMCUyQiUyMCU1Qm1lcmdlJTVEJTIwJTJCJTIwc3BsaXQlNUJpJTIwJTJCJTIwMiUyMCUzQSU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGVsc2UlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpJTIwJTJCJTNEJTIwMSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHNwbGl0cyU1QmlkeCU1RCUyMCUzRCUyMHNwbGl0JTBBJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwc3VtKHNwbGl0cyUyQyUyMCU1QiU1RCk=",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize</span>(<span class="hljs-params">text</span>):
    pre_tokenize_result = tokenizer._tokenizer.pre_tokenizer.pre_tokenize_str(text)
    pre_tokenized_text = [word <span class="hljs-keyword">for</span> word, offset <span class="hljs-keyword">in</span> pre_tokenize_result]
    splits = [[l <span class="hljs-keyword">for</span> l <span class="hljs-keyword">in</span> word] <span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> pre_tokenized_text]
    <span class="hljs-keyword">for</span> pair, merge <span class="hljs-keyword">in</span> merges.items():
        <span class="hljs-keyword">for</span> idx, split <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(splits):
            i = <span class="hljs-number">0</span>
            <span class="hljs-keyword">while</span> i &lt; <span class="hljs-built_in">len</span>(split) - <span class="hljs-number">1</span>:
                <span class="hljs-keyword">if</span> split[i] == pair[<span class="hljs-number">0</span>] <span class="hljs-keyword">and</span> split[i + <span class="hljs-number">1</span>] == pair[<span class="hljs-number">1</span>]:
                    split = split[:i] + [merge] + split[i + <span class="hljs-number">2</span> :]
                <span class="hljs-keyword">else</span>:
                    i += <span class="hljs-number">1</span>
            splits[idx] = split

    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(splits, [])`,wrap:!1}}),Hs=new U({props:{code:"dG9rZW5pemUoJTIyVGhpcyUyMGlzJTIwbm90JTIwYSUyMHRva2VuLiUyMik=",highlighted:'tokenize(<span class="hljs-string">&quot;This is not a token.&quot;</span>)',wrap:!1}}),Xs=new U({props:{code:"JTVCJ1RoaXMnJTJDJTIwJyVDNCVBMGlzJyUyQyUyMCclQzQlQTAnJTJDJTIwJ24nJTJDJTIwJ28nJTJDJTIwJ3QnJTJDJTIwJyVDNCVBMGEnJTJDJTIwJyVDNCVBMHRva2VuJyUyQyUyMCcuJyU1RA==",highlighted:'[<span class="hljs-string">&#x27;This&#x27;</span>, <span class="hljs-string">&#x27;ƒ†is&#x27;</span>, <span class="hljs-string">&#x27;ƒ†&#x27;</span>, <span class="hljs-string">&#x27;n&#x27;</span>, <span class="hljs-string">&#x27;o&#x27;</span>, <span class="hljs-string">&#x27;t&#x27;</span>, <span class="hljs-string">&#x27;ƒ†a&#x27;</span>, <span class="hljs-string">&#x27;ƒ†token&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>]',wrap:!1}}),I=new Ws({props:{warning:!0,$$slots:{default:[ft]},$$scope:{ctx:g}}}),{c(){p=j("meta"),w=a(),h=j("p"),T=a(),M(b.$$.fragment),Ps=a(),M(k.$$.fragment),Ks=a(),$=j("p"),$.textContent=Cn,Fs=a(),M(q.$$.fragment),Ls=a(),M(m.$$.fragment),Os=a(),M(Q.$$.fragment),sl=a(),A=j("p"),A.textContent=dn,ll=a(),M(B.$$.fragment),nl=a(),z=j("p"),z.innerHTML=fn,tl=a(),M(x.$$.fragment),al=a(),V=j("p"),V.innerHTML=In,el=a(),v=j("p"),v.textContent=bn,pl=a(),E=j("p"),E.textContent=kn,Ml=a(),M(Z.$$.fragment),il=a(),S=j("p"),S.innerHTML=$n,yl=a(),M(G.$$.fragment),rl=a(),N=j("p"),N.innerHTML=qn,ol=a(),_=j("p"),_.innerHTML=Qn,cl=a(),M(H.$$.fragment),jl=a(),X=j("p"),X.innerHTML=An,Jl=a(),M(D.$$.fragment),hl=a(),W=j("p"),W.innerHTML=Bn,ul=a(),M(R.$$.fragment),Ul=a(),Y=j("p"),Y.textContent=zn,wl=a(),M(C.$$.fragment),Tl=a(),M(P.$$.fragment),gl=a(),K=j("p"),K.textContent=Vn,ml=a(),F=j("ol"),F.innerHTML=vn,xl=a(),L=j("p"),L.textContent=En,Cl=a(),M(O.$$.fragment),dl=a(),ss=j("p"),ss.innerHTML=Zn,fl=a(),M(d.$$.fragment),Il=a(),M(ls.$$.fragment),bl=a(),ns=j("p"),ns.textContent=Sn,kl=a(),ts=j("p"),ts.textContent=Gn,$l=a(),M(as.$$.fragment),ql=a(),es=j("p"),es.innerHTML=Nn,Ql=a(),M(ps.$$.fragment),Al=a(),Ms=j("p"),Ms.textContent=_n,Bl=a(),M(is.$$.fragment),zl=a(),M(ys.$$.fragment),Vl=a(),rs=j("p"),rs.textContent=Hn,vl=a(),M(os.$$.fragment),El=a(),M(cs.$$.fragment),Zl=a(),js=j("p"),js.innerHTML=Xn,Sl=a(),M(Js.$$.fragment),Gl=a(),hs=j("p"),hs.textContent=Dn,Nl=a(),M(us.$$.fragment),_l=a(),Us=j("p"),Us.textContent=Wn,Hl=a(),M(ws.$$.fragment),Xl=a(),Ts=j("p"),Ts.textContent=Rn,Dl=a(),M(gs.$$.fragment),Wl=a(),M(ms.$$.fragment),Rl=a(),xs=j("p"),xs.textContent=Yn,Yl=a(),M(Cs.$$.fragment),Pl=a(),M(ds.$$.fragment),Kl=a(),fs=j("p"),fs.innerHTML=Pn,Fl=a(),M(Is.$$.fragment),Ll=a(),bs=j("p"),bs.innerHTML=Kn,Ol=a(),M(ks.$$.fragment),sn=a(),$s=j("p"),$s.textContent=Fn,ln=a(),M(qs.$$.fragment),nn=a(),M(Qs.$$.fragment),tn=a(),As=j("p"),As.textContent=Ln,an=a(),M(Bs.$$.fragment),en=a(),zs=j("p"),zs.textContent=On,pn=a(),M(Vs.$$.fragment),Mn=a(),M(vs.$$.fragment),yn=a(),Es=j("p"),Es.textContent=st,rn=a(),M(Zs.$$.fragment),on=a(),M(Ss.$$.fragment),cn=a(),M(f.$$.fragment),jn=a(),Gs=j("p"),Gs.textContent=lt,Jn=a(),M(Ns.$$.fragment),hn=a(),_s=j("p"),_s.textContent=nt,un=a(),M(Hs.$$.fragment),Un=a(),M(Xs.$$.fragment),wn=a(),M(I.$$.fragment),Tn=a(),Ds=j("p"),Ds.textContent=tt,gn=a(),Ys=j("p"),this.h()},l(s){const l=ut("svelte-u9bgzb",document.head);p=J(l,"META",{name:!0,content:!0}),l.forEach(n),w=e(s),h=J(s,"P",{}),rt(h).forEach(n),T=e(s),i(b.$$.fragment,s),Ps=e(s),i(k.$$.fragment,s),Ks=e(s),$=J(s,"P",{"data-svelte-h":!0}),u($)!=="svelte-1ys35ik"&&($.textContent=Cn),Fs=e(s),i(q.$$.fragment,s),Ls=e(s),i(m.$$.fragment,s),Os=e(s),i(Q.$$.fragment,s),sl=e(s),A=J(s,"P",{"data-svelte-h":!0}),u(A)!=="svelte-shk7i3"&&(A.textContent=dn),ll=e(s),i(B.$$.fragment,s),nl=e(s),z=J(s,"P",{"data-svelte-h":!0}),u(z)!=="svelte-1ld47wc"&&(z.innerHTML=fn),tl=e(s),i(x.$$.fragment,s),al=e(s),V=J(s,"P",{"data-svelte-h":!0}),u(V)!=="svelte-dxqp15"&&(V.innerHTML=In),el=e(s),v=J(s,"P",{"data-svelte-h":!0}),u(v)!=="svelte-1jt9hdc"&&(v.textContent=bn),pl=e(s),E=J(s,"P",{"data-svelte-h":!0}),u(E)!=="svelte-tn0v5v"&&(E.textContent=kn),Ml=e(s),i(Z.$$.fragment,s),il=e(s),S=J(s,"P",{"data-svelte-h":!0}),u(S)!=="svelte-253fgn"&&(S.innerHTML=$n),yl=e(s),i(G.$$.fragment,s),rl=e(s),N=J(s,"P",{"data-svelte-h":!0}),u(N)!=="svelte-tikeus"&&(N.innerHTML=qn),ol=e(s),_=J(s,"P",{"data-svelte-h":!0}),u(_)!=="svelte-1ba7gki"&&(_.innerHTML=Qn),cl=e(s),i(H.$$.fragment,s),jl=e(s),X=J(s,"P",{"data-svelte-h":!0}),u(X)!=="svelte-1jrr3se"&&(X.innerHTML=An),Jl=e(s),i(D.$$.fragment,s),hl=e(s),W=J(s,"P",{"data-svelte-h":!0}),u(W)!=="svelte-1r77sw4"&&(W.innerHTML=Bn),ul=e(s),i(R.$$.fragment,s),Ul=e(s),Y=J(s,"P",{"data-svelte-h":!0}),u(Y)!=="svelte-1vbc3ju"&&(Y.textContent=zn),wl=e(s),i(C.$$.fragment,s),Tl=e(s),i(P.$$.fragment,s),gl=e(s),K=J(s,"P",{"data-svelte-h":!0}),u(K)!=="svelte-16041kn"&&(K.textContent=Vn),ml=e(s),F=J(s,"OL",{"data-svelte-h":!0}),u(F)!=="svelte-hczz4s"&&(F.innerHTML=vn),xl=e(s),L=J(s,"P",{"data-svelte-h":!0}),u(L)!=="svelte-waistw"&&(L.textContent=En),Cl=e(s),i(O.$$.fragment,s),dl=e(s),ss=J(s,"P",{"data-svelte-h":!0}),u(ss)!=="svelte-57ne5c"&&(ss.innerHTML=Zn),fl=e(s),i(d.$$.fragment,s),Il=e(s),i(ls.$$.fragment,s),bl=e(s),ns=J(s,"P",{"data-svelte-h":!0}),u(ns)!=="svelte-1vmiqby"&&(ns.textContent=Sn),kl=e(s),ts=J(s,"P",{"data-svelte-h":!0}),u(ts)!=="svelte-ihocys"&&(ts.textContent=Gn),$l=e(s),i(as.$$.fragment,s),ql=e(s),es=J(s,"P",{"data-svelte-h":!0}),u(es)!=="svelte-17swp54"&&(es.innerHTML=Nn),Ql=e(s),i(ps.$$.fragment,s),Al=e(s),Ms=J(s,"P",{"data-svelte-h":!0}),u(Ms)!=="svelte-1piuede"&&(Ms.textContent=_n),Bl=e(s),i(is.$$.fragment,s),zl=e(s),i(ys.$$.fragment,s),Vl=e(s),rs=J(s,"P",{"data-svelte-h":!0}),u(rs)!=="svelte-1n97usn"&&(rs.textContent=Hn),vl=e(s),i(os.$$.fragment,s),El=e(s),i(cs.$$.fragment,s),Zl=e(s),js=J(s,"P",{"data-svelte-h":!0}),u(js)!=="svelte-bp8or4"&&(js.innerHTML=Xn),Sl=e(s),i(Js.$$.fragment,s),Gl=e(s),hs=J(s,"P",{"data-svelte-h":!0}),u(hs)!=="svelte-pe9yho"&&(hs.textContent=Dn),Nl=e(s),i(us.$$.fragment,s),_l=e(s),Us=J(s,"P",{"data-svelte-h":!0}),u(Us)!=="svelte-i39iqv"&&(Us.textContent=Wn),Hl=e(s),i(ws.$$.fragment,s),Xl=e(s),Ts=J(s,"P",{"data-svelte-h":!0}),u(Ts)!=="svelte-h8brnl"&&(Ts.textContent=Rn),Dl=e(s),i(gs.$$.fragment,s),Wl=e(s),i(ms.$$.fragment,s),Rl=e(s),xs=J(s,"P",{"data-svelte-h":!0}),u(xs)!=="svelte-19ljpex"&&(xs.textContent=Yn),Yl=e(s),i(Cs.$$.fragment,s),Pl=e(s),i(ds.$$.fragment,s),Kl=e(s),fs=J(s,"P",{"data-svelte-h":!0}),u(fs)!=="svelte-m36xi"&&(fs.innerHTML=Pn),Fl=e(s),i(Is.$$.fragment,s),Ll=e(s),bs=J(s,"P",{"data-svelte-h":!0}),u(bs)!=="svelte-1pmzgqr"&&(bs.innerHTML=Kn),Ol=e(s),i(ks.$$.fragment,s),sn=e(s),$s=J(s,"P",{"data-svelte-h":!0}),u($s)!=="svelte-d7zdjw"&&($s.textContent=Fn),ln=e(s),i(qs.$$.fragment,s),nn=e(s),i(Qs.$$.fragment,s),tn=e(s),As=J(s,"P",{"data-svelte-h":!0}),u(As)!=="svelte-1vwdf9c"&&(As.textContent=Ln),an=e(s),i(Bs.$$.fragment,s),en=e(s),zs=J(s,"P",{"data-svelte-h":!0}),u(zs)!=="svelte-1r8l9ln"&&(zs.textContent=On),pn=e(s),i(Vs.$$.fragment,s),Mn=e(s),i(vs.$$.fragment,s),yn=e(s),Es=J(s,"P",{"data-svelte-h":!0}),u(Es)!=="svelte-okpg4u"&&(Es.textContent=st),rn=e(s),i(Zs.$$.fragment,s),on=e(s),i(Ss.$$.fragment,s),cn=e(s),i(f.$$.fragment,s),jn=e(s),Gs=J(s,"P",{"data-svelte-h":!0}),u(Gs)!=="svelte-15zp2fc"&&(Gs.textContent=lt),Jn=e(s),i(Ns.$$.fragment,s),hn=e(s),_s=J(s,"P",{"data-svelte-h":!0}),u(_s)!=="svelte-dgrd5"&&(_s.textContent=nt),un=e(s),i(Hs.$$.fragment,s),Un=e(s),i(Xs.$$.fragment,s),wn=e(s),i(I.$$.fragment,s),Tn=e(s),Ds=J(s,"P",{"data-svelte-h":!0}),u(Ds)!=="svelte-b3ofc6"&&(Ds.textContent=tt),gn=e(s),Ys=J(s,"P",{}),rt(Ys).forEach(n),this.h()},h(){ot(p,"name","hf:doc:metadata"),ot(p,"content",bt)},m(s,l){Ut(document.head,p),t(s,w,l),t(s,h,l),t(s,T,l),y(b,s,l),t(s,Ps,l),y(k,s,l),t(s,Ks,l),t(s,$,l),t(s,Fs,l),y(q,s,l),t(s,Ls,l),y(m,s,l),t(s,Os,l),y(Q,s,l),t(s,sl,l),t(s,A,l),t(s,ll,l),y(B,s,l),t(s,nl,l),t(s,z,l),t(s,tl,l),y(x,s,l),t(s,al,l),t(s,V,l),t(s,el,l),t(s,v,l),t(s,pl,l),t(s,E,l),t(s,Ml,l),y(Z,s,l),t(s,il,l),t(s,S,l),t(s,yl,l),y(G,s,l),t(s,rl,l),t(s,N,l),t(s,ol,l),t(s,_,l),t(s,cl,l),y(H,s,l),t(s,jl,l),t(s,X,l),t(s,Jl,l),y(D,s,l),t(s,hl,l),t(s,W,l),t(s,ul,l),y(R,s,l),t(s,Ul,l),t(s,Y,l),t(s,wl,l),y(C,s,l),t(s,Tl,l),y(P,s,l),t(s,gl,l),t(s,K,l),t(s,ml,l),t(s,F,l),t(s,xl,l),t(s,L,l),t(s,Cl,l),y(O,s,l),t(s,dl,l),t(s,ss,l),t(s,fl,l),y(d,s,l),t(s,Il,l),y(ls,s,l),t(s,bl,l),t(s,ns,l),t(s,kl,l),t(s,ts,l),t(s,$l,l),y(as,s,l),t(s,ql,l),t(s,es,l),t(s,Ql,l),y(ps,s,l),t(s,Al,l),t(s,Ms,l),t(s,Bl,l),y(is,s,l),t(s,zl,l),y(ys,s,l),t(s,Vl,l),t(s,rs,l),t(s,vl,l),y(os,s,l),t(s,El,l),y(cs,s,l),t(s,Zl,l),t(s,js,l),t(s,Sl,l),y(Js,s,l),t(s,Gl,l),t(s,hs,l),t(s,Nl,l),y(us,s,l),t(s,_l,l),t(s,Us,l),t(s,Hl,l),y(ws,s,l),t(s,Xl,l),t(s,Ts,l),t(s,Dl,l),y(gs,s,l),t(s,Wl,l),y(ms,s,l),t(s,Rl,l),t(s,xs,l),t(s,Yl,l),y(Cs,s,l),t(s,Pl,l),y(ds,s,l),t(s,Kl,l),t(s,fs,l),t(s,Fl,l),y(Is,s,l),t(s,Ll,l),t(s,bs,l),t(s,Ol,l),y(ks,s,l),t(s,sn,l),t(s,$s,l),t(s,ln,l),y(qs,s,l),t(s,nn,l),y(Qs,s,l),t(s,tn,l),t(s,As,l),t(s,an,l),y(Bs,s,l),t(s,en,l),t(s,zs,l),t(s,pn,l),y(Vs,s,l),t(s,Mn,l),y(vs,s,l),t(s,yn,l),t(s,Es,l),t(s,rn,l),y(Zs,s,l),t(s,on,l),y(Ss,s,l),t(s,cn,l),y(f,s,l),t(s,jn,l),t(s,Gs,l),t(s,Jn,l),y(Ns,s,l),t(s,hn,l),t(s,_s,l),t(s,un,l),y(Hs,s,l),t(s,Un,l),y(Xs,s,l),t(s,wn,l),y(I,s,l),t(s,Tn,l),t(s,Ds,l),t(s,gn,l),t(s,Ys,l),mn=!0},p(s,[l]){const at={};l&2&&(at.$$scope={dirty:l,ctx:s}),m.$set(at);const et={};l&2&&(et.$$scope={dirty:l,ctx:s}),x.$set(et);const pt={};l&2&&(pt.$$scope={dirty:l,ctx:s}),C.$set(pt);const Mt={};l&2&&(Mt.$$scope={dirty:l,ctx:s}),d.$set(Mt);const it={};l&2&&(it.$$scope={dirty:l,ctx:s}),f.$set(it);const yt={};l&2&&(yt.$$scope={dirty:l,ctx:s}),I.$set(yt)},i(s){mn||(r(b.$$.fragment,s),r(k.$$.fragment,s),r(q.$$.fragment,s),r(m.$$.fragment,s),r(Q.$$.fragment,s),r(B.$$.fragment,s),r(x.$$.fragment,s),r(Z.$$.fragment,s),r(G.$$.fragment,s),r(H.$$.fragment,s),r(D.$$.fragment,s),r(R.$$.fragment,s),r(C.$$.fragment,s),r(P.$$.fragment,s),r(O.$$.fragment,s),r(d.$$.fragment,s),r(ls.$$.fragment,s),r(as.$$.fragment,s),r(ps.$$.fragment,s),r(is.$$.fragment,s),r(ys.$$.fragment,s),r(os.$$.fragment,s),r(cs.$$.fragment,s),r(Js.$$.fragment,s),r(us.$$.fragment,s),r(ws.$$.fragment,s),r(gs.$$.fragment,s),r(ms.$$.fragment,s),r(Cs.$$.fragment,s),r(ds.$$.fragment,s),r(Is.$$.fragment,s),r(ks.$$.fragment,s),r(qs.$$.fragment,s),r(Qs.$$.fragment,s),r(Bs.$$.fragment,s),r(Vs.$$.fragment,s),r(vs.$$.fragment,s),r(Zs.$$.fragment,s),r(Ss.$$.fragment,s),r(f.$$.fragment,s),r(Ns.$$.fragment,s),r(Hs.$$.fragment,s),r(Xs.$$.fragment,s),r(I.$$.fragment,s),mn=!0)},o(s){o(b.$$.fragment,s),o(k.$$.fragment,s),o(q.$$.fragment,s),o(m.$$.fragment,s),o(Q.$$.fragment,s),o(B.$$.fragment,s),o(x.$$.fragment,s),o(Z.$$.fragment,s),o(G.$$.fragment,s),o(H.$$.fragment,s),o(D.$$.fragment,s),o(R.$$.fragment,s),o(C.$$.fragment,s),o(P.$$.fragment,s),o(O.$$.fragment,s),o(d.$$.fragment,s),o(ls.$$.fragment,s),o(as.$$.fragment,s),o(ps.$$.fragment,s),o(is.$$.fragment,s),o(ys.$$.fragment,s),o(os.$$.fragment,s),o(cs.$$.fragment,s),o(Js.$$.fragment,s),o(us.$$.fragment,s),o(ws.$$.fragment,s),o(gs.$$.fragment,s),o(ms.$$.fragment,s),o(Cs.$$.fragment,s),o(ds.$$.fragment,s),o(Is.$$.fragment,s),o(ks.$$.fragment,s),o(qs.$$.fragment,s),o(Qs.$$.fragment,s),o(Bs.$$.fragment,s),o(Vs.$$.fragment,s),o(vs.$$.fragment,s),o(Zs.$$.fragment,s),o(Ss.$$.fragment,s),o(f.$$.fragment,s),o(Ns.$$.fragment,s),o(Hs.$$.fragment,s),o(Xs.$$.fragment,s),o(I.$$.fragment,s),mn=!1},d(s){s&&(n(w),n(h),n(T),n(Ps),n(Ks),n($),n(Fs),n(Ls),n(Os),n(sl),n(A),n(ll),n(nl),n(z),n(tl),n(al),n(V),n(el),n(v),n(pl),n(E),n(Ml),n(il),n(S),n(yl),n(rl),n(N),n(ol),n(_),n(cl),n(jl),n(X),n(Jl),n(hl),n(W),n(ul),n(Ul),n(Y),n(wl),n(Tl),n(gl),n(K),n(ml),n(F),n(xl),n(L),n(Cl),n(dl),n(ss),n(fl),n(Il),n(bl),n(ns),n(kl),n(ts),n($l),n(ql),n(es),n(Ql),n(Al),n(Ms),n(Bl),n(zl),n(Vl),n(rs),n(vl),n(El),n(Zl),n(js),n(Sl),n(Gl),n(hs),n(Nl),n(_l),n(Us),n(Hl),n(Xl),n(Ts),n(Dl),n(Wl),n(Rl),n(xs),n(Yl),n(Pl),n(Kl),n(fs),n(Fl),n(Ll),n(bs),n(Ol),n(sn),n($s),n(ln),n(nn),n(tn),n(As),n(an),n(en),n(zs),n(pn),n(Mn),n(yn),n(Es),n(rn),n(on),n(cn),n(jn),n(Gs),n(Jn),n(hn),n(_s),n(un),n(Un),n(wn),n(Tn),n(Ds),n(gn),n(Ys)),n(p),c(b,s),c(k,s),c(q,s),c(m,s),c(Q,s),c(B,s),c(x,s),c(Z,s),c(G,s),c(H,s),c(D,s),c(R,s),c(C,s),c(P,s),c(O,s),c(d,s),c(ls,s),c(as,s),c(ps,s),c(is,s),c(ys,s),c(os,s),c(cs,s),c(Js,s),c(us,s),c(ws,s),c(gs,s),c(ms,s),c(Cs,s),c(ds,s),c(Is,s),c(ks,s),c(qs,s),c(Qs,s),c(Bs,s),c(Vs,s),c(vs,s),c(Zs,s),c(Ss,s),c(f,s),c(Ns,s),c(Hs,s),c(Xs,s),c(I,s)}}}const bt='{"title":"Byte-Pair Encoding tokenization","local":"byte-pair-encoding-tokenization","sections":[{"title":"Training algorithm","local":"training-algorithm","sections":[],"depth":2},{"title":"Tokenization algorithm","local":"tokenization-algorithm","sections":[],"depth":2},{"title":"Implementing BPE","local":"implementing-bpe","sections":[],"depth":2}],"depth":1}';function kt(g){return jt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class vt extends Jt{constructor(p){super(),ht(this,p,kt,It,ct,{})}}export{vt as component};
