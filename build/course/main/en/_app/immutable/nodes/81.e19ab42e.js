import{s as AM,f as VM,o as XM,n as zn}from"../chunks/scheduler.37c15a92.js";import{S as RM,i as vM,g as c,s as a,r as J,m as xs,H as $M,A as NM,h as d,f as l,c as n,j as Fn,u,x as w,n as Ws,E as QM,k as Qe,y as Ke,a as s,v as m,t as y,b as Fe,d as r,w as U,p as Ee}from"../chunks/index.2bf4358c.js";import{T as En}from"../chunks/Tip.363c041f.js";import{Y as Yn}from"../chunks/Youtube.1e50a667.js";import{C as b}from"../chunks/CodeBlock.4f5fc1ad.js";import{C as xM}from"../chunks/CourseFloatingBanner.15ba07e6.js";import{F as FM}from"../chunks/FrameworkSwitchCourse.8d4d4ab6.js";import{H as q}from"../chunks/Heading.8ada512a.js";function EM(k){let i,T;return i=new xM({props:{chapter:7,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter7/section7_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter7/section7_tf.ipynb"}]}}),{c(){J(i.$$.fragment)},l(M){u(i.$$.fragment,M)},m(M,h){m(i,M,h),T=!0},i(M){T||(r(i.$$.fragment,M),T=!0)},o(M){y(i.$$.fragment,M),T=!1},d(M){U(i,M)}}}function YM(k){let i,T;return i=new xM({props:{chapter:7,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter7/section7_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter7/section7_pt.ipynb"}]}}),{c(){J(i.$$.fragment)},l(M){u(i.$$.fragment,M)},m(M,h){m(i,M,h),T=!0},i(M){T||(r(i.$$.fragment,M),T=!0)},o(M){y(i.$$.fragment,M),T=!1},d(M){U(i,M)}}}function zM(k){let i,T='üí° Encoder-only models like BERT tend to be great at extracting answers to factoid questions like ‚ÄúWho invented the Transformer architecture?‚Äù but fare poorly when given open-ended questions like ‚ÄúWhy is the sky blue?‚Äù In these more challenging cases, encoder-decoder models like T5 and BART are typically used to synthesize the information in a way that‚Äôs quite similar to <a href="/course/chapter7/5">text summarization</a>. If you‚Äôre interested in this type of <em>generative</em> question answering, we recommend checking out our <a href="https://yjernite.github.io/lfqa.html" rel="nofollow">demo</a> based on the <a href="https://huggingface.co/datasets/eli5" rel="nofollow">ELI5 dataset</a>.';return{c(){i=c("p"),i.innerHTML=T},l(M){i=d(M,"P",{"data-svelte-h":!0}),w(i)!=="svelte-1jt25je"&&(i.innerHTML=T)},m(M,h){s(M,i,h)},p:zn,d(M){M&&l(i)}}}function HM(k){let i,T="‚úèÔ∏è <strong>Your turn!</strong> When using the XLNet architecture, padding is applied on the left and the question and context are switched. Adapt all the code we just saw to the XLNet architecture (and add <code>padding=True</code>). Be aware that the <code>[CLS]</code> token may not be at the 0 position with padding applied.";return{c(){i=c("p"),i.innerHTML=T},l(M){i=d(M,"P",{"data-svelte-h":!0}),w(i)!=="svelte-1smz6xi"&&(i.innerHTML=T)},m(M,h){s(M,i,h)},p:zn,d(M){M&&l(i)}}}function SM(k){let i,T,M,h="The training code for this example will look a lot like the code in the previous sections, but computing the metrics will be uniquely challenging. Since we padded all the samples to the maximum length we set, there is no data collator to define, so this metric computation is really the only thing we have to worry about. The hard part will be to post-process the model predictions into spans of text in the original examples; once we have done that, the metric from the ü§ó Datasets library will do most of the work for us.",f;return i=new q({props:{title:"Fine-tuning the model with Keras",local:"fine-tuning-the-model-with-keras",headingTag:"h2"}}),{c(){J(i.$$.fragment),T=a(),M=c("p"),M.textContent=h},l(p){u(i.$$.fragment,p),T=n(p),M=d(p,"P",{"data-svelte-h":!0}),w(M)!=="svelte-gueww0"&&(M.textContent=h)},m(p,I){m(i,p,I),s(p,T,I),s(p,M,I),f=!0},i(p){f||(r(i.$$.fragment,p),f=!0)},o(p){y(i.$$.fragment,p),f=!1},d(p){p&&(l(T),l(M)),U(i,p)}}}function qM(k){let i,T,M,h="The training code for this example will look a lot like the code in the previous sections ‚Äî the hardest thing will be to write the <code>compute_metrics()</code> function. Since we padded all the samples to the maximum length we set, there is no data collator to define, so this metric computation is really the only thing we have to worry about. The difficult part will be to post-process the model predictions into spans of text in the original examples; once we have done that, the metric from the ü§ó Datasets library will do most of the work for us.",f;return i=new q({props:{title:"Fine-tuning the model with the Trainer API",local:"fine-tuning-the-model-with-the-trainer-api",headingTag:"h2"}}),{c(){J(i.$$.fragment),T=a(),M=c("p"),M.innerHTML=h},l(p){u(i.$$.fragment,p),T=n(p),M=d(p,"P",{"data-svelte-h":!0}),w(M)!=="svelte-1rpla2e"&&(M.innerHTML=h)},m(p,I){m(i,p,I),s(p,T,I),s(p,M,I),f=!0},i(p){f||(r(i.$$.fragment,p),f=!0)},o(p){y(i.$$.fragment,p),f=!1},d(p){p&&(l(T),l(M)),U(i,p)}}}function LM(k){let i,T;return i=new Yn({props:{id:"VN67ZpN33Ss"}}),{c(){J(i.$$.fragment)},l(M){u(i.$$.fragment,M)},m(M,h){m(i,M,h),T=!0},i(M){T||(r(i.$$.fragment,M),T=!0)},o(M){y(i.$$.fragment,M),T=!1},d(M){U(i,M)}}}function DM(k){let i,T;return i=new Yn({props:{id:"BNy08iIWVJM"}}),{c(){J(i.$$.fragment)},l(M){u(i.$$.fragment,M)},m(M,h){m(i,M,h),T=!0},i(M){T||(r(i.$$.fragment,M),T=!0)},o(M){y(i.$$.fragment,M),T=!1},d(M){U(i,M)}}}function KM(k){let i,T,M,h="For ease of experimentation, let‚Äôs convert these outputs to NumPy arrays:",f,p,I;return i=new b({props:{code:"aW1wb3J0JTIwdGVuc29yZmxvdyUyMGFzJTIwdGYlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwVEZBdXRvTW9kZWxGb3JRdWVzdGlvbkFuc3dlcmluZyUwQSUwQWV2YWxfc2V0X2Zvcl9tb2RlbCUyMCUzRCUyMGV2YWxfc2V0LnJlbW92ZV9jb2x1bW5zKCU1QiUyMmV4YW1wbGVfaWQlMjIlMkMlMjAlMjJvZmZzZXRfbWFwcGluZyUyMiU1RCklMEFldmFsX3NldF9mb3JfbW9kZWwuc2V0X2Zvcm1hdCglMjJudW1weSUyMiklMEElMEFiYXRjaCUyMCUzRCUyMCU3QmslM0ElMjBldmFsX3NldF9mb3JfbW9kZWwlNUJrJTVEJTIwZm9yJTIwayUyMGluJTIwZXZhbF9zZXRfZm9yX21vZGVsLmNvbHVtbl9uYW1lcyU3RCUwQXRyYWluZWRfbW9kZWwlMjAlM0QlMjBURkF1dG9Nb2RlbEZvclF1ZXN0aW9uQW5zd2VyaW5nLmZyb21fcHJldHJhaW5lZCh0cmFpbmVkX2NoZWNrcG9pbnQpJTBBJTBBb3V0cHV0cyUyMCUzRCUyMHRyYWluZWRfbW9kZWwoKipiYXRjaCk=",highlighted:`<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TFAutoModelForQuestionAnswering

eval_set_for_model = eval_set.remove_columns([<span class="hljs-string">&quot;example_id&quot;</span>, <span class="hljs-string">&quot;offset_mapping&quot;</span>])
eval_set_for_model.set_format(<span class="hljs-string">&quot;numpy&quot;</span>)

batch = {k: eval_set_for_model[k] <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> eval_set_for_model.column_names}
trained_model = TFAutoModelForQuestionAnswering.from_pretrained(trained_checkpoint)

outputs = trained_model(**batch)`,wrap:!1}}),p=new b({props:{code:"c3RhcnRfbG9naXRzJTIwJTNEJTIwb3V0cHV0cy5zdGFydF9sb2dpdHMubnVtcHkoKSUwQWVuZF9sb2dpdHMlMjAlM0QlMjBvdXRwdXRzLmVuZF9sb2dpdHMubnVtcHkoKQ==",highlighted:`start_logits = outputs.start_logits.numpy()
end_logits = outputs.end_logits.numpy()`,wrap:!1}}),{c(){J(i.$$.fragment),T=a(),M=c("p"),M.textContent=h,f=a(),J(p.$$.fragment)},l(j){u(i.$$.fragment,j),T=n(j),M=d(j,"P",{"data-svelte-h":!0}),w(M)!=="svelte-178m4az"&&(M.textContent=h),f=n(j),u(p.$$.fragment,j)},m(j,g){m(i,j,g),s(j,T,g),s(j,M,g),s(j,f,g),m(p,j,g),I=!0},i(j){I||(r(i.$$.fragment,j),r(p.$$.fragment,j),I=!0)},o(j){y(i.$$.fragment,j),y(p.$$.fragment,j),I=!1},d(j){j&&(l(T),l(M),l(f)),U(i,j),U(p,j)}}}function PM(k){let i,T,M,h="Since the <code>Trainer</code> will give us predictions as NumPy arrays, we grab the start and end logits and convert them to that format:",f,p,I;return i=new b({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b01vZGVsRm9yUXVlc3Rpb25BbnN3ZXJpbmclMEElMEFldmFsX3NldF9mb3JfbW9kZWwlMjAlM0QlMjBldmFsX3NldC5yZW1vdmVfY29sdW1ucyglNUIlMjJleGFtcGxlX2lkJTIyJTJDJTIwJTIyb2Zmc2V0X21hcHBpbmclMjIlNUQpJTBBZXZhbF9zZXRfZm9yX21vZGVsLnNldF9mb3JtYXQoJTIydG9yY2glMjIpJTBBJTBBZGV2aWNlJTIwJTNEJTIwdG9yY2guZGV2aWNlKCUyMmN1ZGElMjIpJTIwaWYlMjB0b3JjaC5jdWRhLmlzX2F2YWlsYWJsZSgpJTIwZWxzZSUyMHRvcmNoLmRldmljZSglMjJjcHUlMjIpJTBBYmF0Y2glMjAlM0QlMjAlN0JrJTNBJTIwZXZhbF9zZXRfZm9yX21vZGVsJTVCayU1RC50byhkZXZpY2UpJTIwZm9yJTIwayUyMGluJTIwZXZhbF9zZXRfZm9yX21vZGVsLmNvbHVtbl9uYW1lcyU3RCUwQXRyYWluZWRfbW9kZWwlMjAlM0QlMjBBdXRvTW9kZWxGb3JRdWVzdGlvbkFuc3dlcmluZy5mcm9tX3ByZXRyYWluZWQodHJhaW5lZF9jaGVja3BvaW50KS50byglMEElMjAlMjAlMjAlMjBkZXZpY2UlMEEpJTBBJTBBd2l0aCUyMHRvcmNoLm5vX2dyYWQoKSUzQSUwQSUyMCUyMCUyMCUyMG91dHB1dHMlMjAlM0QlMjB0cmFpbmVkX21vZGVsKCoqYmF0Y2gp",highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoModelForQuestionAnswering

eval_set_for_model = eval_set.remove_columns([<span class="hljs-string">&quot;example_id&quot;</span>, <span class="hljs-string">&quot;offset_mapping&quot;</span>])
eval_set_for_model.set_format(<span class="hljs-string">&quot;torch&quot;</span>)

device = torch.device(<span class="hljs-string">&quot;cuda&quot;</span>) <span class="hljs-keyword">if</span> torch.cuda.is_available() <span class="hljs-keyword">else</span> torch.device(<span class="hljs-string">&quot;cpu&quot;</span>)
batch = {k: eval_set_for_model[k].to(device) <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> eval_set_for_model.column_names}
trained_model = AutoModelForQuestionAnswering.from_pretrained(trained_checkpoint).to(
    device
)

<span class="hljs-keyword">with</span> torch.no_grad():
    outputs = trained_model(**batch)`,wrap:!1}}),p=new b({props:{code:"c3RhcnRfbG9naXRzJTIwJTNEJTIwb3V0cHV0cy5zdGFydF9sb2dpdHMuY3B1KCkubnVtcHkoKSUwQWVuZF9sb2dpdHMlMjAlM0QlMjBvdXRwdXRzLmVuZF9sb2dpdHMuY3B1KCkubnVtcHkoKQ==",highlighted:`start_logits = outputs.start_logits.cpu().numpy()
end_logits = outputs.end_logits.cpu().numpy()`,wrap:!1}}),{c(){J(i.$$.fragment),T=a(),M=c("p"),M.innerHTML=h,f=a(),J(p.$$.fragment)},l(j){u(i.$$.fragment,j),T=n(j),M=d(j,"P",{"data-svelte-h":!0}),w(M)!=="svelte-1lo12mn"&&(M.innerHTML=h),f=n(j),u(p.$$.fragment,j)},m(j,g){m(i,j,g),s(j,T,g),s(j,M,g),s(j,f,g),m(p,j,g),I=!0},i(j){I||(r(i.$$.fragment,j),r(p.$$.fragment,j),I=!0)},o(j){y(i.$$.fragment,j),y(p.$$.fragment,j),I=!1},d(j){j&&(l(T),l(M),l(f)),U(i,j),U(p,j)}}}function OM(k){let i,T="Now let‚Äôs put everything we just did in a <code>compute_metrics()</code> function that we will use after training our model. We will need to pass a bit more than just the output logits, as we have to look in the dataset of features for the offset and in the dataset of examples for the original contexts:";return{c(){i=c("p"),i.innerHTML=T},l(M){i=d(M,"P",{"data-svelte-h":!0}),w(i)!=="svelte-bg7g1n"&&(i.innerHTML=T)},m(M,h){s(M,i,h)},d(M){M&&l(i)}}}function eo(k){let i,T="Now let‚Äôs put everything we just did in a <code>compute_metrics()</code> function that we will use in the <code>Trainer</code>. Normally, that <code>compute_metrics()</code> function only receives a tuple <code>eval_preds</code> with logits and labels. Here we will need a bit more, as we have to look in the dataset of features for the offset and in the dataset of examples for the original contexts, so we won‚Äôt be able to use this function to get regular evaluation results during training. We will only use it at the end of training to check the results.",M,h,f="The <code>compute_metrics()</code> function groups the same steps as before; we just add a small check in case we don‚Äôt come up with any valid answers (in which case we predict an empty string).";return{c(){i=c("p"),i.innerHTML=T,M=a(),h=c("p"),h.innerHTML=f},l(p){i=d(p,"P",{"data-svelte-h":!0}),w(i)!=="svelte-zb7cy8"&&(i.innerHTML=T),M=n(p),h=d(p,"P",{"data-svelte-h":!0}),w(h)!=="svelte-neutnz"&&(h.innerHTML=f)},m(p,I){s(p,i,I),s(p,M,I),s(p,h,I)},d(p){p&&(l(i),l(M),l(h))}}}function lo(k){let i,T="We are now ready to train our model. Let‚Äôs create it first, using the <code>TFAutoModelForQuestionAnswering</code> class like before:",M,h,f;return h=new b({props:{code:"bW9kZWwlMjAlM0QlMjBURkF1dG9Nb2RlbEZvclF1ZXN0aW9uQW5zd2VyaW5nLmZyb21fcHJldHJhaW5lZChtb2RlbF9jaGVja3BvaW50KQ==",highlighted:"model = TFAutoModelForQuestionAnswering.from_pretrained(model_checkpoint)",wrap:!1}}),{c(){i=c("p"),i.innerHTML=T,M=a(),J(h.$$.fragment)},l(p){i=d(p,"P",{"data-svelte-h":!0}),w(i)!=="svelte-ps4v2s"&&(i.innerHTML=T),M=n(p),u(h.$$.fragment,p)},m(p,I){s(p,i,I),s(p,M,I),m(h,p,I),f=!0},i(p){f||(r(h.$$.fragment,p),f=!0)},o(p){y(h.$$.fragment,p),f=!1},d(p){p&&(l(i),l(M)),U(h,p)}}}function to(k){let i,T="We are now ready to train our model. Let‚Äôs create it first, using the <code>AutoModelForQuestionAnswering</code> class like before:",M,h,f;return h=new b({props:{code:"bW9kZWwlMjAlM0QlMjBBdXRvTW9kZWxGb3JRdWVzdGlvbkFuc3dlcmluZy5mcm9tX3ByZXRyYWluZWQobW9kZWxfY2hlY2twb2ludCk=",highlighted:"model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)",wrap:!1}}),{c(){i=c("p"),i.innerHTML=T,M=a(),J(h.$$.fragment)},l(p){i=d(p,"P",{"data-svelte-h":!0}),w(i)!=="svelte-10p5xx2"&&(i.innerHTML=T),M=n(p),u(h.$$.fragment,p)},m(p,I){s(p,i,I),s(p,M,I),m(h,p,I),f=!0},i(p){f||(r(h.$$.fragment,p),f=!0)},o(p){y(h.$$.fragment,p),f=!1},d(p){p&&(l(i),l(M)),U(h,p)}}}function so(k){let i,T="Now that‚Äôs done, we can create our TF Datasets. We can use the simple default data collator this time:",M,h,f,p,I="And now we create the datasets as usual.",j,g,x,_,V="Next, we set up our training hyperparameters and compile our model:",X,Z,G,A,H="Finally, we‚Äôre ready to train with <code>model.fit()</code>. We use a <code>PushToHubCallback</code> to upload the model to the Hub after each epoch.",L;return h=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERlZmF1bHREYXRhQ29sbGF0b3IlMEElMEFkYXRhX2NvbGxhdG9yJTIwJTNEJTIwRGVmYXVsdERhdGFDb2xsYXRvcihyZXR1cm5fdGVuc29ycyUzRCUyMnRmJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DefaultDataCollator

data_collator = DefaultDataCollator(return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`,wrap:!1}}),g=new b({props:{code:"dGZfdHJhaW5fZGF0YXNldCUyMCUzRCUyMG1vZGVsLnByZXBhcmVfdGZfZGF0YXNldCglMEElMjAlMjAlMjAlMjB0cmFpbl9kYXRhc2V0JTJDJTBBJTIwJTIwJTIwJTIwY29sbGF0ZV9mbiUzRGRhdGFfY29sbGF0b3IlMkMlMEElMjAlMjAlMjAlMjBzaHVmZmxlJTNEVHJ1ZSUyQyUwQSUyMCUyMCUyMCUyMGJhdGNoX3NpemUlM0QxNiUyQyUwQSklMEF0Zl9ldmFsX2RhdGFzZXQlMjAlM0QlMjBtb2RlbC5wcmVwYXJlX3RmX2RhdGFzZXQoJTBBJTIwJTIwJTIwJTIwdmFsaWRhdGlvbl9kYXRhc2V0JTJDJTBBJTIwJTIwJTIwJTIwY29sbGF0ZV9mbiUzRGRhdGFfY29sbGF0b3IlMkMlMEElMjAlMjAlMjAlMjBzaHVmZmxlJTNERmFsc2UlMkMlMEElMjAlMjAlMjAlMjBiYXRjaF9zaXplJTNEMTYlMkMlMEEp",highlighted:`tf_train_dataset = model.prepare_tf_dataset(
    train_dataset,
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">True</span>,
    batch_size=<span class="hljs-number">16</span>,
)
tf_eval_dataset = model.prepare_tf_dataset(
    validation_dataset,
    collate_fn=data_collator,
    shuffle=<span class="hljs-literal">False</span>,
    batch_size=<span class="hljs-number">16</span>,
)`,wrap:!1}}),Z=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMGNyZWF0ZV9vcHRpbWl6ZXIlMEFmcm9tJTIwdHJhbnNmb3JtZXJzLmtlcmFzX2NhbGxiYWNrcyUyMGltcG9ydCUyMFB1c2hUb0h1YkNhbGxiYWNrJTBBaW1wb3J0JTIwdGVuc29yZmxvdyUyMGFzJTIwdGYlMEElMEElMjMlMjBUaGUlMjBudW1iZXIlMjBvZiUyMHRyYWluaW5nJTIwc3RlcHMlMjBpcyUyMHRoZSUyMG51bWJlciUyMG9mJTIwc2FtcGxlcyUyMGluJTIwdGhlJTIwZGF0YXNldCUyQyUyMGRpdmlkZWQlMjBieSUyMHRoZSUyMGJhdGNoJTIwc2l6ZSUyMHRoZW4lMjBtdWx0aXBsaWVkJTBBJTIzJTIwYnklMjB0aGUlMjB0b3RhbCUyMG51bWJlciUyMG9mJTIwZXBvY2hzLiUyME5vdGUlMjB0aGF0JTIwdGhlJTIwdGZfdHJhaW5fZGF0YXNldCUyMGhlcmUlMjBpcyUyMGElMjBiYXRjaGVkJTIwdGYuZGF0YS5EYXRhc2V0JTJDJTBBJTIzJTIwbm90JTIwdGhlJTIwb3JpZ2luYWwlMjBIdWdnaW5nJTIwRmFjZSUyMERhdGFzZXQlMkMlMjBzbyUyMGl0cyUyMGxlbigpJTIwaXMlMjBhbHJlYWR5JTIwbnVtX3NhbXBsZXMlMjAlMkYlMkYlMjBiYXRjaF9zaXplLiUwQW51bV90cmFpbl9lcG9jaHMlMjAlM0QlMjAzJTBBbnVtX3RyYWluX3N0ZXBzJTIwJTNEJTIwbGVuKHRmX3RyYWluX2RhdGFzZXQpJTIwKiUyMG51bV90cmFpbl9lcG9jaHMlMEFvcHRpbWl6ZXIlMkMlMjBzY2hlZHVsZSUyMCUzRCUyMGNyZWF0ZV9vcHRpbWl6ZXIoJTBBJTIwJTIwJTIwJTIwaW5pdF9sciUzRDJlLTUlMkMlMEElMjAlMjAlMjAlMjBudW1fd2FybXVwX3N0ZXBzJTNEMCUyQyUwQSUyMCUyMCUyMCUyMG51bV90cmFpbl9zdGVwcyUzRG51bV90cmFpbl9zdGVwcyUyQyUwQSUyMCUyMCUyMCUyMHdlaWdodF9kZWNheV9yYXRlJTNEMC4wMSUyQyUwQSklMEFtb2RlbC5jb21waWxlKG9wdGltaXplciUzRG9wdGltaXplciklMEElMEElMjMlMjBUcmFpbiUyMGluJTIwbWl4ZWQtcHJlY2lzaW9uJTIwZmxvYXQxNiUwQXRmLmtlcmFzLm1peGVkX3ByZWNpc2lvbi5zZXRfZ2xvYmFsX3BvbGljeSglMjJtaXhlZF9mbG9hdDE2JTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> create_optimizer
<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback
<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf

<span class="hljs-comment"># The number of training steps is the number of samples in the dataset, divided by the batch size then multiplied</span>
<span class="hljs-comment"># by the total number of epochs. Note that the tf_train_dataset here is a batched tf.data.Dataset,</span>
<span class="hljs-comment"># not the original Hugging Face Dataset, so its len() is already num_samples // batch_size.</span>
num_train_epochs = <span class="hljs-number">3</span>
num_train_steps = <span class="hljs-built_in">len</span>(tf_train_dataset) * num_train_epochs
optimizer, schedule = create_optimizer(
    init_lr=<span class="hljs-number">2e-5</span>,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_train_steps=num_train_steps,
    weight_decay_rate=<span class="hljs-number">0.01</span>,
)
model.<span class="hljs-built_in">compile</span>(optimizer=optimizer)

<span class="hljs-comment"># Train in mixed-precision float16</span>
tf.keras.mixed_precision.set_global_policy(<span class="hljs-string">&quot;mixed_float16&quot;</span>)`,wrap:!1}}),{c(){i=c("p"),i.textContent=T,M=a(),J(h.$$.fragment),f=a(),p=c("p"),p.textContent=I,j=a(),J(g.$$.fragment),x=a(),_=c("p"),_.textContent=V,X=a(),J(Z.$$.fragment),G=a(),A=c("p"),A.innerHTML=H},l(B){i=d(B,"P",{"data-svelte-h":!0}),w(i)!=="svelte-7ck7e8"&&(i.textContent=T),M=n(B),u(h.$$.fragment,B),f=n(B),p=d(B,"P",{"data-svelte-h":!0}),w(p)!=="svelte-1itb8ap"&&(p.textContent=I),j=n(B),u(g.$$.fragment,B),x=n(B),_=d(B,"P",{"data-svelte-h":!0}),w(_)!=="svelte-zibbtf"&&(_.textContent=V),X=n(B),u(Z.$$.fragment,B),G=n(B),A=d(B,"P",{"data-svelte-h":!0}),w(A)!=="svelte-10m358g"&&(A.innerHTML=H)},m(B,W){s(B,i,W),s(B,M,W),m(h,B,W),s(B,f,W),s(B,p,W),s(B,j,W),m(g,B,W),s(B,x,W),s(B,_,W),s(B,X,W),m(Z,B,W),s(B,G,W),s(B,A,W),L=!0},i(B){L||(r(h.$$.fragment,B),r(g.$$.fragment,B),r(Z.$$.fragment,B),L=!0)},o(B){y(h.$$.fragment,B),y(g.$$.fragment,B),y(Z.$$.fragment,B),L=!1},d(B){B&&(l(i),l(M),l(f),l(p),l(j),l(x),l(_),l(X),l(G),l(A)),U(h,B),U(g,B),U(Z,B)}}}function ao(k){let i,T='Once this is done, we can define our <code>TrainingArguments</code>. As we said when we defined our function to compute the metric, we won‚Äôt be able to have a regular evaluation loop because of the signature of the <code>compute_metrics()</code> function. We could write our own subclass of <code>Trainer</code> to do this (an approach you can find in the <a href="https://github.com/huggingface/transformers/blob/master/examples/pytorch/question-answering/trainer_qa.py" rel="nofollow">question answering example script</a>), but that‚Äôs a bit too long for this section. Instead, we will only evaluate the model at the end of training here and show you how to do a regular evaluation in ‚ÄúA custom training loop‚Äù below.',M,h,f="This is really where the <code>Trainer</code> API shows its limits and the ü§ó Accelerate library shines: customizing the class to a specific use case can be painful, but tweaking a fully exposed training loop is easy.",p,I,j="Let‚Äôs take a look at our <code>TrainingArguments</code>:",g,x,_,V,X="We‚Äôve seen most of these before: we set some hyperparameters (like the learning rate, the number of epochs we train for, and some weight decay) and indicate that we want to save the model at the end of every epoch, skip evaluation, and upload our results to the Model Hub. We also enable mixed-precision training with <code>fp16=True</code>, as it can speed up the training nicely on a recent GPU.",Z;return x=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluaW5nQXJndW1lbnRzJTBBJTBBYXJncyUyMCUzRCUyMFRyYWluaW5nQXJndW1lbnRzKCUwQSUyMCUyMCUyMCUyMCUyMmJlcnQtZmluZXR1bmVkLXNxdWFkJTIyJTJDJTBBJTIwJTIwJTIwJTIwZXZhbHVhdGlvbl9zdHJhdGVneSUzRCUyMm5vJTIyJTJDJTBBJTIwJTIwJTIwJTIwc2F2ZV9zdHJhdGVneSUzRCUyMmVwb2NoJTIyJTJDJTBBJTIwJTIwJTIwJTIwbGVhcm5pbmdfcmF0ZSUzRDJlLTUlMkMlMEElMjAlMjAlMjAlMjBudW1fdHJhaW5fZXBvY2hzJTNEMyUyQyUwQSUyMCUyMCUyMCUyMHdlaWdodF9kZWNheSUzRDAuMDElMkMlMEElMjAlMjAlMjAlMjBmcDE2JTNEVHJ1ZSUyQyUwQSUyMCUyMCUyMCUyMHB1c2hfdG9faHViJTNEVHJ1ZSUyQyUwQSk=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> TrainingArguments

args = TrainingArguments(
    <span class="hljs-string">&quot;bert-finetuned-squad&quot;</span>,
    evaluation_strategy=<span class="hljs-string">&quot;no&quot;</span>,
    save_strategy=<span class="hljs-string">&quot;epoch&quot;</span>,
    learning_rate=<span class="hljs-number">2e-5</span>,
    num_train_epochs=<span class="hljs-number">3</span>,
    weight_decay=<span class="hljs-number">0.01</span>,
    fp16=<span class="hljs-literal">True</span>,
    push_to_hub=<span class="hljs-literal">True</span>,
)`,wrap:!1}}),{c(){i=c("p"),i.innerHTML=T,M=a(),h=c("p"),h.innerHTML=f,p=a(),I=c("p"),I.innerHTML=j,g=a(),J(x.$$.fragment),_=a(),V=c("p"),V.innerHTML=X},l(G){i=d(G,"P",{"data-svelte-h":!0}),w(i)!=="svelte-mwaaj2"&&(i.innerHTML=T),M=n(G),h=d(G,"P",{"data-svelte-h":!0}),w(h)!=="svelte-e7i2j4"&&(h.innerHTML=f),p=n(G),I=d(G,"P",{"data-svelte-h":!0}),w(I)!=="svelte-4gcf2c"&&(I.innerHTML=j),g=n(G),u(x.$$.fragment,G),_=n(G),V=d(G,"P",{"data-svelte-h":!0}),w(V)!=="svelte-1tqo63r"&&(V.innerHTML=X)},m(G,A){s(G,i,A),s(G,M,A),s(G,h,A),s(G,p,A),s(G,I,A),s(G,g,A),m(x,G,A),s(G,_,A),s(G,V,A),Z=!0},i(G){Z||(r(x.$$.fragment,G),Z=!0)},o(G){y(x.$$.fragment,G),Z=!1},d(G){G&&(l(i),l(M),l(h),l(p),l(I),l(g),l(_),l(V)),U(x,G)}}}function no(k){let i,T;return i=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycy5rZXJhc19jYWxsYmFja3MlMjBpbXBvcnQlMjBQdXNoVG9IdWJDYWxsYmFjayUwQSUwQWNhbGxiYWNrJTIwJTNEJTIwUHVzaFRvSHViQ2FsbGJhY2sob3V0cHV0X2RpciUzRCUyMmJlcnQtZmluZXR1bmVkLXNxdWFkJTIyJTJDJTIwdG9rZW5pemVyJTNEdG9rZW5pemVyKSUwQSUwQSUyMyUyMFdlJ3JlJTIwZ29pbmclMjB0byUyMGRvJTIwdmFsaWRhdGlvbiUyMGFmdGVyd2FyZHMlMkMlMjBzbyUyMG5vJTIwdmFsaWRhdGlvbiUyMG1pZC10cmFpbmluZyUwQW1vZGVsLmZpdCh0Zl90cmFpbl9kYXRhc2V0JTJDJTIwY2FsbGJhY2tzJTNEJTVCY2FsbGJhY2slNUQlMkMlMjBlcG9jaHMlM0RudW1fdHJhaW5fZXBvY2hzKQ==",highlighted:`<span class="hljs-keyword">from</span> transformers.keras_callbacks <span class="hljs-keyword">import</span> PushToHubCallback

callback = PushToHubCallback(output_dir=<span class="hljs-string">&quot;bert-finetuned-squad&quot;</span>, tokenizer=tokenizer)

<span class="hljs-comment"># We&#x27;re going to do validation afterwards, so no validation mid-training</span>
model.fit(tf_train_dataset, callbacks=[callback], epochs=num_train_epochs)`,wrap:!1}}),{c(){J(i.$$.fragment)},l(M){u(i.$$.fragment,M)},m(M,h){m(i,M,h),T=!0},i(M){T||(r(i.$$.fragment,M),T=!0)},o(M){y(i.$$.fragment,M),T=!1},d(M){U(i,M)}}}function io(k){let i,T,M,h="Finally, we just pass everything to the <code>Trainer</code> class and launch the training:",f,p,I;return i=new En({props:{$$slots:{default:[Mo]},$$scope:{ctx:k}}}),p=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMFRyYWluZXIlMEElMEF0cmFpbmVyJTIwJTNEJTIwVHJhaW5lciglMEElMjAlMjAlMjAlMjBtb2RlbCUzRG1vZGVsJTJDJTBBJTIwJTIwJTIwJTIwYXJncyUzRGFyZ3MlMkMlMEElMjAlMjAlMjAlMjB0cmFpbl9kYXRhc2V0JTNEdHJhaW5fZGF0YXNldCUyQyUwQSUyMCUyMCUyMCUyMGV2YWxfZGF0YXNldCUzRHZhbGlkYXRpb25fZGF0YXNldCUyQyUwQSUyMCUyMCUyMCUyMHRva2VuaXplciUzRHRva2VuaXplciUyQyUwQSklMEF0cmFpbmVyLnRyYWluKCk=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> Trainer

trainer = Trainer(
    model=model,
    args=args,
    train_dataset=train_dataset,
    eval_dataset=validation_dataset,
    tokenizer=tokenizer,
)
trainer.train()`,wrap:!1}}),{c(){J(i.$$.fragment),T=a(),M=c("p"),M.innerHTML=h,f=a(),J(p.$$.fragment)},l(j){u(i.$$.fragment,j),T=n(j),M=d(j,"P",{"data-svelte-h":!0}),w(M)!=="svelte-1khq6u6"&&(M.innerHTML=h),f=n(j),u(p.$$.fragment,j)},m(j,g){m(i,j,g),s(j,T,g),s(j,M,g),s(j,f,g),m(p,j,g),I=!0},i(j){I||(r(i.$$.fragment,j),r(p.$$.fragment,j),I=!0)},o(j){y(i.$$.fragment,j),y(p.$$.fragment,j),I=!1},d(j){j&&(l(T),l(M),l(f)),U(i,j),U(p,j)}}}function Mo(k){let i,T="üí° If the output directory you are using exists, it needs to be a local clone of the repository you want to push to (so set a new name if you get an error when defining your <code>Trainer</code>).";return{c(){i=c("p"),i.innerHTML=T},l(M){i=d(M,"P",{"data-svelte-h":!0}),w(i)!=="svelte-ocrdyc"&&(i.innerHTML=T)},m(M,h){s(M,i,h)},p:zn,d(M){M&&l(i)}}}function oo(k){let i,T="Once the training is complete, we can finally evaluate our model (and pray we didn‚Äôt spend all that compute time on nothing). The <code>predict()</code> method of our <code>model</code> will take care of getting predictions, and since we did all the hard work of defining a <code>compute_metrics()</code> function earlier, we can get our results in a single line:",M,h,f;return h=new b({props:{code:"cHJlZGljdGlvbnMlMjAlM0QlMjBtb2RlbC5wcmVkaWN0KHRmX2V2YWxfZGF0YXNldCklMEFjb21wdXRlX21ldHJpY3MoJTBBJTIwJTIwJTIwJTIwcHJlZGljdGlvbnMlNUIlMjJzdGFydF9sb2dpdHMlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjBwcmVkaWN0aW9ucyU1QiUyMmVuZF9sb2dpdHMlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjB2YWxpZGF0aW9uX2RhdGFzZXQlMkMlMEElMjAlMjAlMjAlMjByYXdfZGF0YXNldHMlNUIlMjJ2YWxpZGF0aW9uJTIyJTVEJTJDJTBBKQ==",highlighted:`predictions = model.predict(tf_eval_dataset)
compute_metrics(
    predictions[<span class="hljs-string">&quot;start_logits&quot;</span>],
    predictions[<span class="hljs-string">&quot;end_logits&quot;</span>],
    validation_dataset,
    raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>],
)`,wrap:!1}}),{c(){i=c("p"),i.innerHTML=T,M=a(),J(h.$$.fragment)},l(p){i=d(p,"P",{"data-svelte-h":!0}),w(i)!=="svelte-1f0u5cw"&&(i.innerHTML=T),M=n(p),u(h.$$.fragment,p)},m(p,I){s(p,i,I),s(p,M,I),m(h,p,I),f=!0},i(p){f||(r(h.$$.fragment,p),f=!0)},o(p){y(h.$$.fragment,p),f=!1},d(p){p&&(l(i),l(M)),U(h,p)}}}function po(k){let i,T="Once the training is complete, we can finally evaluate our model (and pray we didn‚Äôt spend all that compute time on nothing). The <code>predict()</code> method of the <code>Trainer</code> will return a tuple where the first elements will be the predictions of the model (here a pair with the start and end logits). We send this to our <code>compute_metrics()</code> function:",M,h,f;return h=new b({props:{code:"cHJlZGljdGlvbnMlMkMlMjBfJTJDJTIwXyUyMCUzRCUyMHRyYWluZXIucHJlZGljdCh2YWxpZGF0aW9uX2RhdGFzZXQpJTBBc3RhcnRfbG9naXRzJTJDJTIwZW5kX2xvZ2l0cyUyMCUzRCUyMHByZWRpY3Rpb25zJTBBY29tcHV0ZV9tZXRyaWNzKHN0YXJ0X2xvZ2l0cyUyQyUyMGVuZF9sb2dpdHMlMkMlMjB2YWxpZGF0aW9uX2RhdGFzZXQlMkMlMjByYXdfZGF0YXNldHMlNUIlMjJ2YWxpZGF0aW9uJTIyJTVEKQ==",highlighted:`predictions, _, _ = trainer.predict(validation_dataset)
start_logits, end_logits = predictions
compute_metrics(start_logits, end_logits, validation_dataset, raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>])`,wrap:!1}}),{c(){i=c("p"),i.innerHTML=T,M=a(),J(h.$$.fragment)},l(p){i=d(p,"P",{"data-svelte-h":!0}),w(i)!=="svelte-x87std"&&(i.innerHTML=T),M=n(p),u(h.$$.fragment,p)},m(p,I){s(p,i,I),s(p,M,I),m(h,p,I),f=!0},i(p){f||(r(h.$$.fragment,p),f=!0)},o(p){y(h.$$.fragment,p),f=!1},d(p){p&&(l(i),l(M)),U(h,p)}}}function kM(k){let i,T="Finally, we use the <code>push_to_hub()</code> method to make sure we upload the latest version of the model:",M,h,f,p,I="This returns the URL of the commit it just did, if you want to inspect it:",j,g,x,_,V="The <code>Trainer</code> also drafts a model card with all the evaluation results and uploads it.",X;return h=new b({props:{code:"dHJhaW5lci5wdXNoX3RvX2h1Yihjb21taXRfbWVzc2FnZSUzRCUyMlRyYWluaW5nJTIwY29tcGxldGUlMjIp",highlighted:'trainer.push_to_hub(commit_message=<span class="hljs-string">&quot;Training complete&quot;</span>)',wrap:!1}}),g=new b({props:{code:"J2h0dHBzJTNBJTJGJTJGaHVnZ2luZ2ZhY2UuY28lMkZzZ3VnZ2VyJTJGYmVydC1maW5ldHVuZWQtc3F1YWQlMkZjb21taXQlMkY5ZGNlZTFmYmMyNTk0NmE2ZWQ0YmIzMmVmYjFiZDcxZDVmYTkwYjY4Jw==",highlighted:'<span class="hljs-string">&#x27;https://huggingface.co/sgugger/bert-finetuned-squad/commit/9dcee1fbc25946a6ed4bb32efb1bd71d5fa90b68&#x27;</span>',wrap:!1}}),{c(){i=c("p"),i.innerHTML=T,M=a(),J(h.$$.fragment),f=a(),p=c("p"),p.textContent=I,j=a(),J(g.$$.fragment),x=a(),_=c("p"),_.innerHTML=V},l(Z){i=d(Z,"P",{"data-svelte-h":!0}),w(i)!=="svelte-1gzri3s"&&(i.innerHTML=T),M=n(Z),u(h.$$.fragment,Z),f=n(Z),p=d(Z,"P",{"data-svelte-h":!0}),w(p)!=="svelte-c2usbc"&&(p.textContent=I),j=n(Z),u(g.$$.fragment,Z),x=n(Z),_=d(Z,"P",{"data-svelte-h":!0}),w(_)!=="svelte-m4z0gi"&&(_.innerHTML=V)},m(Z,G){s(Z,i,G),s(Z,M,G),m(h,Z,G),s(Z,f,G),s(Z,p,G),s(Z,j,G),m(g,Z,G),s(Z,x,G),s(Z,_,G),X=!0},i(Z){X||(r(h.$$.fragment,Z),r(g.$$.fragment,Z),X=!0)},o(Z){y(h.$$.fragment,Z),y(g.$$.fragment,Z),X=!1},d(Z){Z&&(l(i),l(M),l(f),l(p),l(j),l(x),l(_)),U(h,Z),U(g,Z)}}}function ro(k){let i,T="‚úèÔ∏è <strong>Your turn!</strong> Try another model architecture to see if it performs better on this task!";return{c(){i=c("p"),i.innerHTML=T},l(M){i=d(M,"P",{"data-svelte-h":!0}),w(i)!=="svelte-wm554t"&&(i.innerHTML=T)},m(M,h){s(M,i,h)},p:zn,d(M){M&&l(i)}}}function _M(k){let i,T="If you want to dive a bit more deeply into the training loop, we will now show you how to do the same thing using ü§ó  Accelerate.",M,h,f,p,I='Let‚Äôs now have a look at the full training loop, so you can easily customize the parts you need. It will look a lot like the training loop in <a href="/course/chapter3/4">Chapter 3</a>, with the exception of the evaluation loop. We will be able to evaluate the model regularly since we‚Äôre not constrained by the <code>Trainer</code> class anymore.',j,g,x,_,V="First we need to build the <code>DataLoader</code>s from our datasets. We set the format of those datasets to <code>&quot;torch&quot;</code>, and remove the columns in the validation set that are not used by the model. Then, we can use the <code>default_data_collator</code> provided by Transformers as a <code>collate_fn</code> and shuffle the training set, but not the validation set:",X,Z,G,A,H="Next we reinstantiate our model, to make sure we‚Äôre not continuing the fine-tuning from before but starting from the BERT pretrained model again:",L,B,W,_e,ll="Then we will need an optimizer. As usual we use the classic <code>AdamW</code>, which is like Adam, but with a fix in the way weight decay is applied:",D,xe,Ye,$,tl="Once we have all those objects, we can send them to the <code>accelerator.prepare()</code> method. Remember that if you want to train on TPUs in a Colab notebook, you will need to move all of this code into a training function, and that shouldn‚Äôt execute any cell that instantiates an <code>Accelerator</code>. We can force mixed-precision training by passing <code>fp16=True</code> to the <code>Accelerator</code> (or, if you are executing the code as a script, just make sure to fill in the ü§ó Accelerate <code>config</code> appropriately).",K,P,O,We,sl="As you should know from the previous sections, we can only use the <code>train_dataloader</code> length to compute the number of training steps after it has gone through the <code>accelerator.prepare()</code> method. We use the same linear schedule as in the previous sections:",ee,le,te,Ae,al="To push our model to the Hub, we will need to create a <code>Repository</code> object in a working folder. First log in to the Hugging Face Hub, if you‚Äôre not logged in already. We‚Äôll determine the repository name from the model ID we want to give our model (feel free to replace the <code>repo_name</code> with your own choice; it just needs to contain your username, which is what the function <code>get_full_repo_name()</code> does):",se,ae,ne,Ve,ze,N,nl="Then we can clone that repository in a local folder. If it already exists, this local folder should be a clone of the repository we are working with:",ie,Me,oe,Xe,il="We can now upload anything we save in <code>output_dir</code> by calling the <code>repo.push_to_hub()</code> method. This will help us upload the intermediate models at the end of each epoch.",pe,re,ye,ce,Re="We are now ready to write the full training loop. After defining a progress bar to follow how training goes, the loop has three parts:",Ml,de,ve="<li>The training in itself, which is the classic iteration over the <code>train_dataloader</code>, forward pass through the model, then backward pass and optimizer step.</li> <li>The evaluation, in which we gather all the values for <code>start_logits</code> and <code>end_logits</code> before converting them to NumPy arrays. Once the evaluation loop is finished, we concatenate all the results. Note that we need to truncate because the <code>Accelerator</code> may have added a few samples at the end to ensure we have the same number of examples in each process.</li> <li>Saving and uploading, where we first save the model and the tokenizer, then call <code>repo.push_to_hub()</code>. As we did before, we use the argument <code>blocking=False</code> to tell the ü§ó Hub library to push in an asynchronous process. This way, training continues normally and this (long) instruction is executed in the background.</li>",ol,we,$e="Here‚Äôs the complete code for the training loop:",He,Q,Se,F,ks="In case this is the first time you‚Äôre seeing a model saved with ü§ó Accelerate, let‚Äôs take a moment to inspect the three lines of code that go with it:",qe,E,Le,Y,pl="The first line is self-explanatory: it tells all the processes to wait until everyone is at that stage before continuing. This is to make sure we have the same model in every process before saving. Then we grab the <code>unwrapped_model</code>, which is the base model we defined. The <code>accelerator.prepare()</code> method changes the model to work in distributed training, so it won‚Äôt have the <code>save_pretrained()</code> method anymore; the <code>accelerator.unwrap_model()</code> method undoes that step. Lastly, we call <code>save_pretrained()</code> but tell that method to use <code>accelerator.save()</code> instead of <code>torch.save()</code>.",he,Ne,rl='Once this is done, you should have a model that produces results pretty similar to the one trained with the <code>Trainer</code>. You can check the model we trained using this code at <a href="https://huggingface.co/huggingface-course/bert-finetuned-squad-accelerate" rel="nofollow"><em>huggingface-course/bert-finetuned-squad-accelerate</em></a>. And if you want to test out any tweaks to the training loop, you can directly implement them by editing the code shown above!',Je;return h=new q({props:{title:"A custom training loop",local:"a-custom-training-loop",headingTag:"h2"}}),g=new q({props:{title:"Preparing everything for training",local:"preparing-everything-for-training",headingTag:"h3"}}),Z=new b({props:{code:"ZnJvbSUyMHRvcmNoLnV0aWxzLmRhdGElMjBpbXBvcnQlMjBEYXRhTG9hZGVyJTBBZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMGRlZmF1bHRfZGF0YV9jb2xsYXRvciUwQSUwQXRyYWluX2RhdGFzZXQuc2V0X2Zvcm1hdCglMjJ0b3JjaCUyMiklMEF2YWxpZGF0aW9uX3NldCUyMCUzRCUyMHZhbGlkYXRpb25fZGF0YXNldC5yZW1vdmVfY29sdW1ucyglNUIlMjJleGFtcGxlX2lkJTIyJTJDJTIwJTIyb2Zmc2V0X21hcHBpbmclMjIlNUQpJTBBdmFsaWRhdGlvbl9zZXQuc2V0X2Zvcm1hdCglMjJ0b3JjaCUyMiklMEElMEF0cmFpbl9kYXRhbG9hZGVyJTIwJTNEJTIwRGF0YUxvYWRlciglMEElMjAlMjAlMjAlMjB0cmFpbl9kYXRhc2V0JTJDJTBBJTIwJTIwJTIwJTIwc2h1ZmZsZSUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjBjb2xsYXRlX2ZuJTNEZGVmYXVsdF9kYXRhX2NvbGxhdG9yJTJDJTBBJTIwJTIwJTIwJTIwYmF0Y2hfc2l6ZSUzRDglMkMlMEEpJTBBZXZhbF9kYXRhbG9hZGVyJTIwJTNEJTIwRGF0YUxvYWRlciglMEElMjAlMjAlMjAlMjB2YWxpZGF0aW9uX3NldCUyQyUyMGNvbGxhdGVfZm4lM0RkZWZhdWx0X2RhdGFfY29sbGF0b3IlMkMlMjBiYXRjaF9zaXplJTNEOCUwQSk=",highlighted:`<span class="hljs-keyword">from</span> torch.utils.data <span class="hljs-keyword">import</span> DataLoader
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> default_data_collator

train_dataset.set_format(<span class="hljs-string">&quot;torch&quot;</span>)
validation_set = validation_dataset.remove_columns([<span class="hljs-string">&quot;example_id&quot;</span>, <span class="hljs-string">&quot;offset_mapping&quot;</span>])
validation_set.set_format(<span class="hljs-string">&quot;torch&quot;</span>)

train_dataloader = DataLoader(
    train_dataset,
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=default_data_collator,
    batch_size=<span class="hljs-number">8</span>,
)
eval_dataloader = DataLoader(
    validation_set, collate_fn=default_data_collator, batch_size=<span class="hljs-number">8</span>
)`,wrap:!1}}),B=new b({props:{code:"bW9kZWwlMjAlM0QlMjBBdXRvTW9kZWxGb3JRdWVzdGlvbkFuc3dlcmluZy5mcm9tX3ByZXRyYWluZWQobW9kZWxfY2hlY2twb2ludCk=",highlighted:"model = AutoModelForQuestionAnswering.from_pretrained(model_checkpoint)",wrap:!1}}),xe=new b({props:{code:"ZnJvbSUyMHRvcmNoLm9wdGltJTIwaW1wb3J0JTIwQWRhbVclMEElMEFvcHRpbWl6ZXIlMjAlM0QlMjBBZGFtVyhtb2RlbC5wYXJhbWV0ZXJzKCklMkMlMjBsciUzRDJlLTUp",highlighted:`<span class="hljs-keyword">from</span> torch.optim <span class="hljs-keyword">import</span> AdamW

optimizer = AdamW(model.parameters(), lr=<span class="hljs-number">2e-5</span>)`,wrap:!1}}),P=new b({props:{code:"ZnJvbSUyMGFjY2VsZXJhdGUlMjBpbXBvcnQlMjBBY2NlbGVyYXRvciUwQSUwQWFjY2VsZXJhdG9yJTIwJTNEJTIwQWNjZWxlcmF0b3IoZnAxNiUzRFRydWUpJTBBbW9kZWwlMkMlMjBvcHRpbWl6ZXIlMkMlMjB0cmFpbl9kYXRhbG9hZGVyJTJDJTIwZXZhbF9kYXRhbG9hZGVyJTIwJTNEJTIwYWNjZWxlcmF0b3IucHJlcGFyZSglMEElMjAlMjAlMjAlMjBtb2RlbCUyQyUyMG9wdGltaXplciUyQyUyMHRyYWluX2RhdGFsb2FkZXIlMkMlMjBldmFsX2RhdGFsb2FkZXIlMEEp",highlighted:`<span class="hljs-keyword">from</span> accelerate <span class="hljs-keyword">import</span> Accelerator

accelerator = Accelerator(fp16=<span class="hljs-literal">True</span>)
model, optimizer, train_dataloader, eval_dataloader = accelerator.prepare(
    model, optimizer, train_dataloader, eval_dataloader
)`,wrap:!1}}),le=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMGdldF9zY2hlZHVsZXIlMEElMEFudW1fdHJhaW5fZXBvY2hzJTIwJTNEJTIwMyUwQW51bV91cGRhdGVfc3RlcHNfcGVyX2Vwb2NoJTIwJTNEJTIwbGVuKHRyYWluX2RhdGFsb2FkZXIpJTBBbnVtX3RyYWluaW5nX3N0ZXBzJTIwJTNEJTIwbnVtX3RyYWluX2Vwb2NocyUyMColMjBudW1fdXBkYXRlX3N0ZXBzX3Blcl9lcG9jaCUwQSUwQWxyX3NjaGVkdWxlciUyMCUzRCUyMGdldF9zY2hlZHVsZXIoJTBBJTIwJTIwJTIwJTIwJTIybGluZWFyJTIyJTJDJTBBJTIwJTIwJTIwJTIwb3B0aW1pemVyJTNEb3B0aW1pemVyJTJDJTBBJTIwJTIwJTIwJTIwbnVtX3dhcm11cF9zdGVwcyUzRDAlMkMlMEElMjAlMjAlMjAlMjBudW1fdHJhaW5pbmdfc3RlcHMlM0RudW1fdHJhaW5pbmdfc3RlcHMlMkMlMEEp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> get_scheduler

num_train_epochs = <span class="hljs-number">3</span>
num_update_steps_per_epoch = <span class="hljs-built_in">len</span>(train_dataloader)
num_training_steps = num_train_epochs * num_update_steps_per_epoch

lr_scheduler = get_scheduler(
    <span class="hljs-string">&quot;linear&quot;</span>,
    optimizer=optimizer,
    num_warmup_steps=<span class="hljs-number">0</span>,
    num_training_steps=num_training_steps,
)`,wrap:!1}}),ae=new b({props:{code:"ZnJvbSUyMGh1Z2dpbmdmYWNlX2h1YiUyMGltcG9ydCUyMFJlcG9zaXRvcnklMkMlMjBnZXRfZnVsbF9yZXBvX25hbWUlMEElMEFtb2RlbF9uYW1lJTIwJTNEJTIwJTIyYmVydC1maW5ldHVuZWQtc3F1YWQtYWNjZWxlcmF0ZSUyMiUwQXJlcG9fbmFtZSUyMCUzRCUyMGdldF9mdWxsX3JlcG9fbmFtZShtb2RlbF9uYW1lKSUwQXJlcG9fbmFtZQ==",highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> Repository, get_full_repo_name

model_name = <span class="hljs-string">&quot;bert-finetuned-squad-accelerate&quot;</span>
repo_name = get_full_repo_name(model_name)
repo_name`,wrap:!1}}),Ve=new b({props:{code:"J3NndWdnZXIlMkZiZXJ0LWZpbmV0dW5lZC1zcXVhZC1hY2NlbGVyYXRlJw==",highlighted:'<span class="hljs-string">&#x27;sgugger/bert-finetuned-squad-accelerate&#x27;</span>',wrap:!1}}),Me=new b({props:{code:"b3V0cHV0X2RpciUyMCUzRCUyMCUyMmJlcnQtZmluZXR1bmVkLXNxdWFkLWFjY2VsZXJhdGUlMjIlMEFyZXBvJTIwJTNEJTIwUmVwb3NpdG9yeShvdXRwdXRfZGlyJTJDJTIwY2xvbmVfZnJvbSUzRHJlcG9fbmFtZSk=",highlighted:`output_dir = <span class="hljs-string">&quot;bert-finetuned-squad-accelerate&quot;</span>
repo = Repository(output_dir, clone_from=repo_name)`,wrap:!1}}),re=new q({props:{title:"Training loop",local:"training-loop",headingTag:"h2"}}),Q=new b({props:{code:"ZnJvbSUyMHRxZG0uYXV0byUyMGltcG9ydCUyMHRxZG0lMEFpbXBvcnQlMjB0b3JjaCUwQSUwQXByb2dyZXNzX2JhciUyMCUzRCUyMHRxZG0ocmFuZ2UobnVtX3RyYWluaW5nX3N0ZXBzKSklMEElMEFmb3IlMjBlcG9jaCUyMGluJTIwcmFuZ2UobnVtX3RyYWluX2Vwb2NocyklM0ElMEElMjAlMjAlMjAlMjAlMjMlMjBUcmFpbmluZyUwQSUyMCUyMCUyMCUyMG1vZGVsLnRyYWluKCklMEElMjAlMjAlMjAlMjBmb3IlMjBzdGVwJTJDJTIwYmF0Y2glMjBpbiUyMGVudW1lcmF0ZSh0cmFpbl9kYXRhbG9hZGVyKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG91dHB1dHMlMjAlM0QlMjBtb2RlbCgqKmJhdGNoKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGxvc3MlMjAlM0QlMjBvdXRwdXRzLmxvc3MlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBhY2NlbGVyYXRvci5iYWNrd2FyZChsb3NzKSUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG9wdGltaXplci5zdGVwKCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBscl9zY2hlZHVsZXIuc3RlcCgpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwb3B0aW1pemVyLnplcm9fZ3JhZCgpJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcHJvZ3Jlc3NfYmFyLnVwZGF0ZSgxKSUwQSUwQSUyMCUyMCUyMCUyMCUyMyUyMEV2YWx1YXRpb24lMEElMjAlMjAlMjAlMjBtb2RlbC5ldmFsKCklMEElMjAlMjAlMjAlMjBzdGFydF9sb2dpdHMlMjAlM0QlMjAlNUIlNUQlMEElMjAlMjAlMjAlMjBlbmRfbG9naXRzJTIwJTNEJTIwJTVCJTVEJTBBJTIwJTIwJTIwJTIwYWNjZWxlcmF0b3IucHJpbnQoJTIyRXZhbHVhdGlvbiElMjIpJTBBJTIwJTIwJTIwJTIwZm9yJTIwYmF0Y2glMjBpbiUyMHRxZG0oZXZhbF9kYXRhbG9hZGVyKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHdpdGglMjB0b3JjaC5ub19ncmFkKCklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBvdXRwdXRzJTIwJTNEJTIwbW9kZWwoKipiYXRjaCklMEElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdGFydF9sb2dpdHMuYXBwZW5kKGFjY2VsZXJhdG9yLmdhdGhlcihvdXRwdXRzLnN0YXJ0X2xvZ2l0cykuY3B1KCkubnVtcHkoKSklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfbG9naXRzLmFwcGVuZChhY2NlbGVyYXRvci5nYXRoZXIob3V0cHV0cy5lbmRfbG9naXRzKS5jcHUoKS5udW1weSgpKSUwQSUwQSUyMCUyMCUyMCUyMHN0YXJ0X2xvZ2l0cyUyMCUzRCUyMG5wLmNvbmNhdGVuYXRlKHN0YXJ0X2xvZ2l0cyklMEElMjAlMjAlMjAlMjBlbmRfbG9naXRzJTIwJTNEJTIwbnAuY29uY2F0ZW5hdGUoZW5kX2xvZ2l0cyklMEElMjAlMjAlMjAlMjBzdGFydF9sb2dpdHMlMjAlM0QlMjBzdGFydF9sb2dpdHMlNUIlM0ElMjBsZW4odmFsaWRhdGlvbl9kYXRhc2V0KSU1RCUwQSUyMCUyMCUyMCUyMGVuZF9sb2dpdHMlMjAlM0QlMjBlbmRfbG9naXRzJTVCJTNBJTIwbGVuKHZhbGlkYXRpb25fZGF0YXNldCklNUQlMEElMEElMjAlMjAlMjAlMjBtZXRyaWNzJTIwJTNEJTIwY29tcHV0ZV9tZXRyaWNzKCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHN0YXJ0X2xvZ2l0cyUyQyUyMGVuZF9sb2dpdHMlMkMlMjB2YWxpZGF0aW9uX2RhdGFzZXQlMkMlMjByYXdfZGF0YXNldHMlNUIlMjJ2YWxpZGF0aW9uJTIyJTVEJTBBJTIwJTIwJTIwJTIwKSUwQSUyMCUyMCUyMCUyMHByaW50KGYlMjJlcG9jaCUyMCU3QmVwb2NoJTdEJTNBJTIyJTJDJTIwbWV0cmljcyklMEElMEElMjAlMjAlMjAlMjAlMjMlMjBTYXZlJTIwYW5kJTIwdXBsb2FkJTBBJTIwJTIwJTIwJTIwYWNjZWxlcmF0b3Iud2FpdF9mb3JfZXZlcnlvbmUoKSUwQSUyMCUyMCUyMCUyMHVud3JhcHBlZF9tb2RlbCUyMCUzRCUyMGFjY2VsZXJhdG9yLnVud3JhcF9tb2RlbChtb2RlbCklMEElMjAlMjAlMjAlMjB1bndyYXBwZWRfbW9kZWwuc2F2ZV9wcmV0cmFpbmVkKG91dHB1dF9kaXIlMkMlMjBzYXZlX2Z1bmN0aW9uJTNEYWNjZWxlcmF0b3Iuc2F2ZSklMEElMjAlMjAlMjAlMjBpZiUyMGFjY2VsZXJhdG9yLmlzX21haW5fcHJvY2VzcyUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHRva2VuaXplci5zYXZlX3ByZXRyYWluZWQob3V0cHV0X2RpciklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXBvLnB1c2hfdG9faHViKCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGNvbW1pdF9tZXNzYWdlJTNEZiUyMlRyYWluaW5nJTIwaW4lMjBwcm9ncmVzcyUyMGVwb2NoJTIwJTdCZXBvY2glN0QlMjIlMkMlMjBibG9ja2luZyUzREZhbHNlJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwKQ==",highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm
<span class="hljs-keyword">import</span> torch

progress_bar = tqdm(<span class="hljs-built_in">range</span>(num_training_steps))

<span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(num_train_epochs):
    <span class="hljs-comment"># Training</span>
    model.train()
    <span class="hljs-keyword">for</span> step, batch <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_dataloader):
        outputs = model(**batch)
        loss = outputs.loss
        accelerator.backward(loss)

        optimizer.step()
        lr_scheduler.step()
        optimizer.zero_grad()
        progress_bar.update(<span class="hljs-number">1</span>)

    <span class="hljs-comment"># Evaluation</span>
    model.<span class="hljs-built_in">eval</span>()
    start_logits = []
    end_logits = []
    accelerator.<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Evaluation!&quot;</span>)
    <span class="hljs-keyword">for</span> batch <span class="hljs-keyword">in</span> tqdm(eval_dataloader):
        <span class="hljs-keyword">with</span> torch.no_grad():
            outputs = model(**batch)

        start_logits.append(accelerator.gather(outputs.start_logits).cpu().numpy())
        end_logits.append(accelerator.gather(outputs.end_logits).cpu().numpy())

    start_logits = np.concatenate(start_logits)
    end_logits = np.concatenate(end_logits)
    start_logits = start_logits[: <span class="hljs-built_in">len</span>(validation_dataset)]
    end_logits = end_logits[: <span class="hljs-built_in">len</span>(validation_dataset)]

    metrics = compute_metrics(
        start_logits, end_logits, validation_dataset, raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>]
    )
    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;epoch <span class="hljs-subst">{epoch}</span>:&quot;</span>, metrics)

    <span class="hljs-comment"># Save and upload</span>
    accelerator.wait_for_everyone()
    unwrapped_model = accelerator.unwrap_model(model)
    unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)
    <span class="hljs-keyword">if</span> accelerator.is_main_process:
        tokenizer.save_pretrained(output_dir)
        repo.push_to_hub(
            commit_message=<span class="hljs-string">f&quot;Training in progress epoch <span class="hljs-subst">{epoch}</span>&quot;</span>, blocking=<span class="hljs-literal">False</span>
        )`,wrap:!1}}),E=new b({props:{code:"YWNjZWxlcmF0b3Iud2FpdF9mb3JfZXZlcnlvbmUoKSUwQXVud3JhcHBlZF9tb2RlbCUyMCUzRCUyMGFjY2VsZXJhdG9yLnVud3JhcF9tb2RlbChtb2RlbCklMEF1bndyYXBwZWRfbW9kZWwuc2F2ZV9wcmV0cmFpbmVkKG91dHB1dF9kaXIlMkMlMjBzYXZlX2Z1bmN0aW9uJTNEYWNjZWxlcmF0b3Iuc2F2ZSk=",highlighted:`accelerator.wait_for_everyone()
unwrapped_model = accelerator.unwrap_model(model)
unwrapped_model.save_pretrained(output_dir, save_function=accelerator.save)`,wrap:!1}}),{c(){i=c("p"),i.textContent=T,M=a(),J(h.$$.fragment),f=a(),p=c("p"),p.innerHTML=I,j=a(),J(g.$$.fragment),x=a(),_=c("p"),_.innerHTML=V,X=a(),J(Z.$$.fragment),G=a(),A=c("p"),A.textContent=H,L=a(),J(B.$$.fragment),W=a(),_e=c("p"),_e.innerHTML=ll,D=a(),J(xe.$$.fragment),Ye=a(),$=c("p"),$.innerHTML=tl,K=a(),J(P.$$.fragment),O=a(),We=c("p"),We.innerHTML=sl,ee=a(),J(le.$$.fragment),te=a(),Ae=c("p"),Ae.innerHTML=al,se=a(),J(ae.$$.fragment),ne=a(),J(Ve.$$.fragment),ze=a(),N=c("p"),N.textContent=nl,ie=a(),J(Me.$$.fragment),oe=a(),Xe=c("p"),Xe.innerHTML=il,pe=a(),J(re.$$.fragment),ye=a(),ce=c("p"),ce.textContent=Re,Ml=a(),de=c("ul"),de.innerHTML=ve,ol=a(),we=c("p"),we.textContent=$e,He=a(),J(Q.$$.fragment),Se=a(),F=c("p"),F.textContent=ks,qe=a(),J(E.$$.fragment),Le=a(),Y=c("p"),Y.innerHTML=pl,he=a(),Ne=c("p"),Ne.innerHTML=rl},l(o){i=d(o,"P",{"data-svelte-h":!0}),w(i)!=="svelte-1d13qvr"&&(i.textContent=T),M=n(o),u(h.$$.fragment,o),f=n(o),p=d(o,"P",{"data-svelte-h":!0}),w(p)!=="svelte-qp9mb5"&&(p.innerHTML=I),j=n(o),u(g.$$.fragment,o),x=n(o),_=d(o,"P",{"data-svelte-h":!0}),w(_)!=="svelte-1ybe7da"&&(_.innerHTML=V),X=n(o),u(Z.$$.fragment,o),G=n(o),A=d(o,"P",{"data-svelte-h":!0}),w(A)!=="svelte-fdz4rk"&&(A.textContent=H),L=n(o),u(B.$$.fragment,o),W=n(o),_e=d(o,"P",{"data-svelte-h":!0}),w(_e)!=="svelte-1knlk02"&&(_e.innerHTML=ll),D=n(o),u(xe.$$.fragment,o),Ye=n(o),$=d(o,"P",{"data-svelte-h":!0}),w($)!=="svelte-1z0bkjl"&&($.innerHTML=tl),K=n(o),u(P.$$.fragment,o),O=n(o),We=d(o,"P",{"data-svelte-h":!0}),w(We)!=="svelte-28uouy"&&(We.innerHTML=sl),ee=n(o),u(le.$$.fragment,o),te=n(o),Ae=d(o,"P",{"data-svelte-h":!0}),w(Ae)!=="svelte-117ky3j"&&(Ae.innerHTML=al),se=n(o),u(ae.$$.fragment,o),ne=n(o),u(Ve.$$.fragment,o),ze=n(o),N=d(o,"P",{"data-svelte-h":!0}),w(N)!=="svelte-e9w2am"&&(N.textContent=nl),ie=n(o),u(Me.$$.fragment,o),oe=n(o),Xe=d(o,"P",{"data-svelte-h":!0}),w(Xe)!=="svelte-1mcbsiy"&&(Xe.innerHTML=il),pe=n(o),u(re.$$.fragment,o),ye=n(o),ce=d(o,"P",{"data-svelte-h":!0}),w(ce)!=="svelte-xmeq7h"&&(ce.textContent=Re),Ml=n(o),de=d(o,"UL",{"data-svelte-h":!0}),w(de)!=="svelte-hjn6v3"&&(de.innerHTML=ve),ol=n(o),we=d(o,"P",{"data-svelte-h":!0}),w(we)!=="svelte-1yi720t"&&(we.textContent=$e),He=n(o),u(Q.$$.fragment,o),Se=n(o),F=d(o,"P",{"data-svelte-h":!0}),w(F)!=="svelte-10bu99i"&&(F.textContent=ks),qe=n(o),u(E.$$.fragment,o),Le=n(o),Y=d(o,"P",{"data-svelte-h":!0}),w(Y)!=="svelte-est4dk"&&(Y.innerHTML=pl),he=n(o),Ne=d(o,"P",{"data-svelte-h":!0}),w(Ne)!=="svelte-xmmh4v"&&(Ne.innerHTML=rl)},m(o,C){s(o,i,C),s(o,M,C),m(h,o,C),s(o,f,C),s(o,p,C),s(o,j,C),m(g,o,C),s(o,x,C),s(o,_,C),s(o,X,C),m(Z,o,C),s(o,G,C),s(o,A,C),s(o,L,C),m(B,o,C),s(o,W,C),s(o,_e,C),s(o,D,C),m(xe,o,C),s(o,Ye,C),s(o,$,C),s(o,K,C),m(P,o,C),s(o,O,C),s(o,We,C),s(o,ee,C),m(le,o,C),s(o,te,C),s(o,Ae,C),s(o,se,C),m(ae,o,C),s(o,ne,C),m(Ve,o,C),s(o,ze,C),s(o,N,C),s(o,ie,C),m(Me,o,C),s(o,oe,C),s(o,Xe,C),s(o,pe,C),m(re,o,C),s(o,ye,C),s(o,ce,C),s(o,Ml,C),s(o,de,C),s(o,ol,C),s(o,we,C),s(o,He,C),m(Q,o,C),s(o,Se,C),s(o,F,C),s(o,qe,C),m(E,o,C),s(o,Le,C),s(o,Y,C),s(o,he,C),s(o,Ne,C),Je=!0},i(o){Je||(r(h.$$.fragment,o),r(g.$$.fragment,o),r(Z.$$.fragment,o),r(B.$$.fragment,o),r(xe.$$.fragment,o),r(P.$$.fragment,o),r(le.$$.fragment,o),r(ae.$$.fragment,o),r(Ve.$$.fragment,o),r(Me.$$.fragment,o),r(re.$$.fragment,o),r(Q.$$.fragment,o),r(E.$$.fragment,o),Je=!0)},o(o){y(h.$$.fragment,o),y(g.$$.fragment,o),y(Z.$$.fragment,o),y(B.$$.fragment,o),y(xe.$$.fragment,o),y(P.$$.fragment,o),y(le.$$.fragment,o),y(ae.$$.fragment,o),y(Ve.$$.fragment,o),y(Me.$$.fragment,o),y(re.$$.fragment,o),y(Q.$$.fragment,o),y(E.$$.fragment,o),Je=!1},d(o){o&&(l(i),l(M),l(f),l(p),l(j),l(x),l(_),l(X),l(G),l(A),l(L),l(W),l(_e),l(D),l(Ye),l($),l(K),l(O),l(We),l(ee),l(te),l(Ae),l(se),l(ne),l(ze),l(N),l(ie),l(oe),l(Xe),l(pe),l(ye),l(ce),l(Ml),l(de),l(ol),l(we),l(He),l(Se),l(F),l(qe),l(Le),l(Y),l(he),l(Ne)),U(h,o),U(g,o),U(Z,o),U(B,o),U(xe,o),U(P,o),U(le,o),U(ae,o),U(Ve,o),U(Me,o),U(re,o),U(Q,o),U(E,o)}}}function yo(k){let i,T,M,h,f,p,I,j,g,x,_,V,X="Time to look at question answering! This task comes in many flavors, but the one we‚Äôll focus on in this section is called <em>extractive</em> question answering. This involves posing questions about a document and identifying the answers as <em>spans of text</em> in the document itself.",Z,G,A,H,L='We will fine-tune a BERT model on the <a href="https://rajpurkar.github.io/SQuAD-explorer/" rel="nofollow">SQuAD dataset</a>, which consists of questions posed by crowdworkers on a set of Wikipedia articles. This will give us a model able to compute predictions like this one:',B,W,_e,ll,D,xe='This is actually showcasing the model that was trained and uploaded to the Hub using the code shown in this section. You can find it and double-check the predictions <a href="https://huggingface.co/huggingface-course/bert-finetuned-squad?context=%F0%9F%A4%97+Transformers+is+backed+by+the+three+most+popular+deep+learning+libraries+%E2%80%94+Jax%2C+PyTorch+and+TensorFlow+%E2%80%94+with+a+seamless+integration+between+them.+It%27s+straightforward+to+train+your+models+with+one+before+loading+them+for+inference+with+the+other.&amp;question=Which+deep+learning+libraries+back+%F0%9F%A4%97+Transformers%3F" rel="nofollow">here</a>.',Ye,$,tl,K,P,O,We='The dataset that is used the most as an academic benchmark for extractive question answering is <a href="https://rajpurkar.github.io/SQuAD-explorer/" rel="nofollow">SQuAD</a>, so that‚Äôs the one we‚Äôll use here. There is also a harder <a href="https://huggingface.co/datasets/squad_v2" rel="nofollow">SQuAD v2</a> benchmark, which includes questions that don‚Äôt have an answer. As long as your own dataset contains a column for contexts, a column for questions, and a column for answers, you should be able to adapt the steps below.',sl,ee,le,te,Ae="As usual, we can download and cache the dataset in just one step thanks to <code>load_dataset()</code>:",al,se,ae,ne,Ve="We can then have a look at this object to learn more about the SQuAD dataset:",ze,N,nl,ie,Me,oe,Xe="It looks like we have everything we need with the <code>context</code>, <code>question</code>, and <code>answers</code> fields, so let‚Äôs print those for the first element of our training set:",il,pe,re,ye,ce,Re,Ml="The <code>context</code> and <code>question</code> fields are very straightforward to use. The <code>answers</code> field is a bit trickier as it comports a dictionary with two fields that are both lists. This is the format that will be expected by the <code>squad</code> metric during evaluation; if you are using your own data, you don‚Äôt necessarily need to worry about putting the answers in the same format. The <code>text</code> field is rather obvious, and the <code>answer_start</code> field contains the starting character index of each answer in the context.",de,ve,ol="During training, there is only one possible answer. We can double-check this by using the <code>Dataset.filter()</code> method:",we,$e,He,Q,Se,F,ks="For evaluation, however, there are several possible answers for each sample, which may be the same or different:",qe,E,Le,Y,pl,he,Ne="We won‚Äôt dive into the evaluation script as it will all be wrapped up by a ü§ó Datasets metric for us, but the short version is that some of the questions have several possible answers, and this script will compare a predicted answer to all the acceptable answers and take the best score. If we take a look at the sample at index 2, for instance:",rl,Je,o,C,As,yl,ai="we can see that the answer can indeed be one of the three possibilities we saw before.",Vs,cl,Xs,dl,Rs,wl,ni="Let‚Äôs start with preprocessing the training data. The hard part will be to generate labels for the question‚Äôs answer, which will be the start and end positions of the tokens corresponding to the answer inside the context.",vs,hl,ii="But let‚Äôs not get ahead of ourselves. First, we need to convert the text in the input into IDs the model can make sense of, using a tokenizer:",$s,Jl,Ns,ul,Mi='As mentioned previously, we‚Äôll be fine-tuning a BERT model, but you can use any other model type as long as it has a fast tokenizer implemented. You can see all the architectures that come with a fast version in <a href="https://huggingface.co/transformers/#supported-frameworks" rel="nofollow">this big table</a>, and to check that the <code>tokenizer</code> object you‚Äôre using is indeed backed by ü§ó Tokenizers you can look at its <code>is_fast</code> attribute:',Qs,ml,Fs,Ul,Es,Tl,oi="We can pass to our tokenizer the question and the context together, and it will properly insert the special tokens to form a sentence like this:",Ys,jl,zs,bl,pi="Let‚Äôs double-check:",Hs,fl,Ss,Il,qs,Cl,ri="The labels will then be the index of the tokens starting and ending the answer, and the model will be tasked to predicted one start and end logit per token in the input, with the theoretical labels being as follow:",Ls,Pe,yi='<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/qa_labels.svg" alt="One-hot encoded labels for question answering."/> <img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter7/qa_labels-dark.svg" alt="One-hot encoded labels for question answering."/>',Ds,gl,ci='In this case the context is not too long, but some of the examples in the dataset have very long contexts that will exceed the maximum length we set (which is 384 in this case). As we saw in <a href="/course/chapter6/4">Chapter 6</a> when we explored the internals of the <code>question-answering</code> pipeline, we will deal with long contexts by creating several training features from one sample of our dataset, with a sliding window between them.',Ks,Zl,di="To see how this works using the current example, we can limit the length to 100 and use a sliding window of 50 tokens. As a reminder, we use:",Ps,Gl,wi="<li><code>max_length</code> to set the maximum length (here 100)</li> <li><code>truncation=&quot;only_second&quot;</code> to truncate the context (which is in the second position) when the question with its context is too long</li> <li><code>stride</code> to set the number of overlapping tokens between two successive chunks (here 50)</li> <li><code>return_overflowing_tokens=True</code> to let the tokenizer know we want the overflowing tokens</li>",Os,Bl,ea,kl,la,_l,hi="As we can see, our example has been in split into four inputs, each of them containing the question and some part of the context. Note that the answer to the question (‚ÄúBernadette Soubirous‚Äù) only appears in the third and last inputs, so by dealing with long contexts in this way we will create some training examples where the answer is not included in the context. For those examples, the labels will be <code>start_position = end_position = 0</code> (so we predict the <code>[CLS]</code> token). We will also set those labels in the unfortunate case where the answer has been truncated so that we only have the start (or end) of it. For the examples where the answer is fully in the context, the labels will be the index of the token where the answer starts and the index of the token where the answer ends.",ta,xl,Ji='The dataset provides us with the start character of the answer in the context, and by adding the length of the answer, we can find the end character in the context. To map those to token indices, we will need to use the offset mappings we studied in <a href="/course/chapter6/4">Chapter 6</a>. We can have our tokenizer return these by passing along <code>return_offsets_mapping=True</code>:',sa,Wl,aa,Al,na,Vl,ui="As we can see, we get back the usual input IDs, token type IDs, and attention mask, as well as the offset mapping we required and an extra key, <code>overflow_to_sample_mapping</code>. The corresponding value will be of use to us when we tokenize several texts at the same time (which we should do to benefit from the fact that our tokenizer is backed by Rust). Since one sample can give several features, it maps each feature to the example it originated from. Because here we only tokenized one example, we get a list of <code>0</code>s:",ia,Xl,Ma,Rl,oa,vl,mi="But if we tokenize more examples, this will become more useful:",pa,$l,ra,Nl,ya,Ql,Ui="As we can see, the first three examples (at indices 2, 3, and 4 in the training set) each gave four features and the last example (at index 5 in the training set) gave 7 features.",ca,Fl,Ti="This information will be useful to map each feature we get to its corresponding label. As mentioned earlier, those labels are:",da,El,ji="<li><code>(0, 0)</code> if the answer is not in the corresponding span of the context</li> <li><code>(start_position, end_position)</code> if the answer is in the corresponding span of the context, with <code>start_position</code> being the index of the token (in the input IDs) at the start of the answer and <code>end_position</code> being the index of the token (in the input IDs) where the answer ends</li>",wa,Yl,bi="To determine which of these is the case and, if relevant, the positions of the tokens, we first find the indices that start and end the context in the input IDs. We could use the token type IDs to do this, but since those do not necessarily exist for all models (DistilBERT does not require them, for instance), we‚Äôll instead use the <code>sequence_ids()</code> method of the <code>BatchEncoding</code> our tokenizer returns.",ha,zl,fi="Once we have those token indices, we look at the corresponding offsets, which are tuples of two integers representing the span of characters inside the original context. We can thus detect if the chunk of the context in this feature starts after the answer or ends before the answer begins (in which case the label is <code>(0, 0)</code>). If that‚Äôs not the case, we loop to find the first and last token of the answer:",Ja,Hl,ua,Sl,ma,ql,Ii="Let‚Äôs take a look at a few results to verify that our approach is correct. For the first feature we find <code>(83, 85)</code> as labels, so let‚Äôs compare the theoretical answer with the decoded span of tokens from 83 to 85 (inclusive):",Ua,Ll,Ta,Dl,ja,Kl,Ci="So that‚Äôs a match! Now let‚Äôs check index 4, where we set the labels to <code>(0, 0)</code>, which means the answer is not in the context chunk of that feature:",ba,Pl,fa,Ol,Ia,et,gi="Indeed, we don‚Äôt see the answer inside the context.",Ca,Oe,ga,lt,Zi="Now that we have seen step by step how to preprocess our training data, we can group it in a function we will apply on the whole training dataset. We‚Äôll pad every feature to the maximum length we set, as most of the contexts will be long (and the corresponding samples will be split into several features), so there is no real benefit to applying dynamic padding here:",Za,tt,Ga,st,Gi="Note that we defined two constants to determine the maximum length used as well as the length of the sliding window, and that we added a tiny bit of cleanup before tokenizing: some of the questions in the SQuAD dataset have extra spaces at the beginning and the end that don‚Äôt add anything (and take up space when being tokenized if you use a model like RoBERTa), so we removed those extra spaces.",Ba,at,Bi="To apply this function to the whole training set, we use the <code>Dataset.map()</code> method with the <code>batched=True</code> flag. It‚Äôs necessary here as we are changing the length of the dataset (since one example can give several training features):",ka,nt,_a,it,xa,Mt,ki="As we can see, the preprocessing added roughly 1,000 features. Our training set is now ready to be used ‚Äî let‚Äôs dig into the preprocessing of the validation set!",Wa,ot,Aa,pt,_i="Preprocessing the validation data will be slightly easier as we don‚Äôt need to generate labels (unless we want to compute a validation loss, but that number won‚Äôt really help us understand how good the model is). The real joy will be to interpret the predictions of the model into spans of the original context. For this, we will just need to store both the offset mappings and some way to match each created feature to the original example it comes from. Since there is an ID column in the original dataset, we‚Äôll use that ID.",Va,rt,xi="The only thing we‚Äôll add here is a tiny bit of cleanup of the offset mappings. They will contain offsets for the question and the context, but once we‚Äôre in the post-processing stage we won‚Äôt have any way to know which part of the input IDs corresponded to the context and which part was the question (the <code>sequence_ids()</code> method we used is available for the output of the tokenizer only). So, we‚Äôll set the offsets corresponding to the question to <code>None</code>:",Xa,yt,Ra,ct,Wi="We can apply this function on the whole validation dataset like before:",va,dt,$a,wt,Na,ht,Ai="In this case we‚Äôve only added a couple of hundred samples, so it appears the contexts in the validation dataset are a bit shorter.",Qa,Jt,Vi="Now that we have preprocessed all the data, we can get to the training.",Fa,ue,me,us,ut,Ea,Ue,Te,ms,mt,Xi='The model will output logits for the start and end positions of the answer in the input IDs, as we saw during our exploration of the <a href="/course/chapter6/3b"><code>question-answering</code> pipeline</a>. The post-processing step will be similar to what we did there, so here‚Äôs a quick reminder of the actions we took:',Ya,Ut,Ri="<li>We masked the start and end logits corresponding to tokens outside of the context.</li> <li>We then converted the start and end logits into probabilities using a softmax.</li> <li>We attributed a score to each <code>(start_token, end_token)</code> pair by taking the product of the corresponding two probabilities.</li> <li>We looked for the pair with the maximum score that yielded a valid answer (e.g., a <code>start_token</code> lower than <code>end_token</code>).</li>",za,z,Hn,Us,vi="(start_token, end_token)",Sn,Ts,$i="n_best",qn,js,Ni="n_best=20",Ln,Ha,WM='<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>log</mi><mo>‚Å°</mo><mo stretchy="false">(</mo><mi>a</mi><mi>b</mi><mo stretchy="false">)</mo><mo>=</mo><mi>log</mi><mo>‚Å°</mo><mo stretchy="false">(</mo><mi>a</mi><mo stretchy="false">)</mo><mo>+</mo><mi>log</mi><mo>‚Å°</mo><mo stretchy="false">(</mo><mi>b</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\\log(ab) = \\log(a) + \\log(b)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">ab</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">a</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mop">lo<span style="margin-right:0.01389em;">g</span></span><span class="mopen">(</span><span class="mord mathnormal">b</span><span class="mclose">)</span></span></span></span>',Sa,qa,Tt,Qi="To demonstrate all of this, we will need some kind of predictions. Since we have not trained our model yet, we are going to use the default model for the QA pipeline to generate some predictions on a small part of the validation set. We can use the same processing function as before; because it relies on the global constant <code>tokenizer</code>, we just have to change that object to the tokenizer of the model we want to use temporarily:",La,jt,Da,bt,Fi="Now that the preprocessing is done, we change the tokenizer back to the one we originally picked:",Ka,ft,Pa,It,Ei="We then remove the columns of our <code>eval_set</code> that are not expected by the model, build a batch with all of that small validation set, and pass it through the model. If a GPU is available, we use it to go faster:",Oa,je,be,bs,Ct,Yi="Now, we need to find the predicted answer for each example in our <code>small_eval_set</code>. One example may have been split into several features in <code>eval_set</code>, so the first step is to map each example in <code>small_eval_set</code> to the corresponding features in <code>eval_set</code>:",en,gt,ln,Zt,zi="With this in hand, we can really get to work by looping through all the examples and, for each example, through all the associated features. As we said before, we‚Äôll look at the logit scores for the <code>n_best</code> start logits and end logits, excluding positions that give:",tn,Gt,Hi="<li>An answer that wouldn‚Äôt be inside the context</li> <li>An answer with negative length</li> <li>An answer that is too long (we limit the possibilities at <code>max_answer_length=30</code>)</li>",sn,Bt,Si="Once we have all the scored possible answers for one example, we just pick the one with the best logit score:",an,kt,nn,_t,qi="The final format of the predicted answers is the one that will be expected by the metric we will use. As usual, we can load it with the help of the ü§ó Evaluate library:",Mn,xt,on,Wt,Li="This metric expects the predicted answers in the format we saw above (a list of dictionaries with one key for the ID of the example and one key for the predicted text) and the theoretical answers in the format below (a list of dictionaries with one key for the ID of the example and one key for the possible answers):",pn,At,rn,Vt,Di="We can now check that we get sensible results by looking at the first element of both lists:",yn,Xt,cn,Rt,dn,vt,Ki="Not too bad! Now let‚Äôs have a look at the score the metric gives us:",wn,$t,hn,Nt,Jn,Qt,Pi='Again, that‚Äôs rather good considering that according to <a href="https://arxiv.org/abs/1910.01108v2" rel="nofollow">its paper</a> DistilBERT fine-tuned on SQuAD obtains 79.1 and 86.9 for those scores on the whole dataset.',un,fs,Ft,mn,Et,Oi="We can check it works on our predictions:",Un,Yt,Tn,zt,jn,Ht,eM="Looking good! Now let‚Äôs use this to fine-tune our model.",bn,St,fn,fe,Ie,Is,qt,lM="As usual, we get a warning that some weights are not used (the ones from the pretraining head) and some others are initialized randomly (the ones for the question answering head). You should be used to this by now, but that means this model is not ready to be used just yet and needs fine-tuning ‚Äî good thing we‚Äôre about to do that!",In,Lt,tM="To be able to push our model to the Hub, we‚Äôll need to log in to Hugging Face. If you‚Äôre running this code in a notebook, you can do so with the following utility function, which displays a widget where you can enter your login credentials:",Cn,Dt,gn,Kt,sM="If you aren‚Äôt working in a notebook, just type the following line in your terminal:",Zn,Pt,Gn,Ce,ge,Cs,Ot,aM="By default, the repository used will be in your namespace and named after the output directory you set, so in our case it will be in <code>&quot;sgugger/bert-finetuned-squad&quot;</code>. We can override this by passing a <code>hub_model_id</code>; for instance, to push the model to the <code>huggingface_course</code> organization we used <code>hub_model_id=&quot;huggingface_course/bert-finetuned-squad&quot;</code> (which is the model we linked to at the beginning of this section).",Bn,Ze,Ge,gs,es,nM="Note that while the training happens, each time the model is saved (here, every epoch) it is uploaded to the Hub in the background. This way, you will be able to to resume your training on another machine if necessary. The whole training takes a while (a little over an hour on a Titan RTX), so you can grab a coffee or reread some of the parts of the course that you‚Äôve found more challenging while it proceeds. Also note that as soon as the first epoch is finished, you will see some weights uploaded to the Hub and you can start playing with your model on its page.",kn,Be,ke,Zs,ls,_n,ts,iM="Great! As a comparison, the baseline scores reported in the BERT article for this model are 80.8 and 88.5, so we‚Äôre right where we should be.",xn,Gs,ss,MM="At this stage, you can use the inference widget on the Model Hub to test the model and share it with your friends, family, and favorite pets. You have successfully fine-tuned a model on a question answering task ‚Äî congratulations!",Wn,el,An,Bs,as,Vn,ns,oM="We‚Äôve already shown you how you can use the model we fine-tuned on the Model Hub with the inference widget. To use it locally in a <code>pipeline</code>, you just have to specify the model identifier:",Xn,is,Rn,Ms,vn,os,pM="Great! Our model is working as well as the default one for this pipeline!",$n,_s,Nn;f=new FM({props:{fw:k[0]}}),I=new q({props:{title:"Question answering",local:"question-answering",headingTag:"h1"}});const rM=[YM,EM],ps=[];function yM(e,t){return e[0]==="pt"?0:1}g=yM(k),x=ps[g]=rM[g](k),G=new Yn({props:{id:"ajPx5LwJD-I"}}),$=new En({props:{$$slots:{default:[zM]},$$scope:{ctx:k}}}),K=new q({props:{title:"Preparing the data",local:"preparing-the-data",headingTag:"h2"}}),ee=new q({props:{title:"The SQuAD dataset",local:"the-squad-dataset",headingTag:"h3"}}),se=new b({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBcmF3X2RhdGFzZXRzJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMnNxdWFkJTIyKQ==",highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

raw_datasets = load_dataset(<span class="hljs-string">&quot;squad&quot;</span>)`,wrap:!1}}),N=new b({props:{code:"cmF3X2RhdGFzZXRz",highlighted:"raw_datasets",wrap:!1}}),ie=new b({props:{code:"RGF0YXNldERpY3QoJTdCJTBBJTIwJTIwJTIwJTIwdHJhaW4lM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ2lkJyUyQyUyMCd0aXRsZSclMkMlMjAnY29udGV4dCclMkMlMjAncXVlc3Rpb24nJTJDJTIwJ2Fuc3dlcnMnJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwbnVtX3Jvd3MlM0ElMjA4NzU5OSUwQSUyMCUyMCUyMCUyMCU3RCklMEElMjAlMjAlMjAlMjB2YWxpZGF0aW9uJTNBJTIwRGF0YXNldCglN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmZWF0dXJlcyUzQSUyMCU1QidpZCclMkMlMjAndGl0bGUnJTJDJTIwJ2NvbnRleHQnJTJDJTIwJ3F1ZXN0aW9uJyUyQyUyMCdhbnN3ZXJzJyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwMTA1NzAlMEElMjAlMjAlMjAlMjAlN0QpJTBBJTdEKQ==",highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>],
        num_rows: <span class="hljs-number">87599</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>],
        num_rows: <span class="hljs-number">10570</span>
    })
})`,wrap:!1}}),pe=new b({props:{code:"cHJpbnQoJTIyQ29udGV4dCUzQSUyMCUyMiUyQyUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RCU1QiUyMmNvbnRleHQlMjIlNUQpJTBBcHJpbnQoJTIyUXVlc3Rpb24lM0ElMjAlMjIlMkMlMjByYXdfZGF0YXNldHMlNUIlMjJ0cmFpbiUyMiU1RCU1QjAlNUQlNUIlMjJxdWVzdGlvbiUyMiU1RCklMEFwcmludCglMjJBbnN3ZXIlM0ElMjAlMjIlMkMlMjByYXdfZGF0YXNldHMlNUIlMjJ0cmFpbiUyMiU1RCU1QjAlNUQlNUIlMjJhbnN3ZXJzJTIyJTVEKQ==",highlighted:`<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Context: &quot;</span>, raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;context&quot;</span>])
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Question: &quot;</span>, raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;question&quot;</span>])
<span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Answer: &quot;</span>, raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;answers&quot;</span>])`,wrap:!1}}),ye=new b({props:{code:"Q29udGV4dCUzQSUyMCdBcmNoaXRlY3R1cmFsbHklMkMlMjB0aGUlMjBzY2hvb2wlMjBoYXMlMjBhJTIwQ2F0aG9saWMlMjBjaGFyYWN0ZXIuJTIwQXRvcCUyMHRoZSUyME1haW4lMjBCdWlsZGluZyU1QydzJTIwZ29sZCUyMGRvbWUlMjBpcyUyMGElMjBnb2xkZW4lMjBzdGF0dWUlMjBvZiUyMHRoZSUyMFZpcmdpbiUyME1hcnkuJTIwSW1tZWRpYXRlbHklMjBpbiUyMGZyb250JTIwb2YlMjB0aGUlMjBNYWluJTIwQnVpbGRpbmclMjBhbmQlMjBmYWNpbmclMjBpdCUyQyUyMGlzJTIwYSUyMGNvcHBlciUyMHN0YXR1ZSUyMG9mJTIwQ2hyaXN0JTIwd2l0aCUyMGFybXMlMjB1cHJhaXNlZCUyMHdpdGglMjB0aGUlMjBsZWdlbmQlMjAlMjJWZW5pdGUlMjBBZCUyME1lJTIwT21uZXMlMjIuJTIwTmV4dCUyMHRvJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTIwaXMlMjB0aGUlMjBCYXNpbGljYSUyMG9mJTIwdGhlJTIwU2FjcmVkJTIwSGVhcnQuJTIwSW1tZWRpYXRlbHklMjBiZWhpbmQlMjB0aGUlMjBiYXNpbGljYSUyMGlzJTIwdGhlJTIwR3JvdHRvJTJDJTIwYSUyME1hcmlhbiUyMHBsYWNlJTIwb2YlMjBwcmF5ZXIlMjBhbmQlMjByZWZsZWN0aW9uLiUyMEl0JTIwaXMlMjBhJTIwcmVwbGljYSUyMG9mJTIwdGhlJTIwZ3JvdHRvJTIwYXQlMjBMb3VyZGVzJTJDJTIwRnJhbmNlJTIwd2hlcmUlMjB0aGUlMjBWaXJnaW4lMjBNYXJ5JTIwcmVwdXRlZGx5JTIwYXBwZWFyZWQlMjB0byUyMFNhaW50JTIwQmVybmFkZXR0ZSUyMFNvdWJpcm91cyUyMGluJTIwMTg1OC4lMjBBdCUyMHRoZSUyMGVuZCUyMG9mJTIwdGhlJTIwbWFpbiUyMGRyaXZlJTIwKGFuZCUyMGluJTIwYSUyMGRpcmVjdCUyMGxpbmUlMjB0aGF0JTIwY29ubmVjdHMlMjB0aHJvdWdoJTIwMyUyMHN0YXR1ZXMlMjBhbmQlMjB0aGUlMjBHb2xkJTIwRG9tZSklMkMlMjBpcyUyMGElMjBzaW1wbGUlMkMlMjBtb2Rlcm4lMjBzdG9uZSUyMHN0YXR1ZSUyMG9mJTIwTWFyeS4nJTBBUXVlc3Rpb24lM0ElMjAnVG8lMjB3aG9tJTIwZGlkJTIwdGhlJTIwVmlyZ2luJTIwTWFyeSUyMGFsbGVnZWRseSUyMGFwcGVhciUyMGluJTIwMTg1OCUyMGluJTIwTG91cmRlcyUyMEZyYW5jZSUzRiclMEFBbnN3ZXIlM0ElMjAlN0IndGV4dCclM0ElMjAlNUInU2FpbnQlMjBCZXJuYWRldHRlJTIwU291Ymlyb3VzJyU1RCUyQyUyMCdhbnN3ZXJfc3RhcnQnJTNBJTIwJTVCNTE1JTVEJTdE",highlighted:`Context: <span class="hljs-string">&#x27;Architecturally, the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot;Venite Ad Me Omnes&quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive (and in a direct line that connects through 3 statues and the Gold Dome), is a simple, modern stone statue of Mary.&#x27;</span>
Question: <span class="hljs-string">&#x27;To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France?&#x27;</span>
Answer: {<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Saint Bernadette Soubirous&#x27;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">515</span>]}`,wrap:!1}}),$e=new b({props:{code:"cmF3X2RhdGFzZXRzJTVCJTIydHJhaW4lMjIlNUQuZmlsdGVyKGxhbWJkYSUyMHglM0ElMjBsZW4oeCU1QiUyMmFuc3dlcnMlMjIlNUQlNUIlMjJ0ZXh0JTIyJTVEKSUyMCElM0QlMjAxKQ==",highlighted:'raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">filter</span>(<span class="hljs-keyword">lambda</span> x: <span class="hljs-built_in">len</span>(x[<span class="hljs-string">&quot;answers&quot;</span>][<span class="hljs-string">&quot;text&quot;</span>]) != <span class="hljs-number">1</span>)',wrap:!1}}),Q=new b({props:{code:"RGF0YXNldCglN0IlMEElMjAlMjAlMjAlMjBmZWF0dXJlcyUzQSUyMCU1QidpZCclMkMlMjAndGl0bGUnJTJDJTIwJ2NvbnRleHQnJTJDJTIwJ3F1ZXN0aW9uJyUyQyUyMCdhbnN3ZXJzJyU1RCUyQyUwQSUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwMCUwQSU3RCk=",highlighted:`Dataset({
    features: [<span class="hljs-string">&#x27;id&#x27;</span>, <span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;context&#x27;</span>, <span class="hljs-string">&#x27;question&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>],
    num_rows: <span class="hljs-number">0</span>
})`,wrap:!1}}),E=new b({props:{code:"cHJpbnQocmF3X2RhdGFzZXRzJTVCJTIydmFsaWRhdGlvbiUyMiU1RCU1QjAlNUQlNUIlMjJhbnN3ZXJzJTIyJTVEKSUwQXByaW50KHJhd19kYXRhc2V0cyU1QiUyMnZhbGlkYXRpb24lMjIlNUQlNUIyJTVEJTVCJTIyYW5zd2VycyUyMiU1RCk=",highlighted:`<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;answers&quot;</span>])
<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&quot;answers&quot;</span>])`,wrap:!1}}),Y=new b({props:{code:"JTdCJ3RleHQnJTNBJTIwJTVCJ0RlbnZlciUyMEJyb25jb3MnJTJDJTIwJ0RlbnZlciUyMEJyb25jb3MnJTJDJTIwJ0RlbnZlciUyMEJyb25jb3MnJTVEJTJDJTIwJ2Fuc3dlcl9zdGFydCclM0ElMjAlNUIxNzclMkMlMjAxNzclMkMlMjAxNzclNUQlN0QlMEElN0IndGV4dCclM0ElMjAlNUInU2FudGElMjBDbGFyYSUyQyUyMENhbGlmb3JuaWEnJTJDJTIwJTIyTGV2aSdzJTIwU3RhZGl1bSUyMiUyQyUyMCUyMkxldmkncyUyMFN0YWRpdW0lMjBpbiUyMHRoZSUyMFNhbiUyMEZyYW5jaXNjbyUyMEJheSUyMEFyZWElMjBhdCUyMFNhbnRhJTIwQ2xhcmElMkMlMjBDYWxpZm9ybmlhLiUyMiU1RCUyQyUyMCdhbnN3ZXJfc3RhcnQnJTNBJTIwJTVCNDAzJTJDJTIwMzU1JTJDJTIwMzU1JTVEJTdE",highlighted:`{<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">177</span>, <span class="hljs-number">177</span>, <span class="hljs-number">177</span>]}
{<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Santa Clara, California&#x27;</span>, <span class="hljs-string">&quot;Levi&#x27;s Stadium&quot;</span>, <span class="hljs-string">&quot;Levi&#x27;s Stadium in the San Francisco Bay Area at Santa Clara, California.&quot;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">403</span>, <span class="hljs-number">355</span>, <span class="hljs-number">355</span>]}`,wrap:!1}}),Je=new b({props:{code:"cHJpbnQocmF3X2RhdGFzZXRzJTVCJTIydmFsaWRhdGlvbiUyMiU1RCU1QjIlNUQlNUIlMjJjb250ZXh0JTIyJTVEKSUwQXByaW50KHJhd19kYXRhc2V0cyU1QiUyMnZhbGlkYXRpb24lMjIlNUQlNUIyJTVEJTVCJTIycXVlc3Rpb24lMjIlNUQp",highlighted:`<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&quot;context&quot;</span>])
<span class="hljs-built_in">print</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>][<span class="hljs-number">2</span>][<span class="hljs-string">&quot;question&quot;</span>])`,wrap:!1}}),C=new b({props:{code:"J1N1cGVyJTIwQm93bCUyMDUwJTIwd2FzJTIwYW4lMjBBbWVyaWNhbiUyMGZvb3RiYWxsJTIwZ2FtZSUyMHRvJTIwZGV0ZXJtaW5lJTIwdGhlJTIwY2hhbXBpb24lMjBvZiUyMHRoZSUyME5hdGlvbmFsJTIwRm9vdGJhbGwlMjBMZWFndWUlMjAoTkZMKSUyMGZvciUyMHRoZSUyMDIwMTUlMjBzZWFzb24uJTIwVGhlJTIwQW1lcmljYW4lMjBGb290YmFsbCUyMENvbmZlcmVuY2UlMjAoQUZDKSUyMGNoYW1waW9uJTIwRGVudmVyJTIwQnJvbmNvcyUyMGRlZmVhdGVkJTIwdGhlJTIwTmF0aW9uYWwlMjBGb290YmFsbCUyMENvbmZlcmVuY2UlMjAoTkZDKSUyMGNoYW1waW9uJTIwQ2Fyb2xpbmElMjBQYW50aGVycyUyMDI0JUUyJTgwJTkzMTAlMjB0byUyMGVhcm4lMjB0aGVpciUyMHRoaXJkJTIwU3VwZXIlMjBCb3dsJTIwdGl0bGUuJTIwVGhlJTIwZ2FtZSUyMHdhcyUyMHBsYXllZCUyMG9uJTIwRmVicnVhcnklMjA3JTJDJTIwMjAxNiUyQyUyMGF0JTIwTGV2aSU1QydzJTIwU3RhZGl1bSUyMGluJTIwdGhlJTIwU2FuJTIwRnJhbmNpc2NvJTIwQmF5JTIwQXJlYSUyMGF0JTIwU2FudGElMjBDbGFyYSUyQyUyMENhbGlmb3JuaWEuJTIwQXMlMjB0aGlzJTIwd2FzJTIwdGhlJTIwNTB0aCUyMFN1cGVyJTIwQm93bCUyQyUyMHRoZSUyMGxlYWd1ZSUyMGVtcGhhc2l6ZWQlMjB0aGUlMjAlMjJnb2xkZW4lMjBhbm5pdmVyc2FyeSUyMiUyMHdpdGglMjB2YXJpb3VzJTIwZ29sZC10aGVtZWQlMjBpbml0aWF0aXZlcyUyQyUyMGFzJTIwd2VsbCUyMGFzJTIwdGVtcG9yYXJpbHklMjBzdXNwZW5kaW5nJTIwdGhlJTIwdHJhZGl0aW9uJTIwb2YlMjBuYW1pbmclMjBlYWNoJTIwU3VwZXIlMjBCb3dsJTIwZ2FtZSUyMHdpdGglMjBSb21hbiUyMG51bWVyYWxzJTIwKHVuZGVyJTIwd2hpY2glMjB0aGUlMjBnYW1lJTIwd291bGQlMjBoYXZlJTIwYmVlbiUyMGtub3duJTIwYXMlMjAlMjJTdXBlciUyMEJvd2wlMjBMJTIyKSUyQyUyMHNvJTIwdGhhdCUyMHRoZSUyMGxvZ28lMjBjb3VsZCUyMHByb21pbmVudGx5JTIwZmVhdHVyZSUyMHRoZSUyMEFyYWJpYyUyMG51bWVyYWxzJTIwNTAuJyUwQSdXaGVyZSUyMGRpZCUyMFN1cGVyJTIwQm93bCUyMDUwJTIwdGFrZSUyMHBsYWNlJTNGJw==",highlighted:`<span class="hljs-string">&#x27;Super Bowl 50 was an American football game to determine the champion of the National Football League (NFL) for the 2015 season. The American Football Conference (AFC) champion Denver Broncos defeated the National Football Conference (NFC) champion Carolina Panthers 24‚Äì10 to earn their third Super Bowl title. The game was played on February 7, 2016, at Levi\\&#x27;s Stadium in the San Francisco Bay Area at Santa Clara, California. As this was the 50th Super Bowl, the league emphasized the &quot;golden anniversary&quot; with various gold-themed initiatives, as well as temporarily suspending the tradition of naming each Super Bowl game with Roman numerals (under which the game would have been known as &quot;Super Bowl L&quot;), so that the logo could prominently feature the Arabic numerals 50.&#x27;</span>
<span class="hljs-string">&#x27;Where did Super Bowl 50 take place?&#x27;</span>`,wrap:!1}}),cl=new q({props:{title:"Processing the training data",local:"processing-the-training-data",headingTag:"h3"}}),dl=new Yn({props:{id:"qgaM0weJHpA"}}),Jl=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEElMEFtb2RlbF9jaGVja3BvaW50JTIwJTNEJTIwJTIyYmVydC1iYXNlLWNhc2VkJTIyJTBBdG9rZW5pemVyJTIwJTNEJTIwQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQobW9kZWxfY2hlY2twb2ludCk=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

model_checkpoint = <span class="hljs-string">&quot;bert-base-cased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)`,wrap:!1}}),ml=new b({props:{code:"dG9rZW5pemVyLmlzX2Zhc3Q=",highlighted:"tokenizer.is_fast",wrap:!1}}),Ul=new b({props:{code:"VHJ1ZQ==",highlighted:'<span class="hljs-literal">True</span>',wrap:!1}}),jl=new b({props:{code:"JTVCQ0xTJTVEJTIwcXVlc3Rpb24lMjAlNUJTRVAlNUQlMjBjb250ZXh0JTIwJTVCU0VQJTVE",highlighted:'<span class="hljs-selector-attr">[CLS]</span> question <span class="hljs-selector-attr">[SEP]</span> context <span class="hljs-selector-attr">[SEP]</span>',wrap:!1}}),fl=new b({props:{code:"Y29udGV4dCUyMCUzRCUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RCU1QiUyMmNvbnRleHQlMjIlNUQlMEFxdWVzdGlvbiUyMCUzRCUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RCU1QiUyMnF1ZXN0aW9uJTIyJTVEJTBBJTBBaW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKHF1ZXN0aW9uJTJDJTIwY29udGV4dCklMEF0b2tlbml6ZXIuZGVjb2RlKGlucHV0cyU1QiUyMmlucHV0X2lkcyUyMiU1RCk=",highlighted:`context = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;context&quot;</span>]
question = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&quot;question&quot;</span>]

inputs = tokenizer(question, context)
tokenizer.decode(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])`,wrap:!1}}),Il=new b({props:{code:"JyU1QkNMUyU1RCUyMFRvJTIwd2hvbSUyMGRpZCUyMHRoZSUyMFZpcmdpbiUyME1hcnklMjBhbGxlZ2VkbHklMjBhcHBlYXIlMjBpbiUyMDE4NTglMjBpbiUyMExvdXJkZXMlMjBGcmFuY2UlM0YlMjAlNUJTRVAlNUQlMjBBcmNoaXRlY3R1cmFsbHklMkMlMjAnJTBBJ3RoZSUyMHNjaG9vbCUyMGhhcyUyMGElMjBDYXRob2xpYyUyMGNoYXJhY3Rlci4lMjBBdG9wJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTVDJ3MlMjBnb2xkJTIwZG9tZSUyMGlzJTIwYSUyMGdvbGRlbiUyMHN0YXR1ZSUyMG9mJTIwdGhlJTIwVmlyZ2luJTIwJyUwQSdNYXJ5LiUyMEltbWVkaWF0ZWx5JTIwaW4lMjBmcm9udCUyMG9mJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTIwYW5kJTIwZmFjaW5nJTIwaXQlMkMlMjBpcyUyMGElMjBjb3BwZXIlMjBzdGF0dWUlMjBvZiUyMENocmlzdCUyMHdpdGglMjBhcm1zJTIwJyUwQSd1cHJhaXNlZCUyMHdpdGglMjB0aGUlMjBsZWdlbmQlMjAlMjIlMjBWZW5pdGUlMjBBZCUyME1lJTIwT21uZXMlMjAlMjIuJTIwTmV4dCUyMHRvJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTIwaXMlMjB0aGUlMjBCYXNpbGljYSUyMG9mJTIwdGhlJTIwU2FjcmVkJTIwJyUwQSdIZWFydC4lMjBJbW1lZGlhdGVseSUyMGJlaGluZCUyMHRoZSUyMGJhc2lsaWNhJTIwaXMlMjB0aGUlMjBHcm90dG8lMkMlMjBhJTIwTWFyaWFuJTIwcGxhY2UlMjBvZiUyMHByYXllciUyMGFuZCUyMHJlZmxlY3Rpb24uJTIwSXQlMjBpcyUyMGElMjAnJTBBJ3JlcGxpY2ElMjBvZiUyMHRoZSUyMGdyb3R0byUyMGF0JTIwTG91cmRlcyUyQyUyMEZyYW5jZSUyMHdoZXJlJTIwdGhlJTIwVmlyZ2luJTIwTWFyeSUyMHJlcHV0ZWRseSUyMGFwcGVhcmVkJTIwdG8lMjBTYWludCUyMEJlcm5hZGV0dGUlMjAnJTBBJ1NvdWJpcm91cyUyMGluJTIwMTg1OC4lMjBBdCUyMHRoZSUyMGVuZCUyMG9mJTIwdGhlJTIwbWFpbiUyMGRyaXZlJTIwKCUyMGFuZCUyMGluJTIwYSUyMGRpcmVjdCUyMGxpbmUlMjB0aGF0JTIwY29ubmVjdHMlMjB0aHJvdWdoJTIwMyUyMHN0YXR1ZXMlMjAnJTBBJ2FuZCUyMHRoZSUyMEdvbGQlMjBEb21lJTIwKSUyQyUyMGlzJTIwYSUyMHNpbXBsZSUyQyUyMG1vZGVybiUyMHN0b25lJTIwc3RhdHVlJTIwb2YlMjBNYXJ5LiUyMCU1QlNFUCU1RCc=",highlighted:`<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Architecturally, &#x27;</span>
<span class="hljs-string">&#x27;the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin &#x27;</span>
<span class="hljs-string">&#x27;Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms &#x27;</span>
<span class="hljs-string">&#x27;upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred &#x27;</span>
<span class="hljs-string">&#x27;Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a &#x27;</span>
<span class="hljs-string">&#x27;replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette &#x27;</span>
<span class="hljs-string">&#x27;Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 statues &#x27;</span>
<span class="hljs-string">&#x27;and the Gold Dome ), is a simple, modern stone statue of Mary. [SEP]&#x27;</span>`,wrap:!1}}),Bl=new b({props:{code:"aW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUwQSUyMCUyMCUyMCUyMHF1ZXN0aW9uJTJDJTBBJTIwJTIwJTIwJTIwY29udGV4dCUyQyUwQSUyMCUyMCUyMCUyMG1heF9sZW5ndGglM0QxMDAlMkMlMEElMjAlMjAlMjAlMjB0cnVuY2F0aW9uJTNEJTIyb25seV9zZWNvbmQlMjIlMkMlMEElMjAlMjAlMjAlMjBzdHJpZGUlM0Q1MCUyQyUwQSUyMCUyMCUyMCUyMHJldHVybl9vdmVyZmxvd2luZ190b2tlbnMlM0RUcnVlJTJDJTBBKSUwQSUwQWZvciUyMGlkcyUyMGluJTIwaW5wdXRzJTVCJTIyaW5wdXRfaWRzJTIyJTVEJTNBJTBBJTIwJTIwJTIwJTIwcHJpbnQodG9rZW5pemVyLmRlY29kZShpZHMpKQ==",highlighted:`inputs = tokenizer(
    question,
    context,
    max_length=<span class="hljs-number">100</span>,
    truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
    stride=<span class="hljs-number">50</span>,
    return_overflowing_tokens=<span class="hljs-literal">True</span>,
)

<span class="hljs-keyword">for</span> ids <span class="hljs-keyword">in</span> inputs[<span class="hljs-string">&quot;input_ids&quot;</span>]:
    <span class="hljs-built_in">print</span>(tokenizer.decode(ids))`,wrap:!1}}),kl=new b({props:{code:"JyU1QkNMUyU1RCUyMFRvJTIwd2hvbSUyMGRpZCUyMHRoZSUyMFZpcmdpbiUyME1hcnklMjBhbGxlZ2VkbHklMjBhcHBlYXIlMjBpbiUyMDE4NTglMjBpbiUyMExvdXJkZXMlMjBGcmFuY2UlM0YlMjAlNUJTRVAlNUQlMjBBcmNoaXRlY3R1cmFsbHklMkMlMjB0aGUlMjBzY2hvb2wlMjBoYXMlMjBhJTIwQ2F0aG9saWMlMjBjaGFyYWN0ZXIuJTIwQXRvcCUyMHRoZSUyME1haW4lMjBCdWlsZGluZyU1QydzJTIwZ29sZCUyMGRvbWUlMjBpcyUyMGElMjBnb2xkZW4lMjBzdGF0dWUlMjBvZiUyMHRoZSUyMFZpcmdpbiUyME1hcnkuJTIwSW1tZWRpYXRlbHklMjBpbiUyMGZyb250JTIwb2YlMjB0aGUlMjBNYWluJTIwQnVpbGRpbmclMjBhbmQlMjBmYWNpbmclMjBpdCUyQyUyMGlzJTIwYSUyMGNvcHBlciUyMHN0YXR1ZSUyMG9mJTIwQ2hyaXN0JTIwd2l0aCUyMGFybXMlMjB1cHJhaXNlZCUyMHdpdGglMjB0aGUlMjBsZWdlbmQlMjAlMjIlMjBWZW5pdGUlMjBBZCUyME1lJTIwT21uZXMlMjAlMjIuJTIwTmV4dCUyMHRvJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTIwaXMlMjB0aGUlMjBCYXNpbGljYSUyMG9mJTIwdGhlJTIwU2FjcmVkJTIwSGVhcnQuJTIwSW1tZWRpYXRlbHklMjBiZWhpbmQlMjB0aGUlMjBiYXNpJTIwJTVCU0VQJTVEJyUwQSclNUJDTFMlNUQlMjBUbyUyMHdob20lMjBkaWQlMjB0aGUlMjBWaXJnaW4lMjBNYXJ5JTIwYWxsZWdlZGx5JTIwYXBwZWFyJTIwaW4lMjAxODU4JTIwaW4lMjBMb3VyZGVzJTIwRnJhbmNlJTNGJTIwJTVCU0VQJTVEJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTIwYW5kJTIwZmFjaW5nJTIwaXQlMkMlMjBpcyUyMGElMjBjb3BwZXIlMjBzdGF0dWUlMjBvZiUyMENocmlzdCUyMHdpdGglMjBhcm1zJTIwdXByYWlzZWQlMjB3aXRoJTIwdGhlJTIwbGVnZW5kJTIwJTIyJTIwVmVuaXRlJTIwQWQlMjBNZSUyME9tbmVzJTIwJTIyLiUyME5leHQlMjB0byUyMHRoZSUyME1haW4lMjBCdWlsZGluZyUyMGlzJTIwdGhlJTIwQmFzaWxpY2ElMjBvZiUyMHRoZSUyMFNhY3JlZCUyMEhlYXJ0LiUyMEltbWVkaWF0ZWx5JTIwYmVoaW5kJTIwdGhlJTIwYmFzaWxpY2ElMjBpcyUyMHRoZSUyMEdyb3R0byUyQyUyMGElMjBNYXJpYW4lMjBwbGFjZSUyMG9mJTIwcHJheWVyJTIwYW5kJTIwcmVmbGVjdGlvbi4lMjBJdCUyMGlzJTIwYSUyMHJlcGxpY2ElMjBvZiUyMHRoZSUyMGdyb3R0byUyMGF0JTIwTG91cmRlcyUyQyUyMEZyYW5jZSUyMHdoZXJlJTIwdGhlJTIwVmlyZ2luJTIwJTVCU0VQJTVEJyUwQSclNUJDTFMlNUQlMjBUbyUyMHdob20lMjBkaWQlMjB0aGUlMjBWaXJnaW4lMjBNYXJ5JTIwYWxsZWdlZGx5JTIwYXBwZWFyJTIwaW4lMjAxODU4JTIwaW4lMjBMb3VyZGVzJTIwRnJhbmNlJTNGJTIwJTVCU0VQJTVEJTIwTmV4dCUyMHRvJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTIwaXMlMjB0aGUlMjBCYXNpbGljYSUyMG9mJTIwdGhlJTIwU2FjcmVkJTIwSGVhcnQuJTIwSW1tZWRpYXRlbHklMjBiZWhpbmQlMjB0aGUlMjBiYXNpbGljYSUyMGlzJTIwdGhlJTIwR3JvdHRvJTJDJTIwYSUyME1hcmlhbiUyMHBsYWNlJTIwb2YlMjBwcmF5ZXIlMjBhbmQlMjByZWZsZWN0aW9uLiUyMEl0JTIwaXMlMjBhJTIwcmVwbGljYSUyMG9mJTIwdGhlJTIwZ3JvdHRvJTIwYXQlMjBMb3VyZGVzJTJDJTIwRnJhbmNlJTIwd2hlcmUlMjB0aGUlMjBWaXJnaW4lMjBNYXJ5JTIwcmVwdXRlZGx5JTIwYXBwZWFyZWQlMjB0byUyMFNhaW50JTIwQmVybmFkZXR0ZSUyMFNvdWJpcm91cyUyMGluJTIwMTg1OC4lMjBBdCUyMHRoZSUyMGVuZCUyMG9mJTIwdGhlJTIwbWFpbiUyMGRyaXZlJTIwKCUyMGFuZCUyMGluJTIwYSUyMGRpcmVjdCUyMGxpbmUlMjB0aGF0JTIwY29ubmVjdHMlMjB0aHJvdWdoJTIwMyUyMCU1QlNFUCU1RCclMEEnJTVCQ0xTJTVEJTIwVG8lMjB3aG9tJTIwZGlkJTIwdGhlJTIwVmlyZ2luJTIwTWFyeSUyMGFsbGVnZWRseSUyMGFwcGVhciUyMGluJTIwMTg1OCUyMGluJTIwTG91cmRlcyUyMEZyYW5jZSUzRiUyMCU1QlNFUCU1RC4lMjBJdCUyMGlzJTIwYSUyMHJlcGxpY2ElMjBvZiUyMHRoZSUyMGdyb3R0byUyMGF0JTIwTG91cmRlcyUyQyUyMEZyYW5jZSUyMHdoZXJlJTIwdGhlJTIwVmlyZ2luJTIwTWFyeSUyMHJlcHV0ZWRseSUyMGFwcGVhcmVkJTIwdG8lMjBTYWludCUyMEJlcm5hZGV0dGUlMjBTb3ViaXJvdXMlMjBpbiUyMDE4NTguJTIwQXQlMjB0aGUlMjBlbmQlMjBvZiUyMHRoZSUyMG1haW4lMjBkcml2ZSUyMCglMjBhbmQlMjBpbiUyMGElMjBkaXJlY3QlMjBsaW5lJTIwdGhhdCUyMGNvbm5lY3RzJTIwdGhyb3VnaCUyMDMlMjBzdGF0dWVzJTIwYW5kJTIwdGhlJTIwR29sZCUyMERvbWUlMjApJTJDJTIwaXMlMjBhJTIwc2ltcGxlJTJDJTIwbW9kZXJuJTIwc3RvbmUlMjBzdGF0dWUlMjBvZiUyME1hcnkuJTIwJTVCU0VQJTVEJw==",highlighted:`<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Architecturally, the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basi [SEP]&#x27;</span>
<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin [SEP]&#x27;</span>
<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP] Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grotto, a Marian place of prayer and reflection. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 [SEP]&#x27;</span>
<span class="hljs-string">&#x27;[CLS] To whom did the Virgin Mary allegedly appear in 1858 in Lourdes France? [SEP]. It is a replica of the grotto at Lourdes, France where the Virgin Mary reputedly appeared to Saint Bernadette Soubirous in 1858. At the end of the main drive ( and in a direct line that connects through 3 statues and the Gold Dome ), is a simple, modern stone statue of Mary. [SEP]&#x27;</span>`,wrap:!1}}),Wl=new b({props:{code:"aW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUwQSUyMCUyMCUyMCUyMHF1ZXN0aW9uJTJDJTBBJTIwJTIwJTIwJTIwY29udGV4dCUyQyUwQSUyMCUyMCUyMCUyMG1heF9sZW5ndGglM0QxMDAlMkMlMEElMjAlMjAlMjAlMjB0cnVuY2F0aW9uJTNEJTIyb25seV9zZWNvbmQlMjIlMkMlMEElMjAlMjAlMjAlMjBzdHJpZGUlM0Q1MCUyQyUwQSUyMCUyMCUyMCUyMHJldHVybl9vdmVyZmxvd2luZ190b2tlbnMlM0RUcnVlJTJDJTBBJTIwJTIwJTIwJTIwcmV0dXJuX29mZnNldHNfbWFwcGluZyUzRFRydWUlMkMlMEEpJTBBaW5wdXRzLmtleXMoKQ==",highlighted:`inputs = tokenizer(
    question,
    context,
    max_length=<span class="hljs-number">100</span>,
    truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
    stride=<span class="hljs-number">50</span>,
    return_overflowing_tokens=<span class="hljs-literal">True</span>,
    return_offsets_mapping=<span class="hljs-literal">True</span>,
)
inputs.keys()`,wrap:!1}}),Al=new b({props:{code:"ZGljdF9rZXlzKCU1QidpbnB1dF9pZHMnJTJDJTIwJ3Rva2VuX3R5cGVfaWRzJyUyQyUyMCdhdHRlbnRpb25fbWFzayclMkMlMjAnb2Zmc2V0X21hcHBpbmcnJTJDJTIwJ292ZXJmbG93X3RvX3NhbXBsZV9tYXBwaW5nJyU1RCk=",highlighted:'dict_keys([<span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>, <span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;offset_mapping&#x27;</span>, <span class="hljs-string">&#x27;overflow_to_sample_mapping&#x27;</span>])',wrap:!1}}),Xl=new b({props:{code:"aW5wdXRzJTVCJTIyb3ZlcmZsb3dfdG9fc2FtcGxlX21hcHBpbmclMjIlNUQ=",highlighted:'inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>]',wrap:!1}}),Rl=new b({props:{code:"JTVCMCUyQyUyMDAlMkMlMjAwJTJDJTIwMCU1RA==",highlighted:'[<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>]',wrap:!1}}),$l=new b({props:{code:"aW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUwQSUyMCUyMCUyMCUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCMiUzQTYlNUQlNUIlMjJxdWVzdGlvbiUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCMiUzQTYlNUQlNUIlMjJjb250ZXh0JTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwbWF4X2xlbmd0aCUzRDEwMCUyQyUwQSUyMCUyMCUyMCUyMHRydW5jYXRpb24lM0QlMjJvbmx5X3NlY29uZCUyMiUyQyUwQSUyMCUyMCUyMCUyMHN0cmlkZSUzRDUwJTJDJTBBJTIwJTIwJTIwJTIwcmV0dXJuX292ZXJmbG93aW5nX3Rva2VucyUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjByZXR1cm5fb2Zmc2V0c19tYXBwaW5nJTNEVHJ1ZSUyQyUwQSklMEElMEFwcmludChmJTIyVGhlJTIwNCUyMGV4YW1wbGVzJTIwZ2F2ZSUyMCU3QmxlbihpbnB1dHMlNUInaW5wdXRfaWRzJyU1RCklN0QlMjBmZWF0dXJlcy4lMjIpJTBBcHJpbnQoZiUyMkhlcmUlMjBpcyUyMHdoZXJlJTIwZWFjaCUyMGNvbWVzJTIwZnJvbSUzQSUyMCU3QmlucHV0cyU1QidvdmVyZmxvd190b19zYW1wbGVfbWFwcGluZyclNUQlN0QuJTIyKQ==",highlighted:`inputs = tokenizer(
    raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">2</span>:<span class="hljs-number">6</span>][<span class="hljs-string">&quot;question&quot;</span>],
    raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">2</span>:<span class="hljs-number">6</span>][<span class="hljs-string">&quot;context&quot;</span>],
    max_length=<span class="hljs-number">100</span>,
    truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
    stride=<span class="hljs-number">50</span>,
    return_overflowing_tokens=<span class="hljs-literal">True</span>,
    return_offsets_mapping=<span class="hljs-literal">True</span>,
)

<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;The 4 examples gave <span class="hljs-subst">{<span class="hljs-built_in">len</span>(inputs[<span class="hljs-string">&#x27;input_ids&#x27;</span>])}</span> features.&quot;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Here is where each comes from: <span class="hljs-subst">{inputs[<span class="hljs-string">&#x27;overflow_to_sample_mapping&#x27;</span>]}</span>.&quot;</span>)`,wrap:!1}}),Nl=new b({props:{code:"J1RoZSUyMDQlMjBleGFtcGxlcyUyMGdhdmUlMjAxOSUyMGZlYXR1cmVzLiclMEEnSGVyZSUyMGlzJTIwd2hlcmUlMjBlYWNoJTIwY29tZXMlMjBmcm9tJTNBJTIwJTVCMCUyQyUyMDAlMkMlMjAwJTJDJTIwMCUyQyUyMDElMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAyJTJDJTIwMiUyQyUyMDIlMkMlMjAyJTJDJTIwMyUyQyUyMDMlMkMlMjAzJTJDJTIwMyUyQyUyMDMlMkMlMjAzJTJDJTIwMyU1RC4n",highlighted:`<span class="hljs-string">&#x27;The 4 examples gave 19 features.&#x27;</span>
<span class="hljs-string">&#x27;Here is where each comes from: [0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3].&#x27;</span>`,wrap:!1}}),Hl=new b({props:{code:"YW5zd2VycyUyMCUzRCUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCMiUzQTYlNUQlNUIlMjJhbnN3ZXJzJTIyJTVEJTBBc3RhcnRfcG9zaXRpb25zJTIwJTNEJTIwJTVCJTVEJTBBZW5kX3Bvc2l0aW9ucyUyMCUzRCUyMCU1QiU1RCUwQSUwQWZvciUyMGklMkMlMjBvZmZzZXQlMjBpbiUyMGVudW1lcmF0ZShpbnB1dHMlNUIlMjJvZmZzZXRfbWFwcGluZyUyMiU1RCklM0ElMEElMjAlMjAlMjAlMjBzYW1wbGVfaWR4JTIwJTNEJTIwaW5wdXRzJTVCJTIyb3ZlcmZsb3dfdG9fc2FtcGxlX21hcHBpbmclMjIlNUQlNUJpJTVEJTBBJTIwJTIwJTIwJTIwYW5zd2VyJTIwJTNEJTIwYW5zd2VycyU1QnNhbXBsZV9pZHglNUQlMEElMjAlMjAlMjAlMjBzdGFydF9jaGFyJTIwJTNEJTIwYW5zd2VyJTVCJTIyYW5zd2VyX3N0YXJ0JTIyJTVEJTVCMCU1RCUwQSUyMCUyMCUyMCUyMGVuZF9jaGFyJTIwJTNEJTIwYW5zd2VyJTVCJTIyYW5zd2VyX3N0YXJ0JTIyJTVEJTVCMCU1RCUyMCUyQiUyMGxlbihhbnN3ZXIlNUIlMjJ0ZXh0JTIyJTVEJTVCMCU1RCklMEElMjAlMjAlMjAlMjBzZXF1ZW5jZV9pZHMlMjAlM0QlMjBpbnB1dHMuc2VxdWVuY2VfaWRzKGkpJTBBJTBBJTIwJTIwJTIwJTIwJTIzJTIwRmluZCUyMHRoZSUyMHN0YXJ0JTIwYW5kJTIwZW5kJTIwb2YlMjB0aGUlMjBjb250ZXh0JTBBJTIwJTIwJTIwJTIwaWR4JTIwJTNEJTIwMCUwQSUyMCUyMCUyMCUyMHdoaWxlJTIwc2VxdWVuY2VfaWRzJTVCaWR4JTVEJTIwISUzRCUyMDElM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpZHglMjAlMkIlM0QlMjAxJTBBJTIwJTIwJTIwJTIwY29udGV4dF9zdGFydCUyMCUzRCUyMGlkeCUwQSUyMCUyMCUyMCUyMHdoaWxlJTIwc2VxdWVuY2VfaWRzJTVCaWR4JTVEJTIwJTNEJTNEJTIwMSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlkeCUyMCUyQiUzRCUyMDElMEElMjAlMjAlMjAlMjBjb250ZXh0X2VuZCUyMCUzRCUyMGlkeCUyMC0lMjAxJTBBJTBBJTIwJTIwJTIwJTIwJTIzJTIwSWYlMjB0aGUlMjBhbnN3ZXIlMjBpcyUyMG5vdCUyMGZ1bGx5JTIwaW5zaWRlJTIwdGhlJTIwY29udGV4dCUyQyUyMGxhYmVsJTIwaXMlMjAoMCUyQyUyMDApJTBBJTIwJTIwJTIwJTIwaWYlMjBvZmZzZXQlNUJjb250ZXh0X3N0YXJ0JTVEJTVCMCU1RCUyMCUzRSUyMHN0YXJ0X2NoYXIlMjBvciUyMG9mZnNldCU1QmNvbnRleHRfZW5kJTVEJTVCMSU1RCUyMCUzQyUyMGVuZF9jaGFyJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3RhcnRfcG9zaXRpb25zLmFwcGVuZCgwKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGVuZF9wb3NpdGlvbnMuYXBwZW5kKDApJTBBJTIwJTIwJTIwJTIwZWxzZSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyME90aGVyd2lzZSUyMGl0J3MlMjB0aGUlMjBzdGFydCUyMGFuZCUyMGVuZCUyMHRva2VuJTIwcG9zaXRpb25zJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWR4JTIwJTNEJTIwY29udGV4dF9zdGFydCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHdoaWxlJTIwaWR4JTIwJTNDJTNEJTIwY29udGV4dF9lbmQlMjBhbmQlMjBvZmZzZXQlNUJpZHglNUQlNUIwJTVEJTIwJTNDJTNEJTIwc3RhcnRfY2hhciUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlkeCUyMCUyQiUzRCUyMDElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdGFydF9wb3NpdGlvbnMuYXBwZW5kKGlkeCUyMC0lMjAxKSUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlkeCUyMCUzRCUyMGNvbnRleHRfZW5kJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwd2hpbGUlMjBpZHglMjAlM0UlM0QlMjBjb250ZXh0X3N0YXJ0JTIwYW5kJTIwb2Zmc2V0JTVCaWR4JTVEJTVCMSU1RCUyMCUzRSUzRCUyMGVuZF9jaGFyJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWR4JTIwLSUzRCUyMDElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfcG9zaXRpb25zLmFwcGVuZChpZHglMjAlMkIlMjAxKSUwQSUwQXN0YXJ0X3Bvc2l0aW9ucyUyQyUyMGVuZF9wb3NpdGlvbnM=",highlighted:`answers = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">2</span>:<span class="hljs-number">6</span>][<span class="hljs-string">&quot;answers&quot;</span>]
start_positions = []
end_positions = []

<span class="hljs-keyword">for</span> i, offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(inputs[<span class="hljs-string">&quot;offset_mapping&quot;</span>]):
    sample_idx = inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>][i]
    answer = answers[sample_idx]
    start_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>]
    end_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">len</span>(answer[<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>])
    sequence_ids = inputs.sequence_ids(i)

    <span class="hljs-comment"># Find the start and end of the context</span>
    idx = <span class="hljs-number">0</span>
    <span class="hljs-keyword">while</span> sequence_ids[idx] != <span class="hljs-number">1</span>:
        idx += <span class="hljs-number">1</span>
    context_start = idx
    <span class="hljs-keyword">while</span> sequence_ids[idx] == <span class="hljs-number">1</span>:
        idx += <span class="hljs-number">1</span>
    context_end = idx - <span class="hljs-number">1</span>

    <span class="hljs-comment"># If the answer is not fully inside the context, label is (0, 0)</span>
    <span class="hljs-keyword">if</span> offset[context_start][<span class="hljs-number">0</span>] &gt; start_char <span class="hljs-keyword">or</span> offset[context_end][<span class="hljs-number">1</span>] &lt; end_char:
        start_positions.append(<span class="hljs-number">0</span>)
        end_positions.append(<span class="hljs-number">0</span>)
    <span class="hljs-keyword">else</span>:
        <span class="hljs-comment"># Otherwise it&#x27;s the start and end token positions</span>
        idx = context_start
        <span class="hljs-keyword">while</span> idx &lt;= context_end <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">0</span>] &lt;= start_char:
            idx += <span class="hljs-number">1</span>
        start_positions.append(idx - <span class="hljs-number">1</span>)

        idx = context_end
        <span class="hljs-keyword">while</span> idx &gt;= context_start <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">1</span>] &gt;= end_char:
            idx -= <span class="hljs-number">1</span>
        end_positions.append(idx + <span class="hljs-number">1</span>)

start_positions, end_positions`,wrap:!1}}),Sl=new b({props:{code:"KCU1QjgzJTJDJTIwNTElMkMlMjAxOSUyQyUyMDAlMkMlMjAwJTJDJTIwNjQlMkMlMjAyNyUyQyUyMDAlMkMlMjAzNCUyQyUyMDAlMkMlMjAwJTJDJTIwMCUyQyUyMDY3JTJDJTIwMzQlMkMlMjAwJTJDJTIwMCUyQyUyMDAlMkMlMjAwJTJDJTIwMCU1RCUyQyUwQSUyMCU1Qjg1JTJDJTIwNTMlMkMlMjAyMSUyQyUyMDAlMkMlMjAwJTJDJTIwNzAlMkMlMjAzMyUyQyUyMDAlMkMlMjA0MCUyQyUyMDAlMkMlMjAwJTJDJTIwMCUyQyUyMDY4JTJDJTIwMzUlMkMlMjAwJTJDJTIwMCUyQyUyMDAlMkMlMjAwJTJDJTIwMCU1RCk=",highlighted:`([<span class="hljs-number">83</span>, <span class="hljs-number">51</span>, <span class="hljs-number">19</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">64</span>, <span class="hljs-number">27</span>, <span class="hljs-number">0</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">67</span>, <span class="hljs-number">34</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>],
 [<span class="hljs-number">85</span>, <span class="hljs-number">53</span>, <span class="hljs-number">21</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">70</span>, <span class="hljs-number">33</span>, <span class="hljs-number">0</span>, <span class="hljs-number">40</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">68</span>, <span class="hljs-number">35</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>])`,wrap:!1}}),Ll=new b({props:{code:"aWR4JTIwJTNEJTIwMCUwQXNhbXBsZV9pZHglMjAlM0QlMjBpbnB1dHMlNUIlMjJvdmVyZmxvd190b19zYW1wbGVfbWFwcGluZyUyMiU1RCU1QmlkeCU1RCUwQWFuc3dlciUyMCUzRCUyMGFuc3dlcnMlNUJzYW1wbGVfaWR4JTVEJTVCJTIydGV4dCUyMiU1RCU1QjAlNUQlMEElMEFzdGFydCUyMCUzRCUyMHN0YXJ0X3Bvc2l0aW9ucyU1QmlkeCU1RCUwQWVuZCUyMCUzRCUyMGVuZF9wb3NpdGlvbnMlNUJpZHglNUQlMEFsYWJlbGVkX2Fuc3dlciUyMCUzRCUyMHRva2VuaXplci5kZWNvZGUoaW5wdXRzJTVCJTIyaW5wdXRfaWRzJTIyJTVEJTVCaWR4JTVEJTVCc3RhcnQlMjAlM0ElMjBlbmQlMjAlMkIlMjAxJTVEKSUwQSUwQXByaW50KGYlMjJUaGVvcmV0aWNhbCUyMGFuc3dlciUzQSUyMCU3QmFuc3dlciU3RCUyQyUyMGxhYmVscyUyMGdpdmUlM0ElMjAlN0JsYWJlbGVkX2Fuc3dlciU3RCUyMik=",highlighted:`idx = <span class="hljs-number">0</span>
sample_idx = inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>][idx]
answer = answers[sample_idx][<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>]

start = start_positions[idx]
end = end_positions[idx]
labeled_answer = tokenizer.decode(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>][idx][start : end + <span class="hljs-number">1</span>])

<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Theoretical answer: <span class="hljs-subst">{answer}</span>, labels give: <span class="hljs-subst">{labeled_answer}</span>&quot;</span>)`,wrap:!1}}),Dl=new b({props:{code:"J1RoZW9yZXRpY2FsJTIwYW5zd2VyJTNBJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTJDJTIwbGFiZWxzJTIwZ2l2ZSUzQSUyMHRoZSUyME1haW4lMjBCdWlsZGluZyc=",highlighted:'<span class="hljs-string">&#x27;Theoretical answer: the Main Building, labels give: the Main Building&#x27;</span>',wrap:!1}}),Pl=new b({props:{code:"aWR4JTIwJTNEJTIwNCUwQXNhbXBsZV9pZHglMjAlM0QlMjBpbnB1dHMlNUIlMjJvdmVyZmxvd190b19zYW1wbGVfbWFwcGluZyUyMiU1RCU1QmlkeCU1RCUwQWFuc3dlciUyMCUzRCUyMGFuc3dlcnMlNUJzYW1wbGVfaWR4JTVEJTVCJTIydGV4dCUyMiU1RCU1QjAlNUQlMEElMEFkZWNvZGVkX2V4YW1wbGUlMjAlM0QlMjB0b2tlbml6ZXIuZGVjb2RlKGlucHV0cyU1QiUyMmlucHV0X2lkcyUyMiU1RCU1QmlkeCU1RCklMEFwcmludChmJTIyVGhlb3JldGljYWwlMjBhbnN3ZXIlM0ElMjAlN0JhbnN3ZXIlN0QlMkMlMjBkZWNvZGVkJTIwZXhhbXBsZSUzQSUyMCU3QmRlY29kZWRfZXhhbXBsZSU3RCUyMik=",highlighted:`idx = <span class="hljs-number">4</span>
sample_idx = inputs[<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>][idx]
answer = answers[sample_idx][<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>]

decoded_example = tokenizer.decode(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>][idx])
<span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;Theoretical answer: <span class="hljs-subst">{answer}</span>, decoded example: <span class="hljs-subst">{decoded_example}</span>&quot;</span>)`,wrap:!1}}),Ol=new b({props:{code:"J1RoZW9yZXRpY2FsJTIwYW5zd2VyJTNBJTIwYSUyME1hcmlhbiUyMHBsYWNlJTIwb2YlMjBwcmF5ZXIlMjBhbmQlMjByZWZsZWN0aW9uJTJDJTIwZGVjb2RlZCUyMGV4YW1wbGUlM0ElMjAlNUJDTFMlNUQlMjBXaGF0JTIwaXMlMjB0aGUlMjBHcm90dG8lMjBhdCUyME5vdHJlJTIwRGFtZSUzRiUyMCU1QlNFUCU1RCUyMEFyY2hpdGVjdHVyYWxseSUyQyUyMHRoZSUyMHNjaG9vbCUyMGhhcyUyMGElMjBDYXRob2xpYyUyMGNoYXJhY3Rlci4lMjBBdG9wJTIwdGhlJTIwTWFpbiUyMEJ1aWxkaW5nJTVDJ3MlMjBnb2xkJTIwZG9tZSUyMGlzJTIwYSUyMGdvbGRlbiUyMHN0YXR1ZSUyMG9mJTIwdGhlJTIwVmlyZ2luJTIwTWFyeS4lMjBJbW1lZGlhdGVseSUyMGluJTIwZnJvbnQlMjBvZiUyMHRoZSUyME1haW4lMjBCdWlsZGluZyUyMGFuZCUyMGZhY2luZyUyMGl0JTJDJTIwaXMlMjBhJTIwY29wcGVyJTIwc3RhdHVlJTIwb2YlMjBDaHJpc3QlMjB3aXRoJTIwYXJtcyUyMHVwcmFpc2VkJTIwd2l0aCUyMHRoZSUyMGxlZ2VuZCUyMCUyMiUyMFZlbml0ZSUyMEFkJTIwTWUlMjBPbW5lcyUyMCUyMi4lMjBOZXh0JTIwdG8lMjB0aGUlMjBNYWluJTIwQnVpbGRpbmclMjBpcyUyMHRoZSUyMEJhc2lsaWNhJTIwb2YlMjB0aGUlMjBTYWNyZWQlMjBIZWFydC4lMjBJbW1lZGlhdGVseSUyMGJlaGluZCUyMHRoZSUyMGJhc2lsaWNhJTIwaXMlMjB0aGUlMjBHcm90JTIwJTVCU0VQJTVEJw==",highlighted:'<span class="hljs-string">&#x27;Theoretical answer: a Marian place of prayer and reflection, decoded example: [CLS] What is the Grotto at Notre Dame? [SEP] Architecturally, the school has a Catholic character. Atop the Main Building\\&#x27;s gold dome is a golden statue of the Virgin Mary. Immediately in front of the Main Building and facing it, is a copper statue of Christ with arms upraised with the legend &quot; Venite Ad Me Omnes &quot;. Next to the Main Building is the Basilica of the Sacred Heart. Immediately behind the basilica is the Grot [SEP]&#x27;</span>',wrap:!1}}),Oe=new En({props:{$$slots:{default:[HM]},$$scope:{ctx:k}}}),tt=new b({props:{code:"bWF4X2xlbmd0aCUyMCUzRCUyMDM4NCUwQXN0cmlkZSUyMCUzRCUyMDEyOCUwQSUwQSUwQWRlZiUyMHByZXByb2Nlc3NfdHJhaW5pbmdfZXhhbXBsZXMoZXhhbXBsZXMpJTNBJTBBJTIwJTIwJTIwJTIwcXVlc3Rpb25zJTIwJTNEJTIwJTVCcS5zdHJpcCgpJTIwZm9yJTIwcSUyMGluJTIwZXhhbXBsZXMlNUIlMjJxdWVzdGlvbiUyMiU1RCU1RCUwQSUyMCUyMCUyMCUyMGlucHV0cyUyMCUzRCUyMHRva2VuaXplciglMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBxdWVzdGlvbnMlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBleGFtcGxlcyU1QiUyMmNvbnRleHQlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBtYXhfbGVuZ3RoJTNEbWF4X2xlbmd0aCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHRydW5jYXRpb24lM0QlMjJvbmx5X3NlY29uZCUyMiUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHN0cmlkZSUzRHN0cmlkZSUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybl9vdmVyZmxvd2luZ190b2tlbnMlM0RUcnVlJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcmV0dXJuX29mZnNldHNfbWFwcGluZyUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBwYWRkaW5nJTNEJTIybWF4X2xlbmd0aCUyMiUyQyUwQSUyMCUyMCUyMCUyMCklMEElMEElMjAlMjAlMjAlMjBvZmZzZXRfbWFwcGluZyUyMCUzRCUyMGlucHV0cy5wb3AoJTIyb2Zmc2V0X21hcHBpbmclMjIpJTBBJTIwJTIwJTIwJTIwc2FtcGxlX21hcCUyMCUzRCUyMGlucHV0cy5wb3AoJTIyb3ZlcmZsb3dfdG9fc2FtcGxlX21hcHBpbmclMjIpJTBBJTIwJTIwJTIwJTIwYW5zd2VycyUyMCUzRCUyMGV4YW1wbGVzJTVCJTIyYW5zd2VycyUyMiU1RCUwQSUyMCUyMCUyMCUyMHN0YXJ0X3Bvc2l0aW9ucyUyMCUzRCUyMCU1QiU1RCUwQSUyMCUyMCUyMCUyMGVuZF9wb3NpdGlvbnMlMjAlM0QlMjAlNUIlNUQlMEElMEElMjAlMjAlMjAlMjBmb3IlMjBpJTJDJTIwb2Zmc2V0JTIwaW4lMjBlbnVtZXJhdGUob2Zmc2V0X21hcHBpbmcpJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc2FtcGxlX2lkeCUyMCUzRCUyMHNhbXBsZV9tYXAlNUJpJTVEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYW5zd2VyJTIwJTNEJTIwYW5zd2VycyU1QnNhbXBsZV9pZHglNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdGFydF9jaGFyJTIwJTNEJTIwYW5zd2VyJTVCJTIyYW5zd2VyX3N0YXJ0JTIyJTVEJTVCMCU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGVuZF9jaGFyJTIwJTNEJTIwYW5zd2VyJTVCJTIyYW5zd2VyX3N0YXJ0JTIyJTVEJTVCMCU1RCUyMCUyQiUyMGxlbihhbnN3ZXIlNUIlMjJ0ZXh0JTIyJTVEJTVCMCU1RCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzZXF1ZW5jZV9pZHMlMjAlM0QlMjBpbnB1dHMuc2VxdWVuY2VfaWRzKGkpJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwRmluZCUyMHRoZSUyMHN0YXJ0JTIwYW5kJTIwZW5kJTIwb2YlMjB0aGUlMjBjb250ZXh0JTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWR4JTIwJTNEJTIwMCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHdoaWxlJTIwc2VxdWVuY2VfaWRzJTVCaWR4JTVEJTIwISUzRCUyMDElM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpZHglMjAlMkIlM0QlMjAxJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY29udGV4dF9zdGFydCUyMCUzRCUyMGlkeCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHdoaWxlJTIwc2VxdWVuY2VfaWRzJTVCaWR4JTVEJTIwJTNEJTNEJTIwMSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlkeCUyMCUyQiUzRCUyMDElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBjb250ZXh0X2VuZCUyMCUzRCUyMGlkeCUyMC0lMjAxJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwSWYlMjB0aGUlMjBhbnN3ZXIlMjBpcyUyMG5vdCUyMGZ1bGx5JTIwaW5zaWRlJTIwdGhlJTIwY29udGV4dCUyQyUyMGxhYmVsJTIwaXMlMjAoMCUyQyUyMDApJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWYlMjBvZmZzZXQlNUJjb250ZXh0X3N0YXJ0JTVEJTVCMCU1RCUyMCUzRSUyMHN0YXJ0X2NoYXIlMjBvciUyMG9mZnNldCU1QmNvbnRleHRfZW5kJTVEJTVCMSU1RCUyMCUzQyUyMGVuZF9jaGFyJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc3RhcnRfcG9zaXRpb25zLmFwcGVuZCgwKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGVuZF9wb3NpdGlvbnMuYXBwZW5kKDApJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZWxzZSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyME90aGVyd2lzZSUyMGl0J3MlMjB0aGUlMjBzdGFydCUyMGFuZCUyMGVuZCUyMHRva2VuJTIwcG9zaXRpb25zJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWR4JTIwJTNEJTIwY29udGV4dF9zdGFydCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHdoaWxlJTIwaWR4JTIwJTNDJTNEJTIwY29udGV4dF9lbmQlMjBhbmQlMjBvZmZzZXQlNUJpZHglNUQlNUIwJTVEJTIwJTNDJTNEJTIwc3RhcnRfY2hhciUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlkeCUyMCUyQiUzRCUyMDElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdGFydF9wb3NpdGlvbnMuYXBwZW5kKGlkeCUyMC0lMjAxKSUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlkeCUyMCUzRCUyMGNvbnRleHRfZW5kJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwd2hpbGUlMjBpZHglMjAlM0UlM0QlMjBjb250ZXh0X3N0YXJ0JTIwYW5kJTIwb2Zmc2V0JTVCaWR4JTVEJTVCMSU1RCUyMCUzRSUzRCUyMGVuZF9jaGFyJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWR4JTIwLSUzRCUyMDElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfcG9zaXRpb25zLmFwcGVuZChpZHglMjAlMkIlMjAxKSUwQSUwQSUyMCUyMCUyMCUyMGlucHV0cyU1QiUyMnN0YXJ0X3Bvc2l0aW9ucyUyMiU1RCUyMCUzRCUyMHN0YXJ0X3Bvc2l0aW9ucyUwQSUyMCUyMCUyMCUyMGlucHV0cyU1QiUyMmVuZF9wb3NpdGlvbnMlMjIlNUQlMjAlM0QlMjBlbmRfcG9zaXRpb25zJTBBJTIwJTIwJTIwJTIwcmV0dXJuJTIwaW5wdXRz",highlighted:`max_length = <span class="hljs-number">384</span>
stride = <span class="hljs-number">128</span>


<span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_training_examples</span>(<span class="hljs-params">examples</span>):
    questions = [q.strip() <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;question&quot;</span>]]
    inputs = tokenizer(
        questions,
        examples[<span class="hljs-string">&quot;context&quot;</span>],
        max_length=max_length,
        truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
        stride=stride,
        return_overflowing_tokens=<span class="hljs-literal">True</span>,
        return_offsets_mapping=<span class="hljs-literal">True</span>,
        padding=<span class="hljs-string">&quot;max_length&quot;</span>,
    )

    offset_mapping = inputs.pop(<span class="hljs-string">&quot;offset_mapping&quot;</span>)
    sample_map = inputs.pop(<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>)
    answers = examples[<span class="hljs-string">&quot;answers&quot;</span>]
    start_positions = []
    end_positions = []

    <span class="hljs-keyword">for</span> i, offset <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(offset_mapping):
        sample_idx = sample_map[i]
        answer = answers[sample_idx]
        start_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>]
        end_char = answer[<span class="hljs-string">&quot;answer_start&quot;</span>][<span class="hljs-number">0</span>] + <span class="hljs-built_in">len</span>(answer[<span class="hljs-string">&quot;text&quot;</span>][<span class="hljs-number">0</span>])
        sequence_ids = inputs.sequence_ids(i)

        <span class="hljs-comment"># Find the start and end of the context</span>
        idx = <span class="hljs-number">0</span>
        <span class="hljs-keyword">while</span> sequence_ids[idx] != <span class="hljs-number">1</span>:
            idx += <span class="hljs-number">1</span>
        context_start = idx
        <span class="hljs-keyword">while</span> sequence_ids[idx] == <span class="hljs-number">1</span>:
            idx += <span class="hljs-number">1</span>
        context_end = idx - <span class="hljs-number">1</span>

        <span class="hljs-comment"># If the answer is not fully inside the context, label is (0, 0)</span>
        <span class="hljs-keyword">if</span> offset[context_start][<span class="hljs-number">0</span>] &gt; start_char <span class="hljs-keyword">or</span> offset[context_end][<span class="hljs-number">1</span>] &lt; end_char:
            start_positions.append(<span class="hljs-number">0</span>)
            end_positions.append(<span class="hljs-number">0</span>)
        <span class="hljs-keyword">else</span>:
            <span class="hljs-comment"># Otherwise it&#x27;s the start and end token positions</span>
            idx = context_start
            <span class="hljs-keyword">while</span> idx &lt;= context_end <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">0</span>] &lt;= start_char:
                idx += <span class="hljs-number">1</span>
            start_positions.append(idx - <span class="hljs-number">1</span>)

            idx = context_end
            <span class="hljs-keyword">while</span> idx &gt;= context_start <span class="hljs-keyword">and</span> offset[idx][<span class="hljs-number">1</span>] &gt;= end_char:
                idx -= <span class="hljs-number">1</span>
            end_positions.append(idx + <span class="hljs-number">1</span>)

    inputs[<span class="hljs-string">&quot;start_positions&quot;</span>] = start_positions
    inputs[<span class="hljs-string">&quot;end_positions&quot;</span>] = end_positions
    <span class="hljs-keyword">return</span> inputs`,wrap:!1}}),nt=new b({props:{code:"dHJhaW5fZGF0YXNldCUyMCUzRCUyMHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVELm1hcCglMEElMjAlMjAlMjAlMjBwcmVwcm9jZXNzX3RyYWluaW5nX2V4YW1wbGVzJTJDJTBBJTIwJTIwJTIwJTIwYmF0Y2hlZCUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjByZW1vdmVfY29sdW1ucyUzRHJhd19kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVELmNvbHVtbl9uYW1lcyUyQyUwQSklMEFsZW4ocmF3X2RhdGFzZXRzJTVCJTIydHJhaW4lMjIlNUQpJTJDJTIwbGVuKHRyYWluX2RhdGFzZXQp",highlighted:`train_dataset = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].<span class="hljs-built_in">map</span>(
    preprocess_training_examples,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;train&quot;</span>].column_names,
)
<span class="hljs-built_in">len</span>(raw_datasets[<span class="hljs-string">&quot;train&quot;</span>]), <span class="hljs-built_in">len</span>(train_dataset)`,wrap:!1}}),it=new b({props:{code:"KDg3NTk5JTJDJTIwODg3Mjkp",highlighted:'(<span class="hljs-number">87599</span>, <span class="hljs-number">88729</span>)',wrap:!1}}),ot=new q({props:{title:"Processing the validation data",local:"processing-the-validation-data",headingTag:"h3"}}),yt=new b({props:{code:"ZGVmJTIwcHJlcHJvY2Vzc192YWxpZGF0aW9uX2V4YW1wbGVzKGV4YW1wbGVzKSUzQSUwQSUyMCUyMCUyMCUyMHF1ZXN0aW9ucyUyMCUzRCUyMCU1QnEuc3RyaXAoKSUyMGZvciUyMHElMjBpbiUyMGV4YW1wbGVzJTVCJTIycXVlc3Rpb24lMjIlNUQlNUQlMEElMjAlMjAlMjAlMjBpbnB1dHMlMjAlM0QlMjB0b2tlbml6ZXIoJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcXVlc3Rpb25zJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZXhhbXBsZXMlNUIlMjJjb250ZXh0JTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwbWF4X2xlbmd0aCUzRG1heF9sZW5ndGglMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjB0cnVuY2F0aW9uJTNEJTIyb25seV9zZWNvbmQlMjIlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdHJpZGUlM0RzdHJpZGUlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjByZXR1cm5fb3ZlcmZsb3dpbmdfdG9rZW5zJTNEVHJ1ZSUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHJldHVybl9vZmZzZXRzX21hcHBpbmclM0RUcnVlJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwcGFkZGluZyUzRCUyMm1heF9sZW5ndGglMjIlMkMlMEElMjAlMjAlMjAlMjApJTBBJTBBJTIwJTIwJTIwJTIwc2FtcGxlX21hcCUyMCUzRCUyMGlucHV0cy5wb3AoJTIyb3ZlcmZsb3dfdG9fc2FtcGxlX21hcHBpbmclMjIpJTBBJTIwJTIwJTIwJTIwZXhhbXBsZV9pZHMlMjAlM0QlMjAlNUIlNUQlMEElMEElMjAlMjAlMjAlMjBmb3IlMjBpJTIwaW4lMjByYW5nZShsZW4oaW5wdXRzJTVCJTIyaW5wdXRfaWRzJTIyJTVEKSklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzYW1wbGVfaWR4JTIwJTNEJTIwc2FtcGxlX21hcCU1QmklNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBleGFtcGxlX2lkcy5hcHBlbmQoZXhhbXBsZXMlNUIlMjJpZCUyMiU1RCU1QnNhbXBsZV9pZHglNUQpJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwc2VxdWVuY2VfaWRzJTIwJTNEJTIwaW5wdXRzLnNlcXVlbmNlX2lkcyhpKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG9mZnNldCUyMCUzRCUyMGlucHV0cyU1QiUyMm9mZnNldF9tYXBwaW5nJTIyJTVEJTVCaSU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlucHV0cyU1QiUyMm9mZnNldF9tYXBwaW5nJTIyJTVEJTVCaSU1RCUyMCUzRCUyMCU1QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG8lMjBpZiUyMHNlcXVlbmNlX2lkcyU1QmslNUQlMjAlM0QlM0QlMjAxJTIwZWxzZSUyME5vbmUlMjBmb3IlMjBrJTJDJTIwbyUyMGluJTIwZW51bWVyYXRlKG9mZnNldCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlNUQlMEElMEElMjAlMjAlMjAlMjBpbnB1dHMlNUIlMjJleGFtcGxlX2lkJTIyJTVEJTIwJTNEJTIwZXhhbXBsZV9pZHMlMEElMjAlMjAlMjAlMjByZXR1cm4lMjBpbnB1dHM=",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">preprocess_validation_examples</span>(<span class="hljs-params">examples</span>):
    questions = [q.strip() <span class="hljs-keyword">for</span> q <span class="hljs-keyword">in</span> examples[<span class="hljs-string">&quot;question&quot;</span>]]
    inputs = tokenizer(
        questions,
        examples[<span class="hljs-string">&quot;context&quot;</span>],
        max_length=max_length,
        truncation=<span class="hljs-string">&quot;only_second&quot;</span>,
        stride=stride,
        return_overflowing_tokens=<span class="hljs-literal">True</span>,
        return_offsets_mapping=<span class="hljs-literal">True</span>,
        padding=<span class="hljs-string">&quot;max_length&quot;</span>,
    )

    sample_map = inputs.pop(<span class="hljs-string">&quot;overflow_to_sample_mapping&quot;</span>)
    example_ids = []

    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])):
        sample_idx = sample_map[i]
        example_ids.append(examples[<span class="hljs-string">&quot;id&quot;</span>][sample_idx])

        sequence_ids = inputs.sequence_ids(i)
        offset = inputs[<span class="hljs-string">&quot;offset_mapping&quot;</span>][i]
        inputs[<span class="hljs-string">&quot;offset_mapping&quot;</span>][i] = [
            o <span class="hljs-keyword">if</span> sequence_ids[k] == <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">for</span> k, o <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(offset)
        ]

    inputs[<span class="hljs-string">&quot;example_id&quot;</span>] = example_ids
    <span class="hljs-keyword">return</span> inputs`,wrap:!1}}),dt=new b({props:{code:"dmFsaWRhdGlvbl9kYXRhc2V0JTIwJTNEJTIwcmF3X2RhdGFzZXRzJTVCJTIydmFsaWRhdGlvbiUyMiU1RC5tYXAoJTBBJTIwJTIwJTIwJTIwcHJlcHJvY2Vzc192YWxpZGF0aW9uX2V4YW1wbGVzJTJDJTBBJTIwJTIwJTIwJTIwYmF0Y2hlZCUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjByZW1vdmVfY29sdW1ucyUzRHJhd19kYXRhc2V0cyU1QiUyMnZhbGlkYXRpb24lMjIlNUQuY29sdW1uX25hbWVzJTJDJTBBKSUwQWxlbihyYXdfZGF0YXNldHMlNUIlMjJ2YWxpZGF0aW9uJTIyJTVEKSUyQyUyMGxlbih2YWxpZGF0aW9uX2RhdGFzZXQp",highlighted:`validation_dataset = raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].<span class="hljs-built_in">map</span>(
    preprocess_validation_examples,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].column_names,
)
<span class="hljs-built_in">len</span>(raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>]), <span class="hljs-built_in">len</span>(validation_dataset)`,wrap:!1}}),wt=new b({props:{code:"KDEwNTcwJTJDJTIwMTA4MjIp",highlighted:'(<span class="hljs-number">10570</span>, <span class="hljs-number">10822</span>)',wrap:!1}});const cM=[qM,SM],rs=[];function dM(e,t){return e[0]==="pt"?0:1}ue=dM(k),me=rs[ue]=cM[ue](k),ut=new q({props:{title:"Post-processing",local:"post-processing",headingTag:"h3"}});const wM=[DM,LM],ys=[];function hM(e,t){return e[0]==="pt"?0:1}Ue=hM(k),Te=ys[Ue]=wM[Ue](k),jt=new b({props:{code:"c21hbGxfZXZhbF9zZXQlMjAlM0QlMjByYXdfZGF0YXNldHMlNUIlMjJ2YWxpZGF0aW9uJTIyJTVELnNlbGVjdChyYW5nZSgxMDApKSUwQXRyYWluZWRfY2hlY2twb2ludCUyMCUzRCUyMCUyMmRpc3RpbGJlcnQtYmFzZS1jYXNlZC1kaXN0aWxsZWQtc3F1YWQlMjIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCh0cmFpbmVkX2NoZWNrcG9pbnQpJTBBZXZhbF9zZXQlMjAlM0QlMjBzbWFsbF9ldmFsX3NldC5tYXAoJTBBJTIwJTIwJTIwJTIwcHJlcHJvY2Vzc192YWxpZGF0aW9uX2V4YW1wbGVzJTJDJTBBJTIwJTIwJTIwJTIwYmF0Y2hlZCUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjByZW1vdmVfY29sdW1ucyUzRHJhd19kYXRhc2V0cyU1QiUyMnZhbGlkYXRpb24lMjIlNUQuY29sdW1uX25hbWVzJTJDJTBBKQ==",highlighted:`small_eval_set = raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].select(<span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>))
trained_checkpoint = <span class="hljs-string">&quot;distilbert-base-cased-distilled-squad&quot;</span>

tokenizer = AutoTokenizer.from_pretrained(trained_checkpoint)
eval_set = small_eval_set.<span class="hljs-built_in">map</span>(
    preprocess_validation_examples,
    batched=<span class="hljs-literal">True</span>,
    remove_columns=raw_datasets[<span class="hljs-string">&quot;validation&quot;</span>].column_names,
)`,wrap:!1}}),ft=new b({props:{code:"dG9rZW5pemVyJTIwJTNEJTIwQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQobW9kZWxfY2hlY2twb2ludCk=",highlighted:"tokenizer = AutoTokenizer.from_pretrained(model_checkpoint)",wrap:!1}});const JM=[PM,KM],cs=[];function uM(e,t){return e[0]==="pt"?0:1}je=uM(k),be=cs[je]=JM[je](k),gt=new b({props:{code:"aW1wb3J0JTIwY29sbGVjdGlvbnMlMEElMEFleGFtcGxlX3RvX2ZlYXR1cmVzJTIwJTNEJTIwY29sbGVjdGlvbnMuZGVmYXVsdGRpY3QobGlzdCklMEFmb3IlMjBpZHglMkMlMjBmZWF0dXJlJTIwaW4lMjBlbnVtZXJhdGUoZXZhbF9zZXQpJTNBJTBBJTIwJTIwJTIwJTIwZXhhbXBsZV90b19mZWF0dXJlcyU1QmZlYXR1cmUlNUIlMjJleGFtcGxlX2lkJTIyJTVEJTVELmFwcGVuZChpZHgp",highlighted:`<span class="hljs-keyword">import</span> collections

example_to_features = collections.defaultdict(<span class="hljs-built_in">list</span>)
<span class="hljs-keyword">for</span> idx, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(eval_set):
    example_to_features[feature[<span class="hljs-string">&quot;example_id&quot;</span>]].append(idx)`,wrap:!1}}),kt=new b({props:{code:"aW1wb3J0JTIwbnVtcHklMjBhcyUyMG5wJTBBJTBBbl9iZXN0JTIwJTNEJTIwMjAlMEFtYXhfYW5zd2VyX2xlbmd0aCUyMCUzRCUyMDMwJTBBcHJlZGljdGVkX2Fuc3dlcnMlMjAlM0QlMjAlNUIlNUQlMEElMEFmb3IlMjBleGFtcGxlJTIwaW4lMjBzbWFsbF9ldmFsX3NldCUzQSUwQSUyMCUyMCUyMCUyMGV4YW1wbGVfaWQlMjAlM0QlMjBleGFtcGxlJTVCJTIyaWQlMjIlNUQlMEElMjAlMjAlMjAlMjBjb250ZXh0JTIwJTNEJTIwZXhhbXBsZSU1QiUyMmNvbnRleHQlMjIlNUQlMEElMjAlMjAlMjAlMjBhbnN3ZXJzJTIwJTNEJTIwJTVCJTVEJTBBJTBBJTIwJTIwJTIwJTIwZm9yJTIwZmVhdHVyZV9pbmRleCUyMGluJTIwZXhhbXBsZV90b19mZWF0dXJlcyU1QmV4YW1wbGVfaWQlNUQlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdGFydF9sb2dpdCUyMCUzRCUyMHN0YXJ0X2xvZ2l0cyU1QmZlYXR1cmVfaW5kZXglNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfbG9naXQlMjAlM0QlMjBlbmRfbG9naXRzJTVCZmVhdHVyZV9pbmRleCU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG9mZnNldHMlMjAlM0QlMjBldmFsX3NldCU1QiUyMm9mZnNldF9tYXBwaW5nJTIyJTVEJTVCZmVhdHVyZV9pbmRleCU1RCUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHN0YXJ0X2luZGV4ZXMlMjAlM0QlMjBucC5hcmdzb3J0KHN0YXJ0X2xvZ2l0KSU1Qi0xJTIwJTNBJTIwLW5fYmVzdCUyMC0lMjAxJTIwJTNBJTIwLTElNUQudG9saXN0KCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfaW5kZXhlcyUyMCUzRCUyMG5wLmFyZ3NvcnQoZW5kX2xvZ2l0KSU1Qi0xJTIwJTNBJTIwLW5fYmVzdCUyMC0lMjAxJTIwJTNBJTIwLTElNUQudG9saXN0KCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmb3IlMjBzdGFydF9pbmRleCUyMGluJTIwc3RhcnRfaW5kZXhlcyUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZvciUyMGVuZF9pbmRleCUyMGluJTIwZW5kX2luZGV4ZXMlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBTa2lwJTIwYW5zd2VycyUyMHRoYXQlMjBhcmUlMjBub3QlMjBmdWxseSUyMGluJTIwdGhlJTIwY29udGV4dCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwb2Zmc2V0cyU1QnN0YXJ0X2luZGV4JTVEJTIwaXMlMjBOb25lJTIwb3IlMjBvZmZzZXRzJTVCZW5kX2luZGV4JTVEJTIwaXMlMjBOb25lJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY29udGludWUlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBTa2lwJTIwYW5zd2VycyUyMHdpdGglMjBhJTIwbGVuZ3RoJTIwdGhhdCUyMGlzJTIwZWl0aGVyJTIwJTNDJTIwMCUyMG9yJTIwJTNFJTIwbWF4X2Fuc3dlcl9sZW5ndGguJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwaWYlMjAoJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZW5kX2luZGV4JTIwJTNDJTIwc3RhcnRfaW5kZXglMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBvciUyMGVuZF9pbmRleCUyMC0lMjBzdGFydF9pbmRleCUyMCUyQiUyMDElMjAlM0UlMjBtYXhfYW5zd2VyX2xlbmd0aCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBjb250aW51ZSUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGFuc3dlcnMuYXBwZW5kKCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMnRleHQlMjIlM0ElMjBjb250ZXh0JTVCb2Zmc2V0cyU1QnN0YXJ0X2luZGV4JTVEJTVCMCU1RCUyMCUzQSUyMG9mZnNldHMlNUJlbmRfaW5kZXglNUQlNUIxJTVEJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIybG9naXRfc2NvcmUlMjIlM0ElMjBzdGFydF9sb2dpdCU1QnN0YXJ0X2luZGV4JTVEJTIwJTJCJTIwZW5kX2xvZ2l0JTVCZW5kX2luZGV4JTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwKSUwQSUwQSUyMCUyMCUyMCUyMGJlc3RfYW5zd2VyJTIwJTNEJTIwbWF4KGFuc3dlcnMlMkMlMjBrZXklM0RsYW1iZGElMjB4JTNBJTIweCU1QiUyMmxvZ2l0X3Njb3JlJTIyJTVEKSUwQSUyMCUyMCUyMCUyMHByZWRpY3RlZF9hbnN3ZXJzLmFwcGVuZCglN0IlMjJpZCUyMiUzQSUyMGV4YW1wbGVfaWQlMkMlMjAlMjJwcmVkaWN0aW9uX3RleHQlMjIlM0ElMjBiZXN0X2Fuc3dlciU1QiUyMnRleHQlMjIlNUQlN0Qp",highlighted:`<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np

n_best = <span class="hljs-number">20</span>
max_answer_length = <span class="hljs-number">30</span>
predicted_answers = []

<span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> small_eval_set:
    example_id = example[<span class="hljs-string">&quot;id&quot;</span>]
    context = example[<span class="hljs-string">&quot;context&quot;</span>]
    answers = []

    <span class="hljs-keyword">for</span> feature_index <span class="hljs-keyword">in</span> example_to_features[example_id]:
        start_logit = start_logits[feature_index]
        end_logit = end_logits[feature_index]
        offsets = eval_set[<span class="hljs-string">&quot;offset_mapping&quot;</span>][feature_index]

        start_indexes = np.argsort(start_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
        end_indexes = np.argsort(end_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
        <span class="hljs-keyword">for</span> start_index <span class="hljs-keyword">in</span> start_indexes:
            <span class="hljs-keyword">for</span> end_index <span class="hljs-keyword">in</span> end_indexes:
                <span class="hljs-comment"># Skip answers that are not fully in the context</span>
                <span class="hljs-keyword">if</span> offsets[start_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> offsets[end_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:
                    <span class="hljs-keyword">continue</span>
                <span class="hljs-comment"># Skip answers with a length that is either &lt; 0 or &gt; max_answer_length.</span>
                <span class="hljs-keyword">if</span> (
                    end_index &lt; start_index
                    <span class="hljs-keyword">or</span> end_index - start_index + <span class="hljs-number">1</span> &gt; max_answer_length
                ):
                    <span class="hljs-keyword">continue</span>

                answers.append(
                    {
                        <span class="hljs-string">&quot;text&quot;</span>: context[offsets[start_index][<span class="hljs-number">0</span>] : offsets[end_index][<span class="hljs-number">1</span>]],
                        <span class="hljs-string">&quot;logit_score&quot;</span>: start_logit[start_index] + end_logit[end_index],
                    }
                )

    best_answer = <span class="hljs-built_in">max</span>(answers, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;logit_score&quot;</span>])
    predicted_answers.append({<span class="hljs-string">&quot;id&quot;</span>: example_id, <span class="hljs-string">&quot;prediction_text&quot;</span>: best_answer[<span class="hljs-string">&quot;text&quot;</span>]})`,wrap:!1}}),xt=new b({props:{code:"aW1wb3J0JTIwZXZhbHVhdGUlMEElMEFtZXRyaWMlMjAlM0QlMjBldmFsdWF0ZS5sb2FkKCUyMnNxdWFkJTIyKQ==",highlighted:`<span class="hljs-keyword">import</span> evaluate

metric = evaluate.load(<span class="hljs-string">&quot;squad&quot;</span>)`,wrap:!1}}),At=new b({props:{code:"dGhlb3JldGljYWxfYW5zd2VycyUyMCUzRCUyMCU1QiUwQSUyMCUyMCUyMCUyMCU3QiUyMmlkJTIyJTNBJTIwZXglNUIlMjJpZCUyMiU1RCUyQyUyMCUyMmFuc3dlcnMlMjIlM0ElMjBleCU1QiUyMmFuc3dlcnMlMjIlNUQlN0QlMjBmb3IlMjBleCUyMGluJTIwc21hbGxfZXZhbF9zZXQlMEElNUQ=",highlighted:`theoretical_answers = [
    {<span class="hljs-string">&quot;id&quot;</span>: ex[<span class="hljs-string">&quot;id&quot;</span>], <span class="hljs-string">&quot;answers&quot;</span>: ex[<span class="hljs-string">&quot;answers&quot;</span>]} <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> small_eval_set
]`,wrap:!1}}),Xt=new b({props:{code:"cHJpbnQocHJlZGljdGVkX2Fuc3dlcnMlNUIwJTVEKSUwQXByaW50KHRoZW9yZXRpY2FsX2Fuc3dlcnMlNUIwJTVEKQ==",highlighted:`<span class="hljs-built_in">print</span>(predicted_answers[<span class="hljs-number">0</span>])
<span class="hljs-built_in">print</span>(theoretical_answers[<span class="hljs-number">0</span>])`,wrap:!1}}),Rt=new b({props:{code:"JTdCJ2lkJyUzQSUyMCc1NmJlNGRiMGFjYjgwMDE0MDBhNTAyZWMnJTJDJTIwJ3ByZWRpY3Rpb25fdGV4dCclM0ElMjAnRGVudmVyJTIwQnJvbmNvcyclN0QlMEElN0InaWQnJTNBJTIwJzU2YmU0ZGIwYWNiODAwMTQwMGE1MDJlYyclMkMlMjAnYW5zd2VycyclM0ElMjAlN0IndGV4dCclM0ElMjAlNUInRGVudmVyJTIwQnJvbmNvcyclMkMlMjAnRGVudmVyJTIwQnJvbmNvcyclMkMlMjAnRGVudmVyJTIwQnJvbmNvcyclNUQlMkMlMjAnYW5zd2VyX3N0YXJ0JyUzQSUyMCU1QjE3NyUyQyUyMDE3NyUyQyUyMDE3NyU1RCU3RCU3RA==",highlighted:`{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;56be4db0acb8001400a502ec&#x27;</span>, <span class="hljs-string">&#x27;prediction_text&#x27;</span>: <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>}
{<span class="hljs-string">&#x27;id&#x27;</span>: <span class="hljs-string">&#x27;56be4db0acb8001400a502ec&#x27;</span>, <span class="hljs-string">&#x27;answers&#x27;</span>: {<span class="hljs-string">&#x27;text&#x27;</span>: [<span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>, <span class="hljs-string">&#x27;Denver Broncos&#x27;</span>], <span class="hljs-string">&#x27;answer_start&#x27;</span>: [<span class="hljs-number">177</span>, <span class="hljs-number">177</span>, <span class="hljs-number">177</span>]}}`,wrap:!1}}),$t=new b({props:{code:"bWV0cmljLmNvbXB1dGUocHJlZGljdGlvbnMlM0RwcmVkaWN0ZWRfYW5zd2VycyUyQyUyMHJlZmVyZW5jZXMlM0R0aGVvcmV0aWNhbF9hbnN3ZXJzKQ==",highlighted:"metric.compute(predictions=predicted_answers, references=theoretical_answers)",wrap:!1}}),Nt=new b({props:{code:"JTdCJ2V4YWN0X21hdGNoJyUzQSUyMDgzLjAlMkMlMjAnZjEnJTNBJTIwODguMjUlN0Q=",highlighted:'{<span class="hljs-string">&#x27;exact_match&#x27;</span>: <span class="hljs-number">83.0</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">88.25</span>}',wrap:!1}});function mM(e,t){return e[0]==="pt"?eo:OM}let Qn=mM(k),De=Qn(k);Ft=new b({props:{code:"ZnJvbSUyMHRxZG0uYXV0byUyMGltcG9ydCUyMHRxZG0lMEElMEElMEFkZWYlMjBjb21wdXRlX21ldHJpY3Moc3RhcnRfbG9naXRzJTJDJTIwZW5kX2xvZ2l0cyUyQyUyMGZlYXR1cmVzJTJDJTIwZXhhbXBsZXMpJTNBJTBBJTIwJTIwJTIwJTIwZXhhbXBsZV90b19mZWF0dXJlcyUyMCUzRCUyMGNvbGxlY3Rpb25zLmRlZmF1bHRkaWN0KGxpc3QpJTBBJTIwJTIwJTIwJTIwZm9yJTIwaWR4JTJDJTIwZmVhdHVyZSUyMGluJTIwZW51bWVyYXRlKGZlYXR1cmVzKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGV4YW1wbGVfdG9fZmVhdHVyZXMlNUJmZWF0dXJlJTVCJTIyZXhhbXBsZV9pZCUyMiU1RCU1RC5hcHBlbmQoaWR4KSUwQSUwQSUyMCUyMCUyMCUyMHByZWRpY3RlZF9hbnN3ZXJzJTIwJTNEJTIwJTVCJTVEJTBBJTIwJTIwJTIwJTIwZm9yJTIwZXhhbXBsZSUyMGluJTIwdHFkbShleGFtcGxlcyklM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBleGFtcGxlX2lkJTIwJTNEJTIwZXhhbXBsZSU1QiUyMmlkJTIyJTVEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY29udGV4dCUyMCUzRCUyMGV4YW1wbGUlNUIlMjJjb250ZXh0JTIyJTVEJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYW5zd2VycyUyMCUzRCUyMCU1QiU1RCUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMyUyMExvb3AlMjB0aHJvdWdoJTIwYWxsJTIwZmVhdHVyZXMlMjBhc3NvY2lhdGVkJTIwd2l0aCUyMHRoYXQlMjBleGFtcGxlJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZm9yJTIwZmVhdHVyZV9pbmRleCUyMGluJTIwZXhhbXBsZV90b19mZWF0dXJlcyU1QmV4YW1wbGVfaWQlNUQlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBzdGFydF9sb2dpdCUyMCUzRCUyMHN0YXJ0X2xvZ2l0cyU1QmZlYXR1cmVfaW5kZXglNUQlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfbG9naXQlMjAlM0QlMjBlbmRfbG9naXRzJTVCZmVhdHVyZV9pbmRleCU1RCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG9mZnNldHMlMjAlM0QlMjBmZWF0dXJlcyU1QmZlYXR1cmVfaW5kZXglNUQlNUIlMjJvZmZzZXRfbWFwcGluZyUyMiU1RCUwQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHN0YXJ0X2luZGV4ZXMlMjAlM0QlMjBucC5hcmdzb3J0KHN0YXJ0X2xvZ2l0KSU1Qi0xJTIwJTNBJTIwLW5fYmVzdCUyMC0lMjAxJTIwJTNBJTIwLTElNUQudG9saXN0KCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfaW5kZXhlcyUyMCUzRCUyMG5wLmFyZ3NvcnQoZW5kX2xvZ2l0KSU1Qi0xJTIwJTNBJTIwLW5fYmVzdCUyMC0lMjAxJTIwJTNBJTIwLTElNUQudG9saXN0KCklMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmb3IlMjBzdGFydF9pbmRleCUyMGluJTIwc3RhcnRfaW5kZXhlcyUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZvciUyMGVuZF9pbmRleCUyMGluJTIwZW5kX2luZGV4ZXMlM0ElMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBTa2lwJTIwYW5zd2VycyUyMHRoYXQlMjBhcmUlMjBub3QlMjBmdWxseSUyMGluJTIwdGhlJTIwY29udGV4dCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwb2Zmc2V0cyU1QnN0YXJ0X2luZGV4JTVEJTIwaXMlMjBOb25lJTIwb3IlMjBvZmZzZXRzJTVCZW5kX2luZGV4JTVEJTIwaXMlMjBOb25lJTNBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwY29udGludWUlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjMlMjBTa2lwJTIwYW5zd2VycyUyMHdpdGglMjBhJTIwbGVuZ3RoJTIwdGhhdCUyMGlzJTIwZWl0aGVyJTIwJTNDJTIwMCUyMG9yJTIwJTNFJTIwbWF4X2Fuc3dlcl9sZW5ndGglMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBpZiUyMCglMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBlbmRfaW5kZXglMjAlM0MlMjBzdGFydF9pbmRleCUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG9yJTIwZW5kX2luZGV4JTIwLSUyMHN0YXJ0X2luZGV4JTIwJTJCJTIwMSUyMCUzRSUyMG1heF9hbnN3ZXJfbGVuZ3RoJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwKSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGNvbnRpbnVlJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwYW5zd2VyJTIwJTNEJTIwJTdCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIydGV4dCUyMiUzQSUyMGNvbnRleHQlNUJvZmZzZXRzJTVCc3RhcnRfaW5kZXglNUQlNUIwJTVEJTIwJTNBJTIwb2Zmc2V0cyU1QmVuZF9pbmRleCU1RCU1QjElNUQlNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJsb2dpdF9zY29yZSUyMiUzQSUyMHN0YXJ0X2xvZ2l0JTVCc3RhcnRfaW5kZXglNUQlMjAlMkIlMjBlbmRfbG9naXQlNUJlbmRfaW5kZXglNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlN0QlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBhbnN3ZXJzLmFwcGVuZChhbnN3ZXIpJTBBJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIzJTIwU2VsZWN0JTIwdGhlJTIwYW5zd2VyJTIwd2l0aCUyMHRoZSUyMGJlc3QlMjBzY29yZSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGlmJTIwbGVuKGFuc3dlcnMpJTIwJTNFJTIwMCUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGJlc3RfYW5zd2VyJTIwJTNEJTIwbWF4KGFuc3dlcnMlMkMlMjBrZXklM0RsYW1iZGElMjB4JTNBJTIweCU1QiUyMmxvZ2l0X3Njb3JlJTIyJTVEKSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHByZWRpY3RlZF9hbnN3ZXJzLmFwcGVuZCglMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlN0IlMjJpZCUyMiUzQSUyMGV4YW1wbGVfaWQlMkMlMjAlMjJwcmVkaWN0aW9uX3RleHQlMjIlM0ElMjBiZXN0X2Fuc3dlciU1QiUyMnRleHQlMjIlNUQlN0QlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjApJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZWxzZSUzQSUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMHByZWRpY3RlZF9hbnN3ZXJzLmFwcGVuZCglN0IlMjJpZCUyMiUzQSUyMGV4YW1wbGVfaWQlMkMlMjAlMjJwcmVkaWN0aW9uX3RleHQlMjIlM0ElMjAlMjIlMjIlN0QpJTBBJTBBJTIwJTIwJTIwJTIwdGhlb3JldGljYWxfYW5zd2VycyUyMCUzRCUyMCU1QiU3QiUyMmlkJTIyJTNBJTIwZXglNUIlMjJpZCUyMiU1RCUyQyUyMCUyMmFuc3dlcnMlMjIlM0ElMjBleCU1QiUyMmFuc3dlcnMlMjIlNUQlN0QlMjBmb3IlMjBleCUyMGluJTIwZXhhbXBsZXMlNUQlMEElMjAlMjAlMjAlMjByZXR1cm4lMjBtZXRyaWMuY29tcHV0ZShwcmVkaWN0aW9ucyUzRHByZWRpY3RlZF9hbnN3ZXJzJTJDJTIwcmVmZXJlbmNlcyUzRHRoZW9yZXRpY2FsX2Fuc3dlcnMp",highlighted:`<span class="hljs-keyword">from</span> tqdm.auto <span class="hljs-keyword">import</span> tqdm


<span class="hljs-keyword">def</span> <span class="hljs-title function_">compute_metrics</span>(<span class="hljs-params">start_logits, end_logits, features, examples</span>):
    example_to_features = collections.defaultdict(<span class="hljs-built_in">list</span>)
    <span class="hljs-keyword">for</span> idx, feature <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(features):
        example_to_features[feature[<span class="hljs-string">&quot;example_id&quot;</span>]].append(idx)

    predicted_answers = []
    <span class="hljs-keyword">for</span> example <span class="hljs-keyword">in</span> tqdm(examples):
        example_id = example[<span class="hljs-string">&quot;id&quot;</span>]
        context = example[<span class="hljs-string">&quot;context&quot;</span>]
        answers = []

        <span class="hljs-comment"># Loop through all features associated with that example</span>
        <span class="hljs-keyword">for</span> feature_index <span class="hljs-keyword">in</span> example_to_features[example_id]:
            start_logit = start_logits[feature_index]
            end_logit = end_logits[feature_index]
            offsets = features[feature_index][<span class="hljs-string">&quot;offset_mapping&quot;</span>]

            start_indexes = np.argsort(start_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
            end_indexes = np.argsort(end_logit)[-<span class="hljs-number">1</span> : -n_best - <span class="hljs-number">1</span> : -<span class="hljs-number">1</span>].tolist()
            <span class="hljs-keyword">for</span> start_index <span class="hljs-keyword">in</span> start_indexes:
                <span class="hljs-keyword">for</span> end_index <span class="hljs-keyword">in</span> end_indexes:
                    <span class="hljs-comment"># Skip answers that are not fully in the context</span>
                    <span class="hljs-keyword">if</span> offsets[start_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span> <span class="hljs-keyword">or</span> offsets[end_index] <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:
                        <span class="hljs-keyword">continue</span>
                    <span class="hljs-comment"># Skip answers with a length that is either &lt; 0 or &gt; max_answer_length</span>
                    <span class="hljs-keyword">if</span> (
                        end_index &lt; start_index
                        <span class="hljs-keyword">or</span> end_index - start_index + <span class="hljs-number">1</span> &gt; max_answer_length
                    ):
                        <span class="hljs-keyword">continue</span>

                    answer = {
                        <span class="hljs-string">&quot;text&quot;</span>: context[offsets[start_index][<span class="hljs-number">0</span>] : offsets[end_index][<span class="hljs-number">1</span>]],
                        <span class="hljs-string">&quot;logit_score&quot;</span>: start_logit[start_index] + end_logit[end_index],
                    }
                    answers.append(answer)

        <span class="hljs-comment"># Select the answer with the best score</span>
        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(answers) &gt; <span class="hljs-number">0</span>:
            best_answer = <span class="hljs-built_in">max</span>(answers, key=<span class="hljs-keyword">lambda</span> x: x[<span class="hljs-string">&quot;logit_score&quot;</span>])
            predicted_answers.append(
                {<span class="hljs-string">&quot;id&quot;</span>: example_id, <span class="hljs-string">&quot;prediction_text&quot;</span>: best_answer[<span class="hljs-string">&quot;text&quot;</span>]}
            )
        <span class="hljs-keyword">else</span>:
            predicted_answers.append({<span class="hljs-string">&quot;id&quot;</span>: example_id, <span class="hljs-string">&quot;prediction_text&quot;</span>: <span class="hljs-string">&quot;&quot;</span>})

    theoretical_answers = [{<span class="hljs-string">&quot;id&quot;</span>: ex[<span class="hljs-string">&quot;id&quot;</span>], <span class="hljs-string">&quot;answers&quot;</span>: ex[<span class="hljs-string">&quot;answers&quot;</span>]} <span class="hljs-keyword">for</span> ex <span class="hljs-keyword">in</span> examples]
    <span class="hljs-keyword">return</span> metric.compute(predictions=predicted_answers, references=theoretical_answers)`,wrap:!1}}),Yt=new b({props:{code:"Y29tcHV0ZV9tZXRyaWNzKHN0YXJ0X2xvZ2l0cyUyQyUyMGVuZF9sb2dpdHMlMkMlMjBldmFsX3NldCUyQyUyMHNtYWxsX2V2YWxfc2V0KQ==",highlighted:"compute_metrics(start_logits, end_logits, eval_set, small_eval_set)",wrap:!1}}),zt=new b({props:{code:"JTdCJ2V4YWN0X21hdGNoJyUzQSUyMDgzLjAlMkMlMjAnZjEnJTNBJTIwODguMjUlN0Q=",highlighted:'{<span class="hljs-string">&#x27;exact_match&#x27;</span>: <span class="hljs-number">83.0</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">88.25</span>}',wrap:!1}}),St=new q({props:{title:"Fine-tuning the model",local:"fine-tuning-the-model",headingTag:"h3"}});const UM=[to,lo],ds=[];function TM(e,t){return e[0]==="pt"?0:1}fe=TM(k),Ie=ds[fe]=UM[fe](k),Dt=new b({props:{code:"ZnJvbSUyMGh1Z2dpbmdmYWNlX2h1YiUyMGltcG9ydCUyMG5vdGVib29rX2xvZ2luJTBBJTBBbm90ZWJvb2tfbG9naW4oKQ==",highlighted:`<span class="hljs-keyword">from</span> huggingface_hub <span class="hljs-keyword">import</span> notebook_login

notebook_login()`,wrap:!1}}),Pt=new b({props:{code:"aHVnZ2luZ2ZhY2UtY2xpJTIwbG9naW4=",highlighted:"huggingface-cli login",wrap:!1}});const jM=[ao,so],ws=[];function bM(e,t){return e[0]==="pt"?0:1}Ce=bM(k),ge=ws[Ce]=jM[Ce](k);const fM=[io,no],hs=[];function IM(e,t){return e[0]==="pt"?0:1}Ze=IM(k),Ge=hs[Ze]=fM[Ze](k);const CM=[po,oo],Js=[];function gM(e,t){return e[0]==="pt"?0:1}Be=gM(k),ke=Js[Be]=CM[Be](k),ls=new b({props:{code:"JTdCJ2V4YWN0X21hdGNoJyUzQSUyMDgxLjE4MjU5MjI0MjE5NDg5JTJDJTIwJ2YxJyUzQSUyMDg4LjY3MzgxMzIxOTA1NTE2JTdE",highlighted:'{<span class="hljs-string">&#x27;exact_match&#x27;</span>: <span class="hljs-number">81.18259224219489</span>, <span class="hljs-string">&#x27;f1&#x27;</span>: <span class="hljs-number">88.67381321905516</span>}',wrap:!1}});let R=k[0]==="pt"&&kM();el=new En({props:{$$slots:{default:[ro]},$$scope:{ctx:k}}});let v=k[0]==="pt"&&_M();return as=new q({props:{title:"Using the fine-tuned model",local:"using-the-fine-tuned-model",headingTag:"h2"}}),is=new b({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMHBpcGVsaW5lJTBBJTBBJTIzJTIwUmVwbGFjZSUyMHRoaXMlMjB3aXRoJTIweW91ciUyMG93biUyMGNoZWNrcG9pbnQlMEFtb2RlbF9jaGVja3BvaW50JTIwJTNEJTIwJTIyaHVnZ2luZ2ZhY2UtY291cnNlJTJGYmVydC1maW5ldHVuZWQtc3F1YWQlMjIlMEFxdWVzdGlvbl9hbnN3ZXJlciUyMCUzRCUyMHBpcGVsaW5lKCUyMnF1ZXN0aW9uLWFuc3dlcmluZyUyMiUyQyUyMG1vZGVsJTNEbW9kZWxfY2hlY2twb2ludCklMEElMEFjb250ZXh0JTIwJTNEJTIwJTIyJTIyJTIyJTBBJUYwJTlGJUE0JTk3JTIwVHJhbnNmb3JtZXJzJTIwaXMlMjBiYWNrZWQlMjBieSUyMHRoZSUyMHRocmVlJTIwbW9zdCUyMHBvcHVsYXIlMjBkZWVwJTIwbGVhcm5pbmclMjBsaWJyYXJpZXMlMjAlRTIlODAlOTQlMjBKYXglMkMlMjBQeVRvcmNoJTIwYW5kJTIwVGVuc29yRmxvdyUyMCVFMiU4MCU5NCUyMHdpdGglMjBhJTIwc2VhbWxlc3MlMjBpbnRlZ3JhdGlvbiUwQWJldHdlZW4lMjB0aGVtLiUyMEl0J3MlMjBzdHJhaWdodGZvcndhcmQlMjB0byUyMHRyYWluJTIweW91ciUyMG1vZGVscyUyMHdpdGglMjBvbmUlMjBiZWZvcmUlMjBsb2FkaW5nJTIwdGhlbSUyMGZvciUyMGluZmVyZW5jZSUyMHdpdGglMjB0aGUlMjBvdGhlci4lMEElMjIlMjIlMjIlMEFxdWVzdGlvbiUyMCUzRCUyMCUyMldoaWNoJTIwZGVlcCUyMGxlYXJuaW5nJTIwbGlicmFyaWVzJTIwYmFjayUyMCVGMCU5RiVBNCU5NyUyMFRyYW5zZm9ybWVycyUzRiUyMiUwQXF1ZXN0aW9uX2Fuc3dlcmVyKHF1ZXN0aW9uJTNEcXVlc3Rpb24lMkMlMjBjb250ZXh0JTNEY29udGV4dCk=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> pipeline

<span class="hljs-comment"># Replace this with your own checkpoint</span>
model_checkpoint = <span class="hljs-string">&quot;huggingface-course/bert-finetuned-squad&quot;</span>
question_answerer = pipeline(<span class="hljs-string">&quot;question-answering&quot;</span>, model=model_checkpoint)

context = <span class="hljs-string">&quot;&quot;&quot;
ü§ó Transformers is backed by the three most popular deep learning libraries ‚Äî Jax, PyTorch and TensorFlow ‚Äî with a seamless integration
between them. It&#x27;s straightforward to train your models with one before loading them for inference with the other.
&quot;&quot;&quot;</span>
question = <span class="hljs-string">&quot;Which deep learning libraries back ü§ó Transformers?&quot;</span>
question_answerer(question=question, context=context)`,wrap:!1}}),Ms=new b({props:{code:"JTdCJ3Njb3JlJyUzQSUyMDAuOTk3OTAwMzA3MTc4NDk3MyUyQyUwQSUyMCdzdGFydCclM0ElMjA3OCUyQyUwQSUyMCdlbmQnJTNBJTIwMTA1JTJDJTBBJTIwJ2Fuc3dlciclM0ElMjAnSmF4JTJDJTIwUHlUb3JjaCUyMGFuZCUyMFRlbnNvckZsb3cnJTdE",highlighted:`{<span class="hljs-string">&#x27;score&#x27;</span>: <span class="hljs-number">0.9979003071784973</span>,
 <span class="hljs-string">&#x27;start&#x27;</span>: <span class="hljs-number">78</span>,
 <span class="hljs-string">&#x27;end&#x27;</span>: <span class="hljs-number">105</span>,
 <span class="hljs-string">&#x27;answer&#x27;</span>: <span class="hljs-string">&#x27;Jax, PyTorch and TensorFlow&#x27;</span>}`,wrap:!1}}),{c(){i=c("meta"),T=a(),M=c("p"),h=a(),J(f.$$.fragment),p=a(),J(I.$$.fragment),j=a(),x.c(),_=a(),V=c("p"),V.innerHTML=X,Z=a(),J(G.$$.fragment),A=a(),H=c("p"),H.innerHTML=L,B=a(),W=c("iframe"),ll=a(),D=c("p"),D.innerHTML=xe,Ye=a(),J($.$$.fragment),tl=a(),J(K.$$.fragment),P=a(),O=c("p"),O.innerHTML=We,sl=a(),J(ee.$$.fragment),le=a(),te=c("p"),te.innerHTML=Ae,al=a(),J(se.$$.fragment),ae=a(),ne=c("p"),ne.textContent=Ve,ze=a(),J(N.$$.fragment),nl=a(),J(ie.$$.fragment),Me=a(),oe=c("p"),oe.innerHTML=Xe,il=a(),J(pe.$$.fragment),re=a(),J(ye.$$.fragment),ce=a(),Re=c("p"),Re.innerHTML=Ml,de=a(),ve=c("p"),ve.innerHTML=ol,we=a(),J($e.$$.fragment),He=a(),J(Q.$$.fragment),Se=a(),F=c("p"),F.textContent=ks,qe=a(),J(E.$$.fragment),Le=a(),J(Y.$$.fragment),pl=a(),he=c("p"),he.textContent=Ne,rl=a(),J(Je.$$.fragment),o=a(),J(C.$$.fragment),As=a(),yl=c("p"),yl.textContent=ai,Vs=a(),J(cl.$$.fragment),Xs=a(),J(dl.$$.fragment),Rs=a(),wl=c("p"),wl.textContent=ni,vs=a(),hl=c("p"),hl.textContent=ii,$s=a(),J(Jl.$$.fragment),Ns=a(),ul=c("p"),ul.innerHTML=Mi,Qs=a(),J(ml.$$.fragment),Fs=a(),J(Ul.$$.fragment),Es=a(),Tl=c("p"),Tl.textContent=oi,Ys=a(),J(jl.$$.fragment),zs=a(),bl=c("p"),bl.textContent=pi,Hs=a(),J(fl.$$.fragment),Ss=a(),J(Il.$$.fragment),qs=a(),Cl=c("p"),Cl.textContent=ri,Ls=a(),Pe=c("div"),Pe.innerHTML=yi,Ds=a(),gl=c("p"),gl.innerHTML=ci,Ks=a(),Zl=c("p"),Zl.textContent=di,Ps=a(),Gl=c("ul"),Gl.innerHTML=wi,Os=a(),J(Bl.$$.fragment),ea=a(),J(kl.$$.fragment),la=a(),_l=c("p"),_l.innerHTML=hi,ta=a(),xl=c("p"),xl.innerHTML=Ji,sa=a(),J(Wl.$$.fragment),aa=a(),J(Al.$$.fragment),na=a(),Vl=c("p"),Vl.innerHTML=ui,ia=a(),J(Xl.$$.fragment),Ma=a(),J(Rl.$$.fragment),oa=a(),vl=c("p"),vl.textContent=mi,pa=a(),J($l.$$.fragment),ra=a(),J(Nl.$$.fragment),ya=a(),Ql=c("p"),Ql.textContent=Ui,ca=a(),Fl=c("p"),Fl.textContent=Ti,da=a(),El=c("ul"),El.innerHTML=ji,wa=a(),Yl=c("p"),Yl.innerHTML=bi,ha=a(),zl=c("p"),zl.innerHTML=fi,Ja=a(),J(Hl.$$.fragment),ua=a(),J(Sl.$$.fragment),ma=a(),ql=c("p"),ql.innerHTML=Ii,Ua=a(),J(Ll.$$.fragment),Ta=a(),J(Dl.$$.fragment),ja=a(),Kl=c("p"),Kl.innerHTML=Ci,ba=a(),J(Pl.$$.fragment),fa=a(),J(Ol.$$.fragment),Ia=a(),et=c("p"),et.textContent=gi,Ca=a(),J(Oe.$$.fragment),ga=a(),lt=c("p"),lt.textContent=Zi,Za=a(),J(tt.$$.fragment),Ga=a(),st=c("p"),st.textContent=Gi,Ba=a(),at=c("p"),at.innerHTML=Bi,ka=a(),J(nt.$$.fragment),_a=a(),J(it.$$.fragment),xa=a(),Mt=c("p"),Mt.textContent=ki,Wa=a(),J(ot.$$.fragment),Aa=a(),pt=c("p"),pt.textContent=_i,Va=a(),rt=c("p"),rt.innerHTML=xi,Xa=a(),J(yt.$$.fragment),Ra=a(),ct=c("p"),ct.textContent=Wi,va=a(),J(dt.$$.fragment),$a=a(),J(wt.$$.fragment),Na=a(),ht=c("p"),ht.textContent=Ai,Qa=a(),Jt=c("p"),Jt.textContent=Vi,Fa=a(),me.c(),us=a(),J(ut.$$.fragment),Ea=a(),Te.c(),ms=a(),mt=c("p"),mt.innerHTML=Xi,Ya=a(),Ut=c("ul"),Ut.innerHTML=Ri,za=a(),z=c("p"),Hn=xs("Here we will change this process slightly because we don‚Äôt need to compute actual scores (just the predicted answer). This means we can skip the softmax step. To go faster, we also won‚Äôt score all the possible "),Us=c("code"),Us.textContent=vi,Sn=xs(" pairs, but only the ones corresponding to the highest "),Ts=c("code"),Ts.textContent=$i,qn=xs(" logits (with "),js=c("code"),js.textContent=Ni,Ln=xs("). Since we will skip the softmax, those scores will be logit scores, and will be obtained by taking the sum of the start and end logits (instead of the product, because of the rule"),Ha=new $M(!1),Sa=xs(")."),qa=a(),Tt=c("p"),Tt.innerHTML=Qi,La=a(),J(jt.$$.fragment),Da=a(),bt=c("p"),bt.textContent=Fi,Ka=a(),J(ft.$$.fragment),Pa=a(),It=c("p"),It.innerHTML=Ei,Oa=a(),be.c(),bs=a(),Ct=c("p"),Ct.innerHTML=Yi,en=a(),J(gt.$$.fragment),ln=a(),Zt=c("p"),Zt.innerHTML=zi,tn=a(),Gt=c("ul"),Gt.innerHTML=Hi,sn=a(),Bt=c("p"),Bt.textContent=Si,an=a(),J(kt.$$.fragment),nn=a(),_t=c("p"),_t.textContent=qi,Mn=a(),J(xt.$$.fragment),on=a(),Wt=c("p"),Wt.textContent=Li,pn=a(),J(At.$$.fragment),rn=a(),Vt=c("p"),Vt.textContent=Di,yn=a(),J(Xt.$$.fragment),cn=a(),J(Rt.$$.fragment),dn=a(),vt=c("p"),vt.textContent=Ki,wn=a(),J($t.$$.fragment),hn=a(),J(Nt.$$.fragment),Jn=a(),Qt=c("p"),Qt.innerHTML=Pi,un=a(),De.c(),fs=a(),J(Ft.$$.fragment),mn=a(),Et=c("p"),Et.textContent=Oi,Un=a(),J(Yt.$$.fragment),Tn=a(),J(zt.$$.fragment),jn=a(),Ht=c("p"),Ht.textContent=eM,bn=a(),J(St.$$.fragment),fn=a(),Ie.c(),Is=a(),qt=c("p"),qt.textContent=lM,In=a(),Lt=c("p"),Lt.textContent=tM,Cn=a(),J(Dt.$$.fragment),gn=a(),Kt=c("p"),Kt.textContent=sM,Zn=a(),J(Pt.$$.fragment),Gn=a(),ge.c(),Cs=a(),Ot=c("p"),Ot.innerHTML=aM,Bn=a(),Ge.c(),gs=a(),es=c("p"),es.textContent=nM,kn=a(),ke.c(),Zs=a(),J(ls.$$.fragment),_n=a(),ts=c("p"),ts.textContent=iM,xn=a(),R&&R.c(),Gs=a(),ss=c("p"),ss.textContent=MM,Wn=a(),J(el.$$.fragment),An=a(),v&&v.c(),Bs=a(),J(as.$$.fragment),Vn=a(),ns=c("p"),ns.innerHTML=oM,Xn=a(),J(is.$$.fragment),Rn=a(),J(Ms.$$.fragment),vn=a(),os=c("p"),os.textContent=pM,$n=a(),_s=c("p"),this.h()},l(e){const t=NM("svelte-u9bgzb",document.head);i=d(t,"META",{name:!0,content:!0}),t.forEach(l),T=n(e),M=d(e,"P",{}),Fn(M).forEach(l),h=n(e),u(f.$$.fragment,e),p=n(e),u(I.$$.fragment,e),j=n(e),x.l(e),_=n(e),V=d(e,"P",{"data-svelte-h":!0}),w(V)!=="svelte-myriyg"&&(V.innerHTML=X),Z=n(e),u(G.$$.fragment,e),A=n(e),H=d(e,"P",{"data-svelte-h":!0}),w(H)!=="svelte-t0si27"&&(H.innerHTML=L),B=n(e),W=d(e,"IFRAME",{src:!0,frameborder:!0,height:!0,title:!0,class:!0,allow:!0,sandbox:!0}),Fn(W).forEach(l),ll=n(e),D=d(e,"P",{"data-svelte-h":!0}),w(D)!=="svelte-m6tvk5"&&(D.innerHTML=xe),Ye=n(e),u($.$$.fragment,e),tl=n(e),u(K.$$.fragment,e),P=n(e),O=d(e,"P",{"data-svelte-h":!0}),w(O)!=="svelte-1p5n70d"&&(O.innerHTML=We),sl=n(e),u(ee.$$.fragment,e),le=n(e),te=d(e,"P",{"data-svelte-h":!0}),w(te)!=="svelte-7ye89e"&&(te.innerHTML=Ae),al=n(e),u(se.$$.fragment,e),ae=n(e),ne=d(e,"P",{"data-svelte-h":!0}),w(ne)!=="svelte-1knbtwl"&&(ne.textContent=Ve),ze=n(e),u(N.$$.fragment,e),nl=n(e),u(ie.$$.fragment,e),Me=n(e),oe=d(e,"P",{"data-svelte-h":!0}),w(oe)!=="svelte-ktjy4x"&&(oe.innerHTML=Xe),il=n(e),u(pe.$$.fragment,e),re=n(e),u(ye.$$.fragment,e),ce=n(e),Re=d(e,"P",{"data-svelte-h":!0}),w(Re)!=="svelte-tb5lsq"&&(Re.innerHTML=Ml),de=n(e),ve=d(e,"P",{"data-svelte-h":!0}),w(ve)!=="svelte-vaxn0j"&&(ve.innerHTML=ol),we=n(e),u($e.$$.fragment,e),He=n(e),u(Q.$$.fragment,e),Se=n(e),F=d(e,"P",{"data-svelte-h":!0}),w(F)!=="svelte-1h7jomn"&&(F.textContent=ks),qe=n(e),u(E.$$.fragment,e),Le=n(e),u(Y.$$.fragment,e),pl=n(e),he=d(e,"P",{"data-svelte-h":!0}),w(he)!=="svelte-hecde5"&&(he.textContent=Ne),rl=n(e),u(Je.$$.fragment,e),o=n(e),u(C.$$.fragment,e),As=n(e),yl=d(e,"P",{"data-svelte-h":!0}),w(yl)!=="svelte-cdi2lk"&&(yl.textContent=ai),Vs=n(e),u(cl.$$.fragment,e),Xs=n(e),u(dl.$$.fragment,e),Rs=n(e),wl=d(e,"P",{"data-svelte-h":!0}),w(wl)!=="svelte-7xl3sb"&&(wl.textContent=ni),vs=n(e),hl=d(e,"P",{"data-svelte-h":!0}),w(hl)!=="svelte-1pwg6fm"&&(hl.textContent=ii),$s=n(e),u(Jl.$$.fragment,e),Ns=n(e),ul=d(e,"P",{"data-svelte-h":!0}),w(ul)!=="svelte-1dej8u9"&&(ul.innerHTML=Mi),Qs=n(e),u(ml.$$.fragment,e),Fs=n(e),u(Ul.$$.fragment,e),Es=n(e),Tl=d(e,"P",{"data-svelte-h":!0}),w(Tl)!=="svelte-14vvvpt"&&(Tl.textContent=oi),Ys=n(e),u(jl.$$.fragment,e),zs=n(e),bl=d(e,"P",{"data-svelte-h":!0}),w(bl)!=="svelte-1kjwjcz"&&(bl.textContent=pi),Hs=n(e),u(fl.$$.fragment,e),Ss=n(e),u(Il.$$.fragment,e),qs=n(e),Cl=d(e,"P",{"data-svelte-h":!0}),w(Cl)!=="svelte-1hh9t0e"&&(Cl.textContent=ri),Ls=n(e),Pe=d(e,"DIV",{class:!0,"data-svelte-h":!0}),w(Pe)!=="svelte-cxbodn"&&(Pe.innerHTML=yi),Ds=n(e),gl=d(e,"P",{"data-svelte-h":!0}),w(gl)!=="svelte-1kjufr6"&&(gl.innerHTML=ci),Ks=n(e),Zl=d(e,"P",{"data-svelte-h":!0}),w(Zl)!=="svelte-58v7q5"&&(Zl.textContent=di),Ps=n(e),Gl=d(e,"UL",{"data-svelte-h":!0}),w(Gl)!=="svelte-6x2io6"&&(Gl.innerHTML=wi),Os=n(e),u(Bl.$$.fragment,e),ea=n(e),u(kl.$$.fragment,e),la=n(e),_l=d(e,"P",{"data-svelte-h":!0}),w(_l)!=="svelte-1tsnw8"&&(_l.innerHTML=hi),ta=n(e),xl=d(e,"P",{"data-svelte-h":!0}),w(xl)!=="svelte-sde0e0"&&(xl.innerHTML=Ji),sa=n(e),u(Wl.$$.fragment,e),aa=n(e),u(Al.$$.fragment,e),na=n(e),Vl=d(e,"P",{"data-svelte-h":!0}),w(Vl)!=="svelte-14worlm"&&(Vl.innerHTML=ui),ia=n(e),u(Xl.$$.fragment,e),Ma=n(e),u(Rl.$$.fragment,e),oa=n(e),vl=d(e,"P",{"data-svelte-h":!0}),w(vl)!=="svelte-35wqxf"&&(vl.textContent=mi),pa=n(e),u($l.$$.fragment,e),ra=n(e),u(Nl.$$.fragment,e),ya=n(e),Ql=d(e,"P",{"data-svelte-h":!0}),w(Ql)!=="svelte-1ia87mf"&&(Ql.textContent=Ui),ca=n(e),Fl=d(e,"P",{"data-svelte-h":!0}),w(Fl)!=="svelte-1npwtyu"&&(Fl.textContent=Ti),da=n(e),El=d(e,"UL",{"data-svelte-h":!0}),w(El)!=="svelte-prlp5i"&&(El.innerHTML=ji),wa=n(e),Yl=d(e,"P",{"data-svelte-h":!0}),w(Yl)!=="svelte-17fh4wp"&&(Yl.innerHTML=bi),ha=n(e),zl=d(e,"P",{"data-svelte-h":!0}),w(zl)!=="svelte-16vvku3"&&(zl.innerHTML=fi),Ja=n(e),u(Hl.$$.fragment,e),ua=n(e),u(Sl.$$.fragment,e),ma=n(e),ql=d(e,"P",{"data-svelte-h":!0}),w(ql)!=="svelte-1hgj446"&&(ql.innerHTML=Ii),Ua=n(e),u(Ll.$$.fragment,e),Ta=n(e),u(Dl.$$.fragment,e),ja=n(e),Kl=d(e,"P",{"data-svelte-h":!0}),w(Kl)!=="svelte-fazefa"&&(Kl.innerHTML=Ci),ba=n(e),u(Pl.$$.fragment,e),fa=n(e),u(Ol.$$.fragment,e),Ia=n(e),et=d(e,"P",{"data-svelte-h":!0}),w(et)!=="svelte-1fhoy6z"&&(et.textContent=gi),Ca=n(e),u(Oe.$$.fragment,e),ga=n(e),lt=d(e,"P",{"data-svelte-h":!0}),w(lt)!=="svelte-pljeaa"&&(lt.textContent=Zi),Za=n(e),u(tt.$$.fragment,e),Ga=n(e),st=d(e,"P",{"data-svelte-h":!0}),w(st)!=="svelte-1xwitc5"&&(st.textContent=Gi),Ba=n(e),at=d(e,"P",{"data-svelte-h":!0}),w(at)!=="svelte-sdejg"&&(at.innerHTML=Bi),ka=n(e),u(nt.$$.fragment,e),_a=n(e),u(it.$$.fragment,e),xa=n(e),Mt=d(e,"P",{"data-svelte-h":!0}),w(Mt)!=="svelte-7dpaps"&&(Mt.textContent=ki),Wa=n(e),u(ot.$$.fragment,e),Aa=n(e),pt=d(e,"P",{"data-svelte-h":!0}),w(pt)!=="svelte-19rsl9d"&&(pt.textContent=_i),Va=n(e),rt=d(e,"P",{"data-svelte-h":!0}),w(rt)!=="svelte-1lo0yv3"&&(rt.innerHTML=xi),Xa=n(e),u(yt.$$.fragment,e),Ra=n(e),ct=d(e,"P",{"data-svelte-h":!0}),w(ct)!=="svelte-1dpgya2"&&(ct.textContent=Wi),va=n(e),u(dt.$$.fragment,e),$a=n(e),u(wt.$$.fragment,e),Na=n(e),ht=d(e,"P",{"data-svelte-h":!0}),w(ht)!=="svelte-9xk5eq"&&(ht.textContent=Ai),Qa=n(e),Jt=d(e,"P",{"data-svelte-h":!0}),w(Jt)!=="svelte-tuy2yy"&&(Jt.textContent=Vi),Fa=n(e),me.l(e),us=n(e),u(ut.$$.fragment,e),Ea=n(e),Te.l(e),ms=n(e),mt=d(e,"P",{"data-svelte-h":!0}),w(mt)!=="svelte-jznsd0"&&(mt.innerHTML=Xi),Ya=n(e),Ut=d(e,"UL",{"data-svelte-h":!0}),w(Ut)!=="svelte-m8u7qd"&&(Ut.innerHTML=Ri),za=n(e),z=d(e,"P",{});var S=Fn(z);Hn=Ws(S,"Here we will change this process slightly because we don‚Äôt need to compute actual scores (just the predicted answer). This means we can skip the softmax step. To go faster, we also won‚Äôt score all the possible "),Us=d(S,"CODE",{"data-svelte-h":!0}),w(Us)!=="svelte-h5rtds"&&(Us.textContent=vi),Sn=Ws(S," pairs, but only the ones corresponding to the highest "),Ts=d(S,"CODE",{"data-svelte-h":!0}),w(Ts)!=="svelte-4nlbo1"&&(Ts.textContent=$i),qn=Ws(S," logits (with "),js=d(S,"CODE",{"data-svelte-h":!0}),w(js)!=="svelte-jugzo8"&&(js.textContent=Ni),Ln=Ws(S,"). Since we will skip the softmax, those scores will be logit scores, and will be obtained by taking the sum of the start and end logits (instead of the product, because of the rule"),Ha=QM(S,!1),Sa=Ws(S,")."),S.forEach(l),qa=n(e),Tt=d(e,"P",{"data-svelte-h":!0}),w(Tt)!=="svelte-llzo73"&&(Tt.innerHTML=Qi),La=n(e),u(jt.$$.fragment,e),Da=n(e),bt=d(e,"P",{"data-svelte-h":!0}),w(bt)!=="svelte-fruu7j"&&(bt.textContent=Fi),Ka=n(e),u(ft.$$.fragment,e),Pa=n(e),It=d(e,"P",{"data-svelte-h":!0}),w(It)!=="svelte-6pa3pk"&&(It.innerHTML=Ei),Oa=n(e),be.l(e),bs=n(e),Ct=d(e,"P",{"data-svelte-h":!0}),w(Ct)!=="svelte-tk5afo"&&(Ct.innerHTML=Yi),en=n(e),u(gt.$$.fragment,e),ln=n(e),Zt=d(e,"P",{"data-svelte-h":!0}),w(Zt)!=="svelte-ql5gpc"&&(Zt.innerHTML=zi),tn=n(e),Gt=d(e,"UL",{"data-svelte-h":!0}),w(Gt)!=="svelte-1ithwwo"&&(Gt.innerHTML=Hi),sn=n(e),Bt=d(e,"P",{"data-svelte-h":!0}),w(Bt)!=="svelte-ys0ywc"&&(Bt.textContent=Si),an=n(e),u(kt.$$.fragment,e),nn=n(e),_t=d(e,"P",{"data-svelte-h":!0}),w(_t)!=="svelte-1f0vmkj"&&(_t.textContent=qi),Mn=n(e),u(xt.$$.fragment,e),on=n(e),Wt=d(e,"P",{"data-svelte-h":!0}),w(Wt)!=="svelte-g7bi3x"&&(Wt.textContent=Li),pn=n(e),u(At.$$.fragment,e),rn=n(e),Vt=d(e,"P",{"data-svelte-h":!0}),w(Vt)!=="svelte-1r94o8l"&&(Vt.textContent=Di),yn=n(e),u(Xt.$$.fragment,e),cn=n(e),u(Rt.$$.fragment,e),dn=n(e),vt=d(e,"P",{"data-svelte-h":!0}),w(vt)!=="svelte-fcu3w1"&&(vt.textContent=Ki),wn=n(e),u($t.$$.fragment,e),hn=n(e),u(Nt.$$.fragment,e),Jn=n(e),Qt=d(e,"P",{"data-svelte-h":!0}),w(Qt)!=="svelte-1mits6t"&&(Qt.innerHTML=Pi),un=n(e),De.l(e),fs=n(e),u(Ft.$$.fragment,e),mn=n(e),Et=d(e,"P",{"data-svelte-h":!0}),w(Et)!=="svelte-xvtmh8"&&(Et.textContent=Oi),Un=n(e),u(Yt.$$.fragment,e),Tn=n(e),u(zt.$$.fragment,e),jn=n(e),Ht=d(e,"P",{"data-svelte-h":!0}),w(Ht)!=="svelte-1u746y"&&(Ht.textContent=eM),bn=n(e),u(St.$$.fragment,e),fn=n(e),Ie.l(e),Is=n(e),qt=d(e,"P",{"data-svelte-h":!0}),w(qt)!=="svelte-q4u5lv"&&(qt.textContent=lM),In=n(e),Lt=d(e,"P",{"data-svelte-h":!0}),w(Lt)!=="svelte-p6654n"&&(Lt.textContent=tM),Cn=n(e),u(Dt.$$.fragment,e),gn=n(e),Kt=d(e,"P",{"data-svelte-h":!0}),w(Kt)!=="svelte-648vlf"&&(Kt.textContent=sM),Zn=n(e),u(Pt.$$.fragment,e),Gn=n(e),ge.l(e),Cs=n(e),Ot=d(e,"P",{"data-svelte-h":!0}),w(Ot)!=="svelte-1bhn9dh"&&(Ot.innerHTML=aM),Bn=n(e),Ge.l(e),gs=n(e),es=d(e,"P",{"data-svelte-h":!0}),w(es)!=="svelte-8kltkn"&&(es.textContent=nM),kn=n(e),ke.l(e),Zs=n(e),u(ls.$$.fragment,e),_n=n(e),ts=d(e,"P",{"data-svelte-h":!0}),w(ts)!=="svelte-1n0mqlm"&&(ts.textContent=iM),xn=n(e),R&&R.l(e),Gs=n(e),ss=d(e,"P",{"data-svelte-h":!0}),w(ss)!=="svelte-4jl15q"&&(ss.textContent=MM),Wn=n(e),u(el.$$.fragment,e),An=n(e),v&&v.l(e),Bs=n(e),u(as.$$.fragment,e),Vn=n(e),ns=d(e,"P",{"data-svelte-h":!0}),w(ns)!=="svelte-1mnag4f"&&(ns.innerHTML=oM),Xn=n(e),u(is.$$.fragment,e),Rn=n(e),u(Ms.$$.fragment,e),vn=n(e),os=d(e,"P",{"data-svelte-h":!0}),w(os)!=="svelte-19li140"&&(os.textContent=pM),$n=n(e),_s=d(e,"P",{}),Fn(_s).forEach(l),this.h()},h(){Qe(i,"name","hf:doc:metadata"),Qe(i,"content",co),VM(W.src,_e="https://course-demos-bert-finetuned-squad.hf.space")||Qe(W,"src",_e),Qe(W,"frameborder","0"),Qe(W,"height","450"),Qe(W,"title","Gradio app"),Qe(W,"class","block dark:hidden container p-0 flex-grow space-iframe"),Qe(W,"allow","accelerometer; ambient-light-sensor; autoplay; battery; camera; document-domain; encrypted-media; fullscreen; geolocation; gyroscope; layout-animations; legacy-image-formats; magnetometer; microphone; midi; oversized-images; payment; picture-in-picture; publickey-credentials-get; sync-xhr; usb; vr ; wake-lock; xr-spatial-tracking"),Qe(W,"sandbox","allow-forms allow-modals allow-popups allow-popups-to-escape-sandbox allow-same-origin allow-scripts allow-downloads"),Qe(Pe,"class","flex justify-center"),Ha.a=Sa},m(e,t){Ke(document.head,i),s(e,T,t),s(e,M,t),s(e,h,t),m(f,e,t),s(e,p,t),m(I,e,t),s(e,j,t),ps[g].m(e,t),s(e,_,t),s(e,V,t),s(e,Z,t),m(G,e,t),s(e,A,t),s(e,H,t),s(e,B,t),s(e,W,t),s(e,ll,t),s(e,D,t),s(e,Ye,t),m($,e,t),s(e,tl,t),m(K,e,t),s(e,P,t),s(e,O,t),s(e,sl,t),m(ee,e,t),s(e,le,t),s(e,te,t),s(e,al,t),m(se,e,t),s(e,ae,t),s(e,ne,t),s(e,ze,t),m(N,e,t),s(e,nl,t),m(ie,e,t),s(e,Me,t),s(e,oe,t),s(e,il,t),m(pe,e,t),s(e,re,t),m(ye,e,t),s(e,ce,t),s(e,Re,t),s(e,de,t),s(e,ve,t),s(e,we,t),m($e,e,t),s(e,He,t),m(Q,e,t),s(e,Se,t),s(e,F,t),s(e,qe,t),m(E,e,t),s(e,Le,t),m(Y,e,t),s(e,pl,t),s(e,he,t),s(e,rl,t),m(Je,e,t),s(e,o,t),m(C,e,t),s(e,As,t),s(e,yl,t),s(e,Vs,t),m(cl,e,t),s(e,Xs,t),m(dl,e,t),s(e,Rs,t),s(e,wl,t),s(e,vs,t),s(e,hl,t),s(e,$s,t),m(Jl,e,t),s(e,Ns,t),s(e,ul,t),s(e,Qs,t),m(ml,e,t),s(e,Fs,t),m(Ul,e,t),s(e,Es,t),s(e,Tl,t),s(e,Ys,t),m(jl,e,t),s(e,zs,t),s(e,bl,t),s(e,Hs,t),m(fl,e,t),s(e,Ss,t),m(Il,e,t),s(e,qs,t),s(e,Cl,t),s(e,Ls,t),s(e,Pe,t),s(e,Ds,t),s(e,gl,t),s(e,Ks,t),s(e,Zl,t),s(e,Ps,t),s(e,Gl,t),s(e,Os,t),m(Bl,e,t),s(e,ea,t),m(kl,e,t),s(e,la,t),s(e,_l,t),s(e,ta,t),s(e,xl,t),s(e,sa,t),m(Wl,e,t),s(e,aa,t),m(Al,e,t),s(e,na,t),s(e,Vl,t),s(e,ia,t),m(Xl,e,t),s(e,Ma,t),m(Rl,e,t),s(e,oa,t),s(e,vl,t),s(e,pa,t),m($l,e,t),s(e,ra,t),m(Nl,e,t),s(e,ya,t),s(e,Ql,t),s(e,ca,t),s(e,Fl,t),s(e,da,t),s(e,El,t),s(e,wa,t),s(e,Yl,t),s(e,ha,t),s(e,zl,t),s(e,Ja,t),m(Hl,e,t),s(e,ua,t),m(Sl,e,t),s(e,ma,t),s(e,ql,t),s(e,Ua,t),m(Ll,e,t),s(e,Ta,t),m(Dl,e,t),s(e,ja,t),s(e,Kl,t),s(e,ba,t),m(Pl,e,t),s(e,fa,t),m(Ol,e,t),s(e,Ia,t),s(e,et,t),s(e,Ca,t),m(Oe,e,t),s(e,ga,t),s(e,lt,t),s(e,Za,t),m(tt,e,t),s(e,Ga,t),s(e,st,t),s(e,Ba,t),s(e,at,t),s(e,ka,t),m(nt,e,t),s(e,_a,t),m(it,e,t),s(e,xa,t),s(e,Mt,t),s(e,Wa,t),m(ot,e,t),s(e,Aa,t),s(e,pt,t),s(e,Va,t),s(e,rt,t),s(e,Xa,t),m(yt,e,t),s(e,Ra,t),s(e,ct,t),s(e,va,t),m(dt,e,t),s(e,$a,t),m(wt,e,t),s(e,Na,t),s(e,ht,t),s(e,Qa,t),s(e,Jt,t),s(e,Fa,t),rs[ue].m(e,t),s(e,us,t),m(ut,e,t),s(e,Ea,t),ys[Ue].m(e,t),s(e,ms,t),s(e,mt,t),s(e,Ya,t),s(e,Ut,t),s(e,za,t),s(e,z,t),Ke(z,Hn),Ke(z,Us),Ke(z,Sn),Ke(z,Ts),Ke(z,qn),Ke(z,js),Ke(z,Ln),Ha.m(WM,z),Ke(z,Sa),s(e,qa,t),s(e,Tt,t),s(e,La,t),m(jt,e,t),s(e,Da,t),s(e,bt,t),s(e,Ka,t),m(ft,e,t),s(e,Pa,t),s(e,It,t),s(e,Oa,t),cs[je].m(e,t),s(e,bs,t),s(e,Ct,t),s(e,en,t),m(gt,e,t),s(e,ln,t),s(e,Zt,t),s(e,tn,t),s(e,Gt,t),s(e,sn,t),s(e,Bt,t),s(e,an,t),m(kt,e,t),s(e,nn,t),s(e,_t,t),s(e,Mn,t),m(xt,e,t),s(e,on,t),s(e,Wt,t),s(e,pn,t),m(At,e,t),s(e,rn,t),s(e,Vt,t),s(e,yn,t),m(Xt,e,t),s(e,cn,t),m(Rt,e,t),s(e,dn,t),s(e,vt,t),s(e,wn,t),m($t,e,t),s(e,hn,t),m(Nt,e,t),s(e,Jn,t),s(e,Qt,t),s(e,un,t),De.m(e,t),s(e,fs,t),m(Ft,e,t),s(e,mn,t),s(e,Et,t),s(e,Un,t),m(Yt,e,t),s(e,Tn,t),m(zt,e,t),s(e,jn,t),s(e,Ht,t),s(e,bn,t),m(St,e,t),s(e,fn,t),ds[fe].m(e,t),s(e,Is,t),s(e,qt,t),s(e,In,t),s(e,Lt,t),s(e,Cn,t),m(Dt,e,t),s(e,gn,t),s(e,Kt,t),s(e,Zn,t),m(Pt,e,t),s(e,Gn,t),ws[Ce].m(e,t),s(e,Cs,t),s(e,Ot,t),s(e,Bn,t),hs[Ze].m(e,t),s(e,gs,t),s(e,es,t),s(e,kn,t),Js[Be].m(e,t),s(e,Zs,t),m(ls,e,t),s(e,_n,t),s(e,ts,t),s(e,xn,t),R&&R.m(e,t),s(e,Gs,t),s(e,ss,t),s(e,Wn,t),m(el,e,t),s(e,An,t),v&&v.m(e,t),s(e,Bs,t),m(as,e,t),s(e,Vn,t),s(e,ns,t),s(e,Xn,t),m(is,e,t),s(e,Rn,t),m(Ms,e,t),s(e,vn,t),s(e,os,t),s(e,$n,t),s(e,_s,t),Nn=!0},p(e,[t]){const S={};t&1&&(S.fw=e[0]),f.$set(S);let Dn=g;g=yM(e),g!==Dn&&(Ee(),y(ps[Dn],1,1,()=>{ps[Dn]=null}),Fe(),x=ps[g],x||(x=ps[g]=rM[g](e),x.c()),r(x,1),x.m(_.parentNode,_));const ZM={};t&2&&(ZM.$$scope={dirty:t,ctx:e}),$.$set(ZM);const GM={};t&2&&(GM.$$scope={dirty:t,ctx:e}),Oe.$set(GM);let Kn=ue;ue=dM(e),ue!==Kn&&(Ee(),y(rs[Kn],1,1,()=>{rs[Kn]=null}),Fe(),me=rs[ue],me||(me=rs[ue]=cM[ue](e),me.c()),r(me,1),me.m(us.parentNode,us));let Pn=Ue;Ue=hM(e),Ue!==Pn&&(Ee(),y(ys[Pn],1,1,()=>{ys[Pn]=null}),Fe(),Te=ys[Ue],Te||(Te=ys[Ue]=wM[Ue](e),Te.c()),r(Te,1),Te.m(ms.parentNode,ms));let On=je;je=uM(e),je!==On&&(Ee(),y(cs[On],1,1,()=>{cs[On]=null}),Fe(),be=cs[je],be||(be=cs[je]=JM[je](e),be.c()),r(be,1),be.m(bs.parentNode,bs)),Qn!==(Qn=mM(e))&&(De.d(1),De=Qn(e),De&&(De.c(),De.m(fs.parentNode,fs)));let ei=fe;fe=TM(e),fe!==ei&&(Ee(),y(ds[ei],1,1,()=>{ds[ei]=null}),Fe(),Ie=ds[fe],Ie||(Ie=ds[fe]=UM[fe](e),Ie.c()),r(Ie,1),Ie.m(Is.parentNode,Is));let li=Ce;Ce=bM(e),Ce!==li&&(Ee(),y(ws[li],1,1,()=>{ws[li]=null}),Fe(),ge=ws[Ce],ge||(ge=ws[Ce]=jM[Ce](e),ge.c()),r(ge,1),ge.m(Cs.parentNode,Cs));let ti=Ze;Ze=IM(e),Ze!==ti&&(Ee(),y(hs[ti],1,1,()=>{hs[ti]=null}),Fe(),Ge=hs[Ze],Ge||(Ge=hs[Ze]=fM[Ze](e),Ge.c()),r(Ge,1),Ge.m(gs.parentNode,gs));let si=Be;Be=gM(e),Be!==si&&(Ee(),y(Js[si],1,1,()=>{Js[si]=null}),Fe(),ke=Js[Be],ke||(ke=Js[Be]=CM[Be](e),ke.c()),r(ke,1),ke.m(Zs.parentNode,Zs)),e[0]==="pt"?R?t&1&&r(R,1):(R=kM(),R.c(),r(R,1),R.m(Gs.parentNode,Gs)):R&&(Ee(),y(R,1,1,()=>{R=null}),Fe());const BM={};t&2&&(BM.$$scope={dirty:t,ctx:e}),el.$set(BM),e[0]==="pt"?v?t&1&&r(v,1):(v=_M(),v.c(),r(v,1),v.m(Bs.parentNode,Bs)):v&&(Ee(),y(v,1,1,()=>{v=null}),Fe())},i(e){Nn||(r(f.$$.fragment,e),r(I.$$.fragment,e),r(x),r(G.$$.fragment,e),r($.$$.fragment,e),r(K.$$.fragment,e),r(ee.$$.fragment,e),r(se.$$.fragment,e),r(N.$$.fragment,e),r(ie.$$.fragment,e),r(pe.$$.fragment,e),r(ye.$$.fragment,e),r($e.$$.fragment,e),r(Q.$$.fragment,e),r(E.$$.fragment,e),r(Y.$$.fragment,e),r(Je.$$.fragment,e),r(C.$$.fragment,e),r(cl.$$.fragment,e),r(dl.$$.fragment,e),r(Jl.$$.fragment,e),r(ml.$$.fragment,e),r(Ul.$$.fragment,e),r(jl.$$.fragment,e),r(fl.$$.fragment,e),r(Il.$$.fragment,e),r(Bl.$$.fragment,e),r(kl.$$.fragment,e),r(Wl.$$.fragment,e),r(Al.$$.fragment,e),r(Xl.$$.fragment,e),r(Rl.$$.fragment,e),r($l.$$.fragment,e),r(Nl.$$.fragment,e),r(Hl.$$.fragment,e),r(Sl.$$.fragment,e),r(Ll.$$.fragment,e),r(Dl.$$.fragment,e),r(Pl.$$.fragment,e),r(Ol.$$.fragment,e),r(Oe.$$.fragment,e),r(tt.$$.fragment,e),r(nt.$$.fragment,e),r(it.$$.fragment,e),r(ot.$$.fragment,e),r(yt.$$.fragment,e),r(dt.$$.fragment,e),r(wt.$$.fragment,e),r(me),r(ut.$$.fragment,e),r(Te),r(jt.$$.fragment,e),r(ft.$$.fragment,e),r(be),r(gt.$$.fragment,e),r(kt.$$.fragment,e),r(xt.$$.fragment,e),r(At.$$.fragment,e),r(Xt.$$.fragment,e),r(Rt.$$.fragment,e),r($t.$$.fragment,e),r(Nt.$$.fragment,e),r(Ft.$$.fragment,e),r(Yt.$$.fragment,e),r(zt.$$.fragment,e),r(St.$$.fragment,e),r(Ie),r(Dt.$$.fragment,e),r(Pt.$$.fragment,e),r(ge),r(Ge),r(ke),r(ls.$$.fragment,e),r(R),r(el.$$.fragment,e),r(v),r(as.$$.fragment,e),r(is.$$.fragment,e),r(Ms.$$.fragment,e),Nn=!0)},o(e){y(f.$$.fragment,e),y(I.$$.fragment,e),y(x),y(G.$$.fragment,e),y($.$$.fragment,e),y(K.$$.fragment,e),y(ee.$$.fragment,e),y(se.$$.fragment,e),y(N.$$.fragment,e),y(ie.$$.fragment,e),y(pe.$$.fragment,e),y(ye.$$.fragment,e),y($e.$$.fragment,e),y(Q.$$.fragment,e),y(E.$$.fragment,e),y(Y.$$.fragment,e),y(Je.$$.fragment,e),y(C.$$.fragment,e),y(cl.$$.fragment,e),y(dl.$$.fragment,e),y(Jl.$$.fragment,e),y(ml.$$.fragment,e),y(Ul.$$.fragment,e),y(jl.$$.fragment,e),y(fl.$$.fragment,e),y(Il.$$.fragment,e),y(Bl.$$.fragment,e),y(kl.$$.fragment,e),y(Wl.$$.fragment,e),y(Al.$$.fragment,e),y(Xl.$$.fragment,e),y(Rl.$$.fragment,e),y($l.$$.fragment,e),y(Nl.$$.fragment,e),y(Hl.$$.fragment,e),y(Sl.$$.fragment,e),y(Ll.$$.fragment,e),y(Dl.$$.fragment,e),y(Pl.$$.fragment,e),y(Ol.$$.fragment,e),y(Oe.$$.fragment,e),y(tt.$$.fragment,e),y(nt.$$.fragment,e),y(it.$$.fragment,e),y(ot.$$.fragment,e),y(yt.$$.fragment,e),y(dt.$$.fragment,e),y(wt.$$.fragment,e),y(me),y(ut.$$.fragment,e),y(Te),y(jt.$$.fragment,e),y(ft.$$.fragment,e),y(be),y(gt.$$.fragment,e),y(kt.$$.fragment,e),y(xt.$$.fragment,e),y(At.$$.fragment,e),y(Xt.$$.fragment,e),y(Rt.$$.fragment,e),y($t.$$.fragment,e),y(Nt.$$.fragment,e),y(Ft.$$.fragment,e),y(Yt.$$.fragment,e),y(zt.$$.fragment,e),y(St.$$.fragment,e),y(Ie),y(Dt.$$.fragment,e),y(Pt.$$.fragment,e),y(ge),y(Ge),y(ke),y(ls.$$.fragment,e),y(R),y(el.$$.fragment,e),y(v),y(as.$$.fragment,e),y(is.$$.fragment,e),y(Ms.$$.fragment,e),Nn=!1},d(e){e&&(l(T),l(M),l(h),l(p),l(j),l(_),l(V),l(Z),l(A),l(H),l(B),l(W),l(ll),l(D),l(Ye),l(tl),l(P),l(O),l(sl),l(le),l(te),l(al),l(ae),l(ne),l(ze),l(nl),l(Me),l(oe),l(il),l(re),l(ce),l(Re),l(de),l(ve),l(we),l(He),l(Se),l(F),l(qe),l(Le),l(pl),l(he),l(rl),l(o),l(As),l(yl),l(Vs),l(Xs),l(Rs),l(wl),l(vs),l(hl),l($s),l(Ns),l(ul),l(Qs),l(Fs),l(Es),l(Tl),l(Ys),l(zs),l(bl),l(Hs),l(Ss),l(qs),l(Cl),l(Ls),l(Pe),l(Ds),l(gl),l(Ks),l(Zl),l(Ps),l(Gl),l(Os),l(ea),l(la),l(_l),l(ta),l(xl),l(sa),l(aa),l(na),l(Vl),l(ia),l(Ma),l(oa),l(vl),l(pa),l(ra),l(ya),l(Ql),l(ca),l(Fl),l(da),l(El),l(wa),l(Yl),l(ha),l(zl),l(Ja),l(ua),l(ma),l(ql),l(Ua),l(Ta),l(ja),l(Kl),l(ba),l(fa),l(Ia),l(et),l(Ca),l(ga),l(lt),l(Za),l(Ga),l(st),l(Ba),l(at),l(ka),l(_a),l(xa),l(Mt),l(Wa),l(Aa),l(pt),l(Va),l(rt),l(Xa),l(Ra),l(ct),l(va),l($a),l(Na),l(ht),l(Qa),l(Jt),l(Fa),l(us),l(Ea),l(ms),l(mt),l(Ya),l(Ut),l(za),l(z),l(qa),l(Tt),l(La),l(Da),l(bt),l(Ka),l(Pa),l(It),l(Oa),l(bs),l(Ct),l(en),l(ln),l(Zt),l(tn),l(Gt),l(sn),l(Bt),l(an),l(nn),l(_t),l(Mn),l(on),l(Wt),l(pn),l(rn),l(Vt),l(yn),l(cn),l(dn),l(vt),l(wn),l(hn),l(Jn),l(Qt),l(un),l(fs),l(mn),l(Et),l(Un),l(Tn),l(jn),l(Ht),l(bn),l(fn),l(Is),l(qt),l(In),l(Lt),l(Cn),l(gn),l(Kt),l(Zn),l(Gn),l(Cs),l(Ot),l(Bn),l(gs),l(es),l(kn),l(Zs),l(_n),l(ts),l(xn),l(Gs),l(ss),l(Wn),l(An),l(Bs),l(Vn),l(ns),l(Xn),l(Rn),l(vn),l(os),l($n),l(_s)),l(i),U(f,e),U(I,e),ps[g].d(e),U(G,e),U($,e),U(K,e),U(ee,e),U(se,e),U(N,e),U(ie,e),U(pe,e),U(ye,e),U($e,e),U(Q,e),U(E,e),U(Y,e),U(Je,e),U(C,e),U(cl,e),U(dl,e),U(Jl,e),U(ml,e),U(Ul,e),U(jl,e),U(fl,e),U(Il,e),U(Bl,e),U(kl,e),U(Wl,e),U(Al,e),U(Xl,e),U(Rl,e),U($l,e),U(Nl,e),U(Hl,e),U(Sl,e),U(Ll,e),U(Dl,e),U(Pl,e),U(Ol,e),U(Oe,e),U(tt,e),U(nt,e),U(it,e),U(ot,e),U(yt,e),U(dt,e),U(wt,e),rs[ue].d(e),U(ut,e),ys[Ue].d(e),U(jt,e),U(ft,e),cs[je].d(e),U(gt,e),U(kt,e),U(xt,e),U(At,e),U(Xt,e),U(Rt,e),U($t,e),U(Nt,e),De.d(e),U(Ft,e),U(Yt,e),U(zt,e),U(St,e),ds[fe].d(e),U(Dt,e),U(Pt,e),ws[Ce].d(e),hs[Ze].d(e),Js[Be].d(e),U(ls,e),R&&R.d(e),U(el,e),v&&v.d(e),U(as,e),U(is,e),U(Ms,e)}}}const co='{"title":"Question answering","local":"question-answering","sections":[{"title":"Preparing the data","local":"preparing-the-data","sections":[{"title":"The SQuAD dataset","local":"the-squad-dataset","sections":[],"depth":3},{"title":"Processing the training data","local":"processing-the-training-data","sections":[],"depth":3},{"title":"Processing the validation data","local":"processing-the-validation-data","sections":[],"depth":3}],"depth":2},{"title":"Fine-tuning the model with the Trainer API","local":"fine-tuning-the-model-with-the-trainer-api","sections":[],"depth":2},{"title":"Fine-tuning the model with Keras","local":"fine-tuning-the-model-with-keras","sections":[{"title":"Post-processing","local":"post-processing","sections":[],"depth":3},{"title":"Fine-tuning the model","local":"fine-tuning-the-model","sections":[],"depth":3}],"depth":2},{"title":"A custom training loop","local":"a-custom-training-loop","sections":[{"title":"Preparing everything for training","local":"preparing-everything-for-training","sections":[],"depth":3}],"depth":2},{"title":"Training loop","local":"training-loop","sections":[],"depth":2},{"title":"Using the fine-tuned model","local":"using-the-fine-tuned-model","sections":[],"depth":2}],"depth":1}';function wo(k,i,T){let M="pt";return XM(()=>{const h=new URLSearchParams(window.location.search);T(0,M=h.get("fw")||"pt")}),[M]}class fo extends RM{constructor(i){super(),vM(this,i,wo,yo,AM,{})}}export{fo as component};
