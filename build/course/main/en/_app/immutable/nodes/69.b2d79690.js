import{s as $t,o as Mt,n as Tt}from"../chunks/scheduler.37c15a92.js";import{S as vt,i as Jt,g as i,s as a,r as p,A as xt,h as r,f as n,c as l,j as kt,u as h,x as o,k as qe,y as zt,a as s,v as c,d as m,t as d,w as u}from"../chunks/index.2bf4358c.js";import{T as jt}from"../chunks/Tip.363c041f.js";import{Y as wt}from"../chunks/Youtube.1e50a667.js";import{C as y}from"../chunks/CodeBlock.4f5fc1ad.js";import{C as Ut}from"../chunks/CourseFloatingBanner.15ba07e6.js";import{H as re}from"../chunks/Heading.8ada512a.js";function Ct(oe){let f,w="‚úèÔ∏è <strong>Try it out!</strong> Load a tokenizer from the <code>bert-base-cased</code> checkpoint and pass the same example to it. What are the main differences you can see between the cased and uncased versions of the tokenizer?";return{c(){f=i("p"),f.innerHTML=w},l(g){f=r(g,"P",{"data-svelte-h":!0}),o(f)!=="svelte-1e2d11b"&&(f.innerHTML=w)},m(g,le){s(g,f,le)},p:Tt,d(g){g&&n(f)}}}function _t(oe){let f,w,g,le,$,pe,M,he,T,Fe="Before we dive more deeply into the three most common subword tokenization algorithms used with Transformer models (Byte-Pair Encoding [BPE], WordPiece, and Unigram), we‚Äôll first take a look at the preprocessing that each tokenizer applies to text. Here‚Äôs a high-level overview of the steps in the tokenization pipeline:",ce,b,Ye='<img class="block dark:hidden" src="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter6/tokenization_pipeline.svg" alt="The tokenization pipeline."/> <img class="hidden dark:block" src="https://huggingface.co/datasets/huggingface-course/documentation-images/resolve/main/en/chapter6/tokenization_pipeline-dark.svg" alt="The tokenization pipeline."/>',me,v,Oe="Before splitting a text into subtokens (according to its model), the tokenizer performs two steps: <em>normalization</em> and <em>pre-tokenization</em>.",de,J,ue,x,fe,z,et='The normalization step involves some general cleanup, such as removing needless whitespace, lowercasing, and/or removing accents. If you‚Äôre familiar with <a href="http://www.unicode.org/reports/tr15/" rel="nofollow">Unicode normalization</a> (such as NFC or NFKC), this is also something the tokenizer may apply.',ge,j,tt="The ü§ó Transformers <code>tokenizer</code> has an attribute called <code>backend_tokenizer</code> that provides access to the underlying tokenizer from the ü§ó Tokenizers library:",ye,U,be,C,ke,_,nt="The <code>normalizer</code> attribute of the <code>tokenizer</code> object has a <code>normalize_str()</code> method that we can use to see how the normalization is performed:",we,I,$e,H,Me,P,st="In this example, since we picked the <code>bert-base-uncased</code> checkpoint, the normalization applied lowercasing and removed the accents.",Te,k,ve,L,Je,Z,xe,Q,at='As we will see in the next sections, a tokenizer cannot be trained on raw text alone. Instead, we first need to split the texts into small entities, like words. That‚Äôs where the pre-tokenization step comes in. As we saw in <a href="/course/chapter2">Chapter 2</a>, a word-based tokenizer can simply split a raw text into words on whitespace and punctuation. Those words will be the boundaries of the subtokens the tokenizer can learn during its training.',ze,V,lt="To see how a fast tokenizer performs pre-tokenization, we can use the <code>pre_tokenize_str()</code> method of the <code>pre_tokenizer</code> attribute of the <code>tokenizer</code> object:",je,X,Ue,D,Ce,A,it="Notice how the tokenizer is already keeping track of the offsets, which is how it can give us the offset mapping we used in the previous section. Here the tokenizer ignores the two spaces and replaces them with just one, but the offset jumps between <code>are</code> and <code>you</code> to account for that.",_e,S,rt="Since we‚Äôre using a BERT tokenizer, the pre-tokenization involves splitting on whitespace and punctuation. Other tokenizers can have different rules for this step. For example, if we use the GPT-2 tokenizer:",Ie,W,He,E,ot="it will split on whitespace and punctuation as well, but it will keep the spaces and replace them with a <code>ƒ†</code> symbol, enabling it to recover the original spaces if we decode the tokens:",Pe,G,Le,B,pt="Also note that unlike the BERT tokenizer, this tokenizer does not ignore the double space.",Ze,R,ht="For a last example, let‚Äôs have a look at the T5 tokenizer, which is based on the SentencePiece algorithm:",Qe,K,Ve,N,Xe,q,ct="Like the GPT-2 tokenizer, this one keeps spaces and replaces them with a specific token (<code>_</code>), but the T5 tokenizer only splits on whitespace, not punctuation. Also note that it added a space by default at the beginning of the sentence (before <code>Hello</code>) and ignored the double space between <code>are</code> and <code>you</code>.",De,F,mt="Now that we‚Äôve seen a little of how some different tokenizers process text, we can start to explore the underlying algorithms themselves. We‚Äôll begin with a quick look at the broadly widely applicable SentencePiece; then, over the next three sections, we‚Äôll examine how the three main algorithms used for subword tokenization work.",Ae,Y,Se,O,dt='<a href="https://github.com/google/sentencepiece" rel="nofollow">SentencePiece</a> is a tokenization algorithm for the preprocessing of text that you can use with any of the models we will see in the next three sections. It considers the text as a sequence of Unicode characters, and replaces spaces with a special character, <code>‚ñÅ</code>. Used in conjunction with the Unigram algorithm (see <a href="/course/chapter7/7">section 7</a>), it doesn‚Äôt even require a pre-tokenization step, which is very useful for languages where the space character is not used (like Chinese or Japanese).',We,ee,ut="The other main feature of SentencePiece is <em>reversible tokenization</em>: since there is no special treatment of spaces, decoding the tokens is done simply by concatenating them and replacing the <code>_</code>s with spaces ‚Äî this results in the normalized text. As we saw earlier, the BERT tokenizer removes repeating spaces, so its tokenization is not reversible.",Ee,te,Ge,ne,ft="In the following sections, we‚Äôll dive into the three main subword tokenization algorithms: BPE (used by GPT-2 and others), WordPiece (used for example by BERT), and Unigram (used by T5 and others). Before we get started, here‚Äôs a quick overview of how they each work. Don‚Äôt hesitate to come back to this table after reading each of the next sections if it doesn‚Äôt make sense to you yet.",Be,se,gt='<thead><tr><th align="center">Model</th> <th align="center">BPE</th> <th align="center">WordPiece</th> <th align="center">Unigram</th></tr></thead> <tbody><tr><td align="center">Training</td> <td align="center">Starts from a small vocabulary and learns rules to merge tokens</td> <td align="center">Starts from a small vocabulary and learns rules to merge tokens</td> <td align="center">Starts from a large vocabulary and learns rules to remove tokens</td></tr> <tr><td align="center">Training step</td> <td align="center">Merges the tokens corresponding to the most common pair</td> <td align="center">Merges the tokens corresponding to the pair with the best score based on the frequency of the pair, privileging pairs where each individual token is less frequent</td> <td align="center">Removes all the tokens in the vocabulary that will minimize the loss computed on the whole corpus</td></tr> <tr><td align="center">Learns</td> <td align="center">Merge rules and a vocabulary</td> <td align="center">Just a vocabulary</td> <td align="center">A vocabulary with a score for each token</td></tr> <tr><td align="center">Encoding</td> <td align="center">Splits a word into characters and applies the merges learned during training</td> <td align="center">Finds the longest subword starting from the beginning that is in the vocabulary, then does the same for the rest of the word</td> <td align="center">Finds the most likely split into tokens, using the scores learned during training</td></tr></tbody>',Re,ae,yt="Now let‚Äôs dive into BPE!",Ke,ie,Ne;return $=new re({props:{title:"Normalization and pre-tokenization",local:"normalization-and-pre-tokenization",headingTag:"h1"}}),M=new Ut({props:{chapter:6,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter6/section4.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter6/section4.ipynb"}]}}),J=new re({props:{title:"Normalization",local:"normalization",headingTag:"h2"}}),x=new wt({props:{id:"4IIC2jI9CaU"}}),U=new y({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEElMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZCglMjJiZXJ0LWJhc2UtdW5jYXNlZCUyMiklMEFwcmludCh0eXBlKHRva2VuaXplci5iYWNrZW5kX3Rva2VuaXplcikp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)
<span class="hljs-built_in">print</span>(<span class="hljs-built_in">type</span>(tokenizer.backend_tokenizer))`,wrap:!1}}),C=new y({props:{code:"JTNDY2xhc3MlMjAndG9rZW5pemVycy5Ub2tlbml6ZXInJTNF",highlighted:'&lt;<span class="hljs-keyword">class</span> <span class="hljs-string">&#x27;tokenizers.Tokenizer&#x27;</span>&gt;',wrap:!1}}),I=new y({props:{code:"cHJpbnQodG9rZW5pemVyLmJhY2tlbmRfdG9rZW5pemVyLm5vcm1hbGl6ZXIubm9ybWFsaXplX3N0ciglMjJIJUMzJUE5bGwlQzMlQjIlMjBoJUMzJUI0dyUyMGFyZSUyMCVDMyVCQyUzRiUyMikp",highlighted:'<span class="hljs-built_in">print</span>(tokenizer.backend_tokenizer.normalizer.normalize_str(<span class="hljs-string">&quot;H√©ll√≤ h√¥w are √º?&quot;</span>))',wrap:!1}}),H=new y({props:{code:"J2hlbGxvJTIwaG93JTIwYXJlJTIwdSUzRic=",highlighted:'<span class="hljs-string">&#x27;hello how are u?&#x27;</span>',wrap:!1}}),k=new jt({props:{$$slots:{default:[Ct]},$$scope:{ctx:oe}}}),L=new re({props:{title:"Pre-tokenization",local:"pre-tokenization",headingTag:"h2"}}),Z=new wt({props:{id:"grlLV8AIXug"}}),X=new y({props:{code:"dG9rZW5pemVyLmJhY2tlbmRfdG9rZW5pemVyLnByZV90b2tlbml6ZXIucHJlX3Rva2VuaXplX3N0ciglMjJIZWxsbyUyQyUyMGhvdyUyMGFyZSUyMCUyMHlvdSUzRiUyMik=",highlighted:'tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(<span class="hljs-string">&quot;Hello, how are  you?&quot;</span>)',wrap:!1}}),D=new y({props:{code:"JTVCKCdIZWxsbyclMkMlMjAoMCUyQyUyMDUpKSUyQyUyMCgnJTJDJyUyQyUyMCg1JTJDJTIwNikpJTJDJTIwKCdob3cnJTJDJTIwKDclMkMlMjAxMCkpJTJDJTIwKCdhcmUnJTJDJTIwKDExJTJDJTIwMTQpKSUyQyUyMCgneW91JyUyQyUyMCgxNiUyQyUyMDE5KSklMkMlMjAoJyUzRiclMkMlMjAoMTklMkMlMjAyMCkpJTVE",highlighted:'[(<span class="hljs-string">&#x27;Hello&#x27;</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)), (<span class="hljs-string">&#x27;,&#x27;</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)), (<span class="hljs-string">&#x27;how&#x27;</span>, (<span class="hljs-number">7</span>, <span class="hljs-number">10</span>)), (<span class="hljs-string">&#x27;are&#x27;</span>, (<span class="hljs-number">11</span>, <span class="hljs-number">14</span>)), (<span class="hljs-string">&#x27;you&#x27;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">19</span>)), (<span class="hljs-string">&#x27;?&#x27;</span>, (<span class="hljs-number">19</span>, <span class="hljs-number">20</span>))]',wrap:!1}}),W=new y({props:{code:"dG9rZW5pemVyJTIwJTNEJTIwQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQoJTIyZ3B0MiUyMiklMEF0b2tlbml6ZXIuYmFja2VuZF90b2tlbml6ZXIucHJlX3Rva2VuaXplci5wcmVfdG9rZW5pemVfc3RyKCUyMkhlbGxvJTJDJTIwaG93JTIwYXJlJTIwJTIweW91JTNGJTIyKQ==",highlighted:`tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(<span class="hljs-string">&quot;Hello, how are  you?&quot;</span>)`,wrap:!1}}),G=new y({props:{code:"JTVCKCdIZWxsbyclMkMlMjAoMCUyQyUyMDUpKSUyQyUyMCgnJTJDJyUyQyUyMCg1JTJDJTIwNikpJTJDJTIwKCclQzQlQTBob3cnJTJDJTIwKDYlMkMlMjAxMCkpJTJDJTIwKCclQzQlQTBhcmUnJTJDJTIwKDEwJTJDJTIwMTQpKSUyQyUyMCgnJUM0JUEwJyUyQyUyMCgxNCUyQyUyMDE1KSklMkMlMjAoJyVDNCVBMHlvdSclMkMlMjAoMTUlMkMlMjAxOSkpJTJDJTBBJTIwKCclM0YnJTJDJTIwKDE5JTJDJTIwMjApKSU1RA==",highlighted:`[(<span class="hljs-string">&#x27;Hello&#x27;</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">5</span>)), (<span class="hljs-string">&#x27;,&#x27;</span>, (<span class="hljs-number">5</span>, <span class="hljs-number">6</span>)), (<span class="hljs-string">&#x27;ƒ†how&#x27;</span>, (<span class="hljs-number">6</span>, <span class="hljs-number">10</span>)), (<span class="hljs-string">&#x27;ƒ†are&#x27;</span>, (<span class="hljs-number">10</span>, <span class="hljs-number">14</span>)), (<span class="hljs-string">&#x27;ƒ†&#x27;</span>, (<span class="hljs-number">14</span>, <span class="hljs-number">15</span>)), (<span class="hljs-string">&#x27;ƒ†you&#x27;</span>, (<span class="hljs-number">15</span>, <span class="hljs-number">19</span>)),
 (<span class="hljs-string">&#x27;?&#x27;</span>, (<span class="hljs-number">19</span>, <span class="hljs-number">20</span>))]`,wrap:!1}}),K=new y({props:{code:"dG9rZW5pemVyJTIwJTNEJTIwQXV0b1Rva2VuaXplci5mcm9tX3ByZXRyYWluZWQoJTIydDUtc21hbGwlMjIpJTBBdG9rZW5pemVyLmJhY2tlbmRfdG9rZW5pemVyLnByZV90b2tlbml6ZXIucHJlX3Rva2VuaXplX3N0ciglMjJIZWxsbyUyQyUyMGhvdyUyMGFyZSUyMCUyMHlvdSUzRiUyMik=",highlighted:`tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;t5-small&quot;</span>)
tokenizer.backend_tokenizer.pre_tokenizer.pre_tokenize_str(<span class="hljs-string">&quot;Hello, how are  you?&quot;</span>)`,wrap:!1}}),N=new y({props:{code:"JTVCKCclRTIlOTYlODFIZWxsbyUyQyclMkMlMjAoMCUyQyUyMDYpKSUyQyUyMCgnJUUyJTk2JTgxaG93JyUyQyUyMCg3JTJDJTIwMTApKSUyQyUyMCgnJUUyJTk2JTgxYXJlJyUyQyUyMCgxMSUyQyUyMDE0KSklMkMlMjAoJyVFMiU5NiU4MXlvdSUzRiclMkMlMjAoMTYlMkMlMjAyMCkpJTVE",highlighted:'[(<span class="hljs-string">&#x27;‚ñÅHello,&#x27;</span>, (<span class="hljs-number">0</span>, <span class="hljs-number">6</span>)), (<span class="hljs-string">&#x27;‚ñÅhow&#x27;</span>, (<span class="hljs-number">7</span>, <span class="hljs-number">10</span>)), (<span class="hljs-string">&#x27;‚ñÅare&#x27;</span>, (<span class="hljs-number">11</span>, <span class="hljs-number">14</span>)), (<span class="hljs-string">&#x27;‚ñÅyou?&#x27;</span>, (<span class="hljs-number">16</span>, <span class="hljs-number">20</span>))]',wrap:!1}}),Y=new re({props:{title:"SentencePiece",local:"sentencepiece",headingTag:"h2"}}),te=new re({props:{title:"Algorithm overview",local:"algorithm-overview",headingTag:"h2"}}),{c(){f=i("meta"),w=a(),g=i("p"),le=a(),p($.$$.fragment),pe=a(),p(M.$$.fragment),he=a(),T=i("p"),T.textContent=Fe,ce=a(),b=i("div"),b.innerHTML=Ye,me=a(),v=i("p"),v.innerHTML=Oe,de=a(),p(J.$$.fragment),ue=a(),p(x.$$.fragment),fe=a(),z=i("p"),z.innerHTML=et,ge=a(),j=i("p"),j.innerHTML=tt,ye=a(),p(U.$$.fragment),be=a(),p(C.$$.fragment),ke=a(),_=i("p"),_.innerHTML=nt,we=a(),p(I.$$.fragment),$e=a(),p(H.$$.fragment),Me=a(),P=i("p"),P.innerHTML=st,Te=a(),p(k.$$.fragment),ve=a(),p(L.$$.fragment),Je=a(),p(Z.$$.fragment),xe=a(),Q=i("p"),Q.innerHTML=at,ze=a(),V=i("p"),V.innerHTML=lt,je=a(),p(X.$$.fragment),Ue=a(),p(D.$$.fragment),Ce=a(),A=i("p"),A.innerHTML=it,_e=a(),S=i("p"),S.textContent=rt,Ie=a(),p(W.$$.fragment),He=a(),E=i("p"),E.innerHTML=ot,Pe=a(),p(G.$$.fragment),Le=a(),B=i("p"),B.textContent=pt,Ze=a(),R=i("p"),R.textContent=ht,Qe=a(),p(K.$$.fragment),Ve=a(),p(N.$$.fragment),Xe=a(),q=i("p"),q.innerHTML=ct,De=a(),F=i("p"),F.textContent=mt,Ae=a(),p(Y.$$.fragment),Se=a(),O=i("p"),O.innerHTML=dt,We=a(),ee=i("p"),ee.innerHTML=ut,Ee=a(),p(te.$$.fragment),Ge=a(),ne=i("p"),ne.textContent=ft,Be=a(),se=i("table"),se.innerHTML=gt,Re=a(),ae=i("p"),ae.textContent=yt,Ke=a(),ie=i("p"),this.h()},l(e){const t=xt("svelte-u9bgzb",document.head);f=r(t,"META",{name:!0,content:!0}),t.forEach(n),w=l(e),g=r(e,"P",{}),kt(g).forEach(n),le=l(e),h($.$$.fragment,e),pe=l(e),h(M.$$.fragment,e),he=l(e),T=r(e,"P",{"data-svelte-h":!0}),o(T)!=="svelte-17r611h"&&(T.textContent=Fe),ce=l(e),b=r(e,"DIV",{class:!0,"data-svelte-h":!0}),o(b)!=="svelte-oxfng3"&&(b.innerHTML=Ye),me=l(e),v=r(e,"P",{"data-svelte-h":!0}),o(v)!=="svelte-v1s7i"&&(v.innerHTML=Oe),de=l(e),h(J.$$.fragment,e),ue=l(e),h(x.$$.fragment,e),fe=l(e),z=r(e,"P",{"data-svelte-h":!0}),o(z)!=="svelte-otoi2v"&&(z.innerHTML=et),ge=l(e),j=r(e,"P",{"data-svelte-h":!0}),o(j)!=="svelte-1ekviex"&&(j.innerHTML=tt),ye=l(e),h(U.$$.fragment,e),be=l(e),h(C.$$.fragment,e),ke=l(e),_=r(e,"P",{"data-svelte-h":!0}),o(_)!=="svelte-14wtj83"&&(_.innerHTML=nt),we=l(e),h(I.$$.fragment,e),$e=l(e),h(H.$$.fragment,e),Me=l(e),P=r(e,"P",{"data-svelte-h":!0}),o(P)!=="svelte-iqa3qe"&&(P.innerHTML=st),Te=l(e),h(k.$$.fragment,e),ve=l(e),h(L.$$.fragment,e),Je=l(e),h(Z.$$.fragment,e),xe=l(e),Q=r(e,"P",{"data-svelte-h":!0}),o(Q)!=="svelte-zfdd3v"&&(Q.innerHTML=at),ze=l(e),V=r(e,"P",{"data-svelte-h":!0}),o(V)!=="svelte-gg59f0"&&(V.innerHTML=lt),je=l(e),h(X.$$.fragment,e),Ue=l(e),h(D.$$.fragment,e),Ce=l(e),A=r(e,"P",{"data-svelte-h":!0}),o(A)!=="svelte-fivx29"&&(A.innerHTML=it),_e=l(e),S=r(e,"P",{"data-svelte-h":!0}),o(S)!=="svelte-s78c6e"&&(S.textContent=rt),Ie=l(e),h(W.$$.fragment,e),He=l(e),E=r(e,"P",{"data-svelte-h":!0}),o(E)!=="svelte-1tfbxh7"&&(E.innerHTML=ot),Pe=l(e),h(G.$$.fragment,e),Le=l(e),B=r(e,"P",{"data-svelte-h":!0}),o(B)!=="svelte-160xre2"&&(B.textContent=pt),Ze=l(e),R=r(e,"P",{"data-svelte-h":!0}),o(R)!=="svelte-ehh337"&&(R.textContent=ht),Qe=l(e),h(K.$$.fragment,e),Ve=l(e),h(N.$$.fragment,e),Xe=l(e),q=r(e,"P",{"data-svelte-h":!0}),o(q)!=="svelte-ff0n39"&&(q.innerHTML=ct),De=l(e),F=r(e,"P",{"data-svelte-h":!0}),o(F)!=="svelte-1umooif"&&(F.textContent=mt),Ae=l(e),h(Y.$$.fragment,e),Se=l(e),O=r(e,"P",{"data-svelte-h":!0}),o(O)!=="svelte-wshwmm"&&(O.innerHTML=dt),We=l(e),ee=r(e,"P",{"data-svelte-h":!0}),o(ee)!=="svelte-1pzr9nb"&&(ee.innerHTML=ut),Ee=l(e),h(te.$$.fragment,e),Ge=l(e),ne=r(e,"P",{"data-svelte-h":!0}),o(ne)!=="svelte-xthy2i"&&(ne.textContent=ft),Be=l(e),se=r(e,"TABLE",{"data-svelte-h":!0}),o(se)!=="svelte-165ywgm"&&(se.innerHTML=gt),Re=l(e),ae=r(e,"P",{"data-svelte-h":!0}),o(ae)!=="svelte-6t3b41"&&(ae.textContent=yt),Ke=l(e),ie=r(e,"P",{}),kt(ie).forEach(n),this.h()},h(){qe(f,"name","hf:doc:metadata"),qe(f,"content",It),qe(b,"class","flex justify-center")},m(e,t){zt(document.head,f),s(e,w,t),s(e,g,t),s(e,le,t),c($,e,t),s(e,pe,t),c(M,e,t),s(e,he,t),s(e,T,t),s(e,ce,t),s(e,b,t),s(e,me,t),s(e,v,t),s(e,de,t),c(J,e,t),s(e,ue,t),c(x,e,t),s(e,fe,t),s(e,z,t),s(e,ge,t),s(e,j,t),s(e,ye,t),c(U,e,t),s(e,be,t),c(C,e,t),s(e,ke,t),s(e,_,t),s(e,we,t),c(I,e,t),s(e,$e,t),c(H,e,t),s(e,Me,t),s(e,P,t),s(e,Te,t),c(k,e,t),s(e,ve,t),c(L,e,t),s(e,Je,t),c(Z,e,t),s(e,xe,t),s(e,Q,t),s(e,ze,t),s(e,V,t),s(e,je,t),c(X,e,t),s(e,Ue,t),c(D,e,t),s(e,Ce,t),s(e,A,t),s(e,_e,t),s(e,S,t),s(e,Ie,t),c(W,e,t),s(e,He,t),s(e,E,t),s(e,Pe,t),c(G,e,t),s(e,Le,t),s(e,B,t),s(e,Ze,t),s(e,R,t),s(e,Qe,t),c(K,e,t),s(e,Ve,t),c(N,e,t),s(e,Xe,t),s(e,q,t),s(e,De,t),s(e,F,t),s(e,Ae,t),c(Y,e,t),s(e,Se,t),s(e,O,t),s(e,We,t),s(e,ee,t),s(e,Ee,t),c(te,e,t),s(e,Ge,t),s(e,ne,t),s(e,Be,t),s(e,se,t),s(e,Re,t),s(e,ae,t),s(e,Ke,t),s(e,ie,t),Ne=!0},p(e,[t]){const bt={};t&2&&(bt.$$scope={dirty:t,ctx:e}),k.$set(bt)},i(e){Ne||(m($.$$.fragment,e),m(M.$$.fragment,e),m(J.$$.fragment,e),m(x.$$.fragment,e),m(U.$$.fragment,e),m(C.$$.fragment,e),m(I.$$.fragment,e),m(H.$$.fragment,e),m(k.$$.fragment,e),m(L.$$.fragment,e),m(Z.$$.fragment,e),m(X.$$.fragment,e),m(D.$$.fragment,e),m(W.$$.fragment,e),m(G.$$.fragment,e),m(K.$$.fragment,e),m(N.$$.fragment,e),m(Y.$$.fragment,e),m(te.$$.fragment,e),Ne=!0)},o(e){d($.$$.fragment,e),d(M.$$.fragment,e),d(J.$$.fragment,e),d(x.$$.fragment,e),d(U.$$.fragment,e),d(C.$$.fragment,e),d(I.$$.fragment,e),d(H.$$.fragment,e),d(k.$$.fragment,e),d(L.$$.fragment,e),d(Z.$$.fragment,e),d(X.$$.fragment,e),d(D.$$.fragment,e),d(W.$$.fragment,e),d(G.$$.fragment,e),d(K.$$.fragment,e),d(N.$$.fragment,e),d(Y.$$.fragment,e),d(te.$$.fragment,e),Ne=!1},d(e){e&&(n(w),n(g),n(le),n(pe),n(he),n(T),n(ce),n(b),n(me),n(v),n(de),n(ue),n(fe),n(z),n(ge),n(j),n(ye),n(be),n(ke),n(_),n(we),n($e),n(Me),n(P),n(Te),n(ve),n(Je),n(xe),n(Q),n(ze),n(V),n(je),n(Ue),n(Ce),n(A),n(_e),n(S),n(Ie),n(He),n(E),n(Pe),n(Le),n(B),n(Ze),n(R),n(Qe),n(Ve),n(Xe),n(q),n(De),n(F),n(Ae),n(Se),n(O),n(We),n(ee),n(Ee),n(Ge),n(ne),n(Be),n(se),n(Re),n(ae),n(Ke),n(ie)),n(f),u($,e),u(M,e),u(J,e),u(x,e),u(U,e),u(C,e),u(I,e),u(H,e),u(k,e),u(L,e),u(Z,e),u(X,e),u(D,e),u(W,e),u(G,e),u(K,e),u(N,e),u(Y,e),u(te,e)}}}const It='{"title":"Normalization and pre-tokenization","local":"normalization-and-pre-tokenization","sections":[{"title":"Normalization","local":"normalization","sections":[],"depth":2},{"title":"Pre-tokenization","local":"pre-tokenization","sections":[],"depth":2},{"title":"SentencePiece","local":"sentencepiece","sections":[],"depth":2},{"title":"Algorithm overview","local":"algorithm-overview","sections":[],"depth":2}],"depth":1}';function Ht(oe){return Mt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class At extends vt{constructor(f){super(),Jt(this,f,Ht,_t,$t,{})}}export{At as component};
