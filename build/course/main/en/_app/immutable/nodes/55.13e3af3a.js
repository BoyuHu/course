import{s as we,o as be}from"../chunks/scheduler.37c15a92.js";import{S as ye,i as xe,g as le,s as a,r as u,A as _e,h as ue,f as o,c as s,j as ge,u as c,x as ke,k as $e,y as Te,a as n,v as m,t as h,b as ve,d as l,w as p,p as Ae}from"../chunks/index.2bf4358c.js";import{C as Ce}from"../chunks/CourseFloatingBanner.15ba07e6.js";import{Q as b}from"../chunks/Question.668688bc.js";import{F as He}from"../chunks/FrameworkSwitchCourse.8d4d4ab6.js";import{H as w}from"../chunks/Heading.8ada512a.js";function ze(x){let r,f;return r=new b({props:{choices:[{text:"A tokenizer",explain:"Correct! All tokenizers have the <code>push_to_hub</code> method, and using it will push all the tokenizer files (vocabulary, architecture of the tokenizer, etc.) to a given repo. That's not the only right answer, though!",correct:!0},{text:"A model configuration",explain:"Right! All model configurations have the <code>push_to_hub</code> method, and using it will push them to a given repo. What else can you share?",correct:!0},{text:"A model",explain:"Correct! All models have the <code>push_to_hub</code> method, and using it will push them and their configuration files to a given repo. That's not all you can share, though.",correct:!0},{text:"All of the above with a dedicated callback",explain:"That's right â€” the <code>PushToHubCallback</code> will regularly send all of those objects to a repo during training.",correct:!0}]}}),{c(){u(r.$$.fragment)},l(i){c(r.$$.fragment,i)},m(i,$){m(r,i,$),f=!0},i(i){f||(l(r.$$.fragment,i),f=!0)},o(i){h(r.$$.fragment,i),f=!1},d(i){p(r,i)}}}function qe(x){let r,f;return r=new b({props:{choices:[{text:"A tokenizer",explain:"Correct! All tokenizers have the <code>push_to_hub</code> method, and using it will push all the tokenizer files (vocabulary, architecture of the tokenizer, etc.) to a given repo. That's not the only right answer, though!",correct:!0},{text:"A model configuration",explain:"Right! All model configurations have the <code>push_to_hub</code> method, and using it will push them to a given repo. What else can you share?",correct:!0},{text:"A model",explain:"Correct! All models have the <code>push_to_hub</code> method, and using it will push them and their configuration files to a given repo. That's not all you can share, though.",correct:!0},{text:"A Trainer",explain:"That's right â€” the <code>Trainer</code> also implements the <code>push_to_hub</code> method, and using it will upload the model, its configuration, the tokenizer, and a model card draft to a given repo. Try another answer!",correct:!0}]}}),{c(){u(r.$$.fragment)},l(i){c(r.$$.fragment,i)},m(i,$){m(r,i,$),f=!0},i(i){f||(l(r.$$.fragment,i),f=!0)},o(i){h(r.$$.fragment,i),f=!1},d(i){p(r,i)}}}function We(x){let r,f,i,$,y,G,_,Q,k,U,T,me="Letâ€™s test what you learned in this chapter!",Y,v,D,A,J,C,K,H,O,z,V,q,X,W,Z,P,ee,F,te,d,g,S,M,oe,R,ie,j,re,E,ne,I,ae,L,se,B,he;y=new He({props:{fw:x[0]}}),_=new w({props:{title:"End-of-chapter quiz",local:"end-of-chapter-quiz",headingTag:"h1"}}),k=new Ce({props:{chapter:4,classNames:"absolute z-10 right-0 top-0"}}),v=new w({props:{title:"1. What are models on the Hub limited to?",local:"1-what-are-models-on-the-hub-limited-to",headingTag:"h3"}}),A=new b({props:{choices:[{text:"Models from the ðŸ¤— Transformers library.",explain:"While models from the ðŸ¤— Transformers library are supported on the Hugging Face Hub, they're not the only ones!"},{text:"All models with a similar interface to ðŸ¤— Transformers.",explain:"No interface requirement is set when uploading models to the Hugging Face Hub. "},{text:"There are no limits.",explain:"Right! There are no limits when uploading models to the Hub.",correct:!0},{text:"Models that are in some way related to NLP.",explain:"No requirement is set regarding the field of application!"}]}}),C=new w({props:{title:"2. How can you manage models on the Hub?",local:"2-how-can-you-manage-models-on-the-hub",headingTag:"h3"}}),H=new b({props:{choices:[{text:"Through a GCP account.",explain:"Incorrect!"},{text:"Through peer-to-peer distribution.",explain:"Incorrect!"},{text:"Through git and git-lfs.",explain:"Correct! Models on the Hub are simple Git repositories, leveraging <code>git-lfs</code> for large files.",correct:!0}]}}),z=new w({props:{title:"3. What can you do using the Hugging Face Hub web interface?",local:"3-what-can-you-do-using-the-hugging-face-hub-web-interface",headingTag:"h3"}}),q=new b({props:{choices:[{text:"Fork an existing repository.",explain:"Forking a repository is not possible on the Hugging Face Hub."},{text:"Create a new model repository.",explain:"Correct! That's not all you can do, though.",correct:!0},{text:"Manage and edit files.",explain:"Correct! That's not the only right answer, though.",correct:!0},{text:"Upload files.",explain:"Right! But that's not all.",correct:!0},{text:"See diffs across versions.",explain:"Correct! That's not all you can do, though.",correct:!0}]}}),W=new w({props:{title:"4. What is a model card?",local:"4-what-is-a-model-card",headingTag:"h3"}}),P=new b({props:{choices:[{text:"A rough description of the model, therefore less important than the model and tokenizer files.",explain:"It is indeed a description of the model, but it's an important piece: if it's incomplete or absent the model's utility is drastically reduced."},{text:"A way to ensure reproducibility, reusability, and fairness.",explain:"Correct! Sharing the right information in the model card will help users leverage your model and be aware of its limits and biases. ",correct:!0},{text:"A Python file that can be run to retrieve information about the model.",explain:"Model cards are simple Markdown files."}]}}),F=new w({props:{title:"5. Which of these objects of the ðŸ¤— Transformers library can be directly shared on the Hub with push_to_hub() ?",local:"5-which-of-these-objects-of-the--transformers-library-can-be-directly-shared-on-the-hub-with-pushtohub-",headingTag:"h3"}});const pe=[qe,ze],N=[];function fe(e,t){return e[0]==="pt"?0:1}return d=fe(x),g=N[d]=pe[d](x),M=new w({props:{title:"6. What is the first step when using the push_to_hub() method or the CLI tools?",local:"6-what-is-the-first-step-when-using-the-pushtohub-method-or-the-cli-tools",headingTag:"h3"}}),R=new b({props:{choices:[{text:"Log in on the website.",explain:"This won't help you on your local machine."},{text:"Run 'huggingface-cli login' in a terminal.",explain:"Correct â€” this will download and cache your personal token.",correct:!0},{text:"Run 'notebook_login()' in a notebook.",explain:"Correct â€” this will display a widget to let you authenticate.",correct:!0}]}}),j=new w({props:{title:"7. Youâ€™re using a model and a tokenizer â€” how can you upload them to the Hub?",local:"7-youre-using-a-model-and-a-tokenizer--how-can-you-upload-them-to-the-hub",headingTag:"h3"}}),E=new b({props:{choices:[{text:"By calling the push_to_hub method directly on the model and the tokenizer.",explain:"Correct!",correct:!0},{text:"Within the Python runtime, by wrapping them in a <code>huggingface_hub</code> utility.",explain:"Models and tokenizers already benefit from <code>huggingface_hub</code> utilities: no need for additional wrapping!"},{text:"By saving them to disk and calling <code>transformers-cli upload-model</code>",explain:"The command <code>upload-model</code> does not exist."}]}}),I=new w({props:{title:"8. Which git operations can you do with the Repository class?",local:"8-which-git-operations-can-you-do-with-the-repository-class",headingTag:"h3"}}),L=new b({props:{choices:[{text:"A commit.",explain:"Correct, the <code>git_commit()</code> method is there for that.",correct:!0},{text:"A pull",explain:"That is the purpose of the <code>git_pull()</code> method.",correct:!0},{text:"A push",explain:"The method <code>git_push()</code> does this.",correct:!0},{text:"A merge",explain:"No, that operation will never be possible with this API."}]}}),{c(){r=le("meta"),f=a(),i=le("p"),$=a(),u(y.$$.fragment),G=a(),u(_.$$.fragment),Q=a(),u(k.$$.fragment),U=a(),T=le("p"),T.textContent=me,Y=a(),u(v.$$.fragment),D=a(),u(A.$$.fragment),J=a(),u(C.$$.fragment),K=a(),u(H.$$.fragment),O=a(),u(z.$$.fragment),V=a(),u(q.$$.fragment),X=a(),u(W.$$.fragment),Z=a(),u(P.$$.fragment),ee=a(),u(F.$$.fragment),te=a(),g.c(),S=a(),u(M.$$.fragment),oe=a(),u(R.$$.fragment),ie=a(),u(j.$$.fragment),re=a(),u(E.$$.fragment),ne=a(),u(I.$$.fragment),ae=a(),u(L.$$.fragment),se=a(),B=le("p"),this.h()},l(e){const t=_e("svelte-u9bgzb",document.head);r=ue(t,"META",{name:!0,content:!0}),t.forEach(o),f=s(e),i=ue(e,"P",{}),ge(i).forEach(o),$=s(e),c(y.$$.fragment,e),G=s(e),c(_.$$.fragment,e),Q=s(e),c(k.$$.fragment,e),U=s(e),T=ue(e,"P",{"data-svelte-h":!0}),ke(T)!=="svelte-19og2hy"&&(T.textContent=me),Y=s(e),c(v.$$.fragment,e),D=s(e),c(A.$$.fragment,e),J=s(e),c(C.$$.fragment,e),K=s(e),c(H.$$.fragment,e),O=s(e),c(z.$$.fragment,e),V=s(e),c(q.$$.fragment,e),X=s(e),c(W.$$.fragment,e),Z=s(e),c(P.$$.fragment,e),ee=s(e),c(F.$$.fragment,e),te=s(e),g.l(e),S=s(e),c(M.$$.fragment,e),oe=s(e),c(R.$$.fragment,e),ie=s(e),c(j.$$.fragment,e),re=s(e),c(E.$$.fragment,e),ne=s(e),c(I.$$.fragment,e),ae=s(e),c(L.$$.fragment,e),se=s(e),B=ue(e,"P",{}),ge(B).forEach(o),this.h()},h(){$e(r,"name","hf:doc:metadata"),$e(r,"content",Pe)},m(e,t){Te(document.head,r),n(e,f,t),n(e,i,t),n(e,$,t),m(y,e,t),n(e,G,t),m(_,e,t),n(e,Q,t),m(k,e,t),n(e,U,t),n(e,T,t),n(e,Y,t),m(v,e,t),n(e,D,t),m(A,e,t),n(e,J,t),m(C,e,t),n(e,K,t),m(H,e,t),n(e,O,t),m(z,e,t),n(e,V,t),m(q,e,t),n(e,X,t),m(W,e,t),n(e,Z,t),m(P,e,t),n(e,ee,t),m(F,e,t),n(e,te,t),N[d].m(e,t),n(e,S,t),m(M,e,t),n(e,oe,t),m(R,e,t),n(e,ie,t),m(j,e,t),n(e,re,t),m(E,e,t),n(e,ne,t),m(I,e,t),n(e,ae,t),m(L,e,t),n(e,se,t),n(e,B,t),he=!0},p(e,[t]){const de={};t&1&&(de.fw=e[0]),y.$set(de);let ce=d;d=fe(e),d!==ce&&(Ae(),h(N[ce],1,1,()=>{N[ce]=null}),ve(),g=N[d],g||(g=N[d]=pe[d](e),g.c()),l(g,1),g.m(S.parentNode,S))},i(e){he||(l(y.$$.fragment,e),l(_.$$.fragment,e),l(k.$$.fragment,e),l(v.$$.fragment,e),l(A.$$.fragment,e),l(C.$$.fragment,e),l(H.$$.fragment,e),l(z.$$.fragment,e),l(q.$$.fragment,e),l(W.$$.fragment,e),l(P.$$.fragment,e),l(F.$$.fragment,e),l(g),l(M.$$.fragment,e),l(R.$$.fragment,e),l(j.$$.fragment,e),l(E.$$.fragment,e),l(I.$$.fragment,e),l(L.$$.fragment,e),he=!0)},o(e){h(y.$$.fragment,e),h(_.$$.fragment,e),h(k.$$.fragment,e),h(v.$$.fragment,e),h(A.$$.fragment,e),h(C.$$.fragment,e),h(H.$$.fragment,e),h(z.$$.fragment,e),h(q.$$.fragment,e),h(W.$$.fragment,e),h(P.$$.fragment,e),h(F.$$.fragment,e),h(g),h(M.$$.fragment,e),h(R.$$.fragment,e),h(j.$$.fragment,e),h(E.$$.fragment,e),h(I.$$.fragment,e),h(L.$$.fragment,e),he=!1},d(e){e&&(o(f),o(i),o($),o(G),o(Q),o(U),o(T),o(Y),o(D),o(J),o(K),o(O),o(V),o(X),o(Z),o(ee),o(te),o(S),o(oe),o(ie),o(re),o(ne),o(ae),o(se),o(B)),o(r),p(y,e),p(_,e),p(k,e),p(v,e),p(A,e),p(C,e),p(H,e),p(z,e),p(q,e),p(W,e),p(P,e),p(F,e),N[d].d(e),p(M,e),p(R,e),p(j,e),p(E,e),p(I,e),p(L,e)}}}const Pe='{"title":"End-of-chapter quiz","local":"end-of-chapter-quiz","sections":[{"title":"1. What are models on the Hub limited to?","local":"1-what-are-models-on-the-hub-limited-to","sections":[],"depth":3},{"title":"2. How can you manage models on the Hub?","local":"2-how-can-you-manage-models-on-the-hub","sections":[],"depth":3},{"title":"3. What can you do using the Hugging Face Hub web interface?","local":"3-what-can-you-do-using-the-hugging-face-hub-web-interface","sections":[],"depth":3},{"title":"4. What is a model card?","local":"4-what-is-a-model-card","sections":[],"depth":3},{"title":"5. Which of these objects of the ðŸ¤— Transformers library can be directly shared on the Hub with push_to_hub() ?","local":"5-which-of-these-objects-of-the--transformers-library-can-be-directly-shared-on-the-hub-with-pushtohub-","sections":[],"depth":3},{"title":"6. What is the first step when using the push_to_hub() method or the CLI tools?","local":"6-what-is-the-first-step-when-using-the-pushtohub-method-or-the-cli-tools","sections":[],"depth":3},{"title":"7. Youâ€™re using a model and a tokenizer â€” how can you upload them to the Hub?","local":"7-youre-using-a-model-and-a-tokenizer--how-can-you-upload-them-to-the-hub","sections":[],"depth":3},{"title":"8. Which git operations can you do with the Repository class?","local":"8-which-git-operations-can-you-do-with-the-repository-class","sections":[],"depth":3}],"depth":1}';function Fe(x,r,f){let i="pt";return be(()=>{const $=new URLSearchParams(window.location.search);f(0,i=$.get("fw")||"pt")}),[i]}class Ne extends ye{constructor(r){super(),xe(this,r,Fe,We,we,{})}}export{Ne as component};
