import{s as Je,o as fe,n as Vt}from"../chunks/scheduler.37c15a92.js";import{S as Ue,i as ge,g as o,s as l,r as p,A as Ie,h as d,f as a,c as n,j as Te,u,x as h,k as me,y as je,a as s,v as M,d as y,t as w,w as c}from"../chunks/index.2bf4358c.js";import{T as Dt}from"../chunks/Tip.363c041f.js";import{Y as Ce}from"../chunks/Youtube.1e50a667.js";import{C as m}from"../chunks/CodeBlock.4f5fc1ad.js";import{C as $e}from"../chunks/CourseFloatingBanner.15ba07e6.js";import{H as Yt}from"../chunks/Heading.8ada512a.js";function be(f){let i,T="‚úé If you‚Äôre wondering why there‚Äôs a <code>!</code> character in the above shell commands, that‚Äôs because we‚Äôre running them within a Jupyter notebook. Simply remove the prefix if you want to download and unzip the dataset within a terminal.";return{c(){i=o("p"),i.innerHTML=T},l(r){i=d(r,"P",{"data-svelte-h":!0}),h(i)!=="svelte-c2zf72"&&(i.innerHTML=T)},m(r,J){s(r,i,J)},p:Vt,d(r){r&&a(i)}}}function qe(f){let i,T='The <code>data_files</code> argument of the <code>load_dataset()</code> function is quite flexible and can be either a single file path, a list of file paths, or a dictionary that maps split names to file paths. You can also glob files that match a specified pattern according to the rules used by the Unix shell (e.g., you can glob all the JSON files in a directory as a single split by setting <code>data_files=&quot;*.json&quot;</code>). See the ü§ó Datasets <a href="https://huggingface.co/docs/datasets/loading#local-and-remote-files" rel="nofollow">documentation</a> for more details.';return{c(){i=o("p"),i.innerHTML=T},l(r){i=d(r,"P",{"data-svelte-h":!0}),h(i)!=="svelte-1ulrdsx"&&(i.innerHTML=T)},m(r,J){s(r,i,J)},p:Vt,d(r){r&&a(i)}}}function _e(f){let i,T='‚úèÔ∏è <strong>Try it out!</strong> Pick another dataset hosted on GitHub or the <a href="https://archive.ics.uci.edu/ml/index.php" rel="nofollow">UCI Machine Learning Repository</a> and try loading it both locally and remotely using the techniques introduced above. For bonus points, try loading a dataset that‚Äôs stored in a CSV or text format (see the <a href="https://huggingface.co/docs/datasets/loading#local-and-remote-files" rel="nofollow">documentation</a> for more information on these formats).';return{c(){i=o("p"),i.innerHTML=T},l(r){i=d(r,"P",{"data-svelte-h":!0}),h(i)!=="svelte-pgnyqh"&&(i.innerHTML=T)},m(r,J){s(r,i,J)},p:Vt,d(r){r&&a(i)}}}function Qe(f){let i,T,r,J,j,ot,C,dt,$,Wt='You know how to use the <a href="https://huggingface.co/datasets" rel="nofollow">Hugging Face Hub</a> to download datasets, but you‚Äôll often find yourself working with data that is stored either on your laptop or on a remote server. In this section we‚Äôll show you how ü§ó Datasets can be used to load datasets that aren‚Äôt available on the Hugging Face Hub.',rt,b,pt,q,ut,_,Pt="ü§ó Datasets provides loading scripts to handle the loading of local and remote datasets. It supports several common data formats, such as:",Mt,Q,Ot='<thead><tr><th align="center">Data format</th> <th align="center">Loading script</th> <th align="center">Example</th></tr></thead> <tbody><tr><td align="center">CSV &amp; TSV</td> <td align="center"><code>csv</code></td> <td align="center"><code>load_dataset(&quot;csv&quot;, data_files=&quot;my_file.csv&quot;)</code></td></tr> <tr><td align="center">Text files</td> <td align="center"><code>text</code></td> <td align="center"><code>load_dataset(&quot;text&quot;, data_files=&quot;my_file.txt&quot;)</code></td></tr> <tr><td align="center">JSON &amp; JSON Lines</td> <td align="center"><code>json</code></td> <td align="center"><code>load_dataset(&quot;json&quot;, data_files=&quot;my_file.jsonl&quot;)</code></td></tr> <tr><td align="center">Pickled DataFrames</td> <td align="center"><code>pandas</code></td> <td align="center"><code>load_dataset(&quot;pandas&quot;, data_files=&quot;my_dataframe.pkl&quot;)</code></td></tr></tbody>',yt,R,Kt="As shown in the table, for each data format we just need to specify the type of loading script in the <code>load_dataset()</code> function, along with a <code>data_files</code> argument that specifies the path to one or more files. Let‚Äôs start by loading a dataset from local files; later we‚Äôll see how to do the same with remote files.",wt,A,ct,v,te='For this example we‚Äôll use the <a href="https://github.com/crux82/squad-it/" rel="nofollow">SQuAD-it dataset</a>, which is a large-scale dataset for question answering in Italian.',ht,k,ee="The training and test splits are hosted on GitHub, so we can download them with a simple <code>wget</code> command:",Tt,X,mt,x,ae="This will download two compressed files called <em>SQuAD_it-train.json.gz</em> and <em>SQuAD_it-test.json.gz</em>, which we can decompress with the Linux <code>gzip</code> command:",Jt,B,ft,G,Ut,N,se="We can see that the compressed files have been replaced with <em>SQuAD_it-train.json</em> and <em>SQuAD_it-test.json</em>, and that the data is stored in the JSON format.",gt,U,It,F,le="To load a JSON file with the <code>load_dataset()</code> function, we just need to know if we‚Äôre dealing with ordinary JSON (similar to a nested dictionary) or JSON Lines (line-separated JSON). Like many question answering datasets, SQuAD-it uses the nested format, with all the text stored in a <code>data</code> field. This means we can load the dataset by specifying the <code>field</code> argument as follows:",jt,S,Ct,Z,ne="By default, loading local files creates a <code>DatasetDict</code> object with a <code>train</code> split. We can see this by inspecting the <code>squad_it_dataset</code> object:",$t,z,bt,L,qt,H,ie="This shows us the number of rows and the column names associated with the training set. We can view one of the examples by indexing into the <code>train</code> split as follows:",_t,E,Qt,Y,Rt,D,oe="Great, we‚Äôve loaded our first local dataset! But while this worked for the training set, what we really want is to include both the <code>train</code> and <code>test</code> splits in a single <code>DatasetDict</code> object so we can apply <code>Dataset.map()</code> functions across both splits at once. To do this, we can provide a dictionary to the <code>data_files</code> argument that maps each split name to a file associated with that split:",At,V,vt,W,kt,P,de="This is exactly what we wanted. Now, we can apply various preprocessing techniques to clean up the data, tokenize the reviews, and so on.",Xt,g,xt,O,re="The loading scripts in ü§ó Datasets actually support automatic decompression of the input files, so we could have skipped the use of <code>gzip</code> by pointing the <code>data_files</code> argument directly to the compressed files:",Bt,K,Gt,tt,pe="This can be useful if you don‚Äôt want to manually decompress many GZIP files. The automatic decompression also applies to other common formats like ZIP and TAR, so you just need to point <code>data_files</code> to the compressed files and you‚Äôre good to go!",Nt,et,ue="Now that you know how to load local files on your laptop or desktop, let‚Äôs take a look at loading remote files.",Ft,at,St,st,Me="If you‚Äôre working as a data scientist or coder in a company, there‚Äôs a good chance the datasets you want to analyze are stored on some remote server. Fortunately, loading remote files is just as simple as loading local ones! Instead of providing a path to local files, we point the <code>data_files</code> argument of <code>load_dataset()</code> to one or more URLs where the remote files are stored. For example, for the SQuAD-it dataset hosted on GitHub, we can just point <code>data_files</code> to the <em>SQuAD_it-*.json.gz</em> URLs as follows:",Zt,lt,zt,nt,ye="This returns the same <code>DatasetDict</code> object obtained above, but saves us the step of manually downloading and decompressing the <em>SQuAD_it-*.json.gz</em> files. This wraps up our foray into the various ways to load datasets that aren‚Äôt hosted on the Hugging Face Hub. Now that we‚Äôve got a dataset to play with, let‚Äôs get our hands dirty with various data-wrangling techniques!",Lt,I,Ht,it,Et;return j=new Yt({props:{title:"What if my dataset isn‚Äôt on the Hub?",local:"what-if-my-dataset-isnt-on-the-hub",headingTag:"h1"}}),C=new $e({props:{chapter:5,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter5/section2.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter5/section2.ipynb"}]}}),b=new Ce({props:{id:"HyQgpJTkRdE"}}),q=new Yt({props:{title:"Working with local and remote datasets",local:"working-with-local-and-remote-datasets",headingTag:"h2"}}),A=new Yt({props:{title:"Loading a local dataset",local:"loading-a-local-dataset",headingTag:"h2"}}),X=new m({props:{code:"IXdnZXQlMjBodHRwcyUzQSUyRiUyRmdpdGh1Yi5jb20lMkZjcnV4ODIlMkZzcXVhZC1pdCUyRnJhdyUyRm1hc3RlciUyRlNRdUFEX2l0LXRyYWluLmpzb24uZ3olMEEhd2dldCUyMGh0dHBzJTNBJTJGJTJGZ2l0aHViLmNvbSUyRmNydXg4MiUyRnNxdWFkLWl0JTJGcmF3JTJGbWFzdGVyJTJGU1F1QURfaXQtdGVzdC5qc29uLmd6",highlighted:`!wget https://github.com/crux82/squad-it/raw/master/SQuAD_it-train.json.gz
!wget https://github.com/crux82/squad-it/raw/master/SQuAD_it-test.json.gz`,wrap:!1}}),B=new m({props:{code:"IWd6aXAlMjAtZGt2JTIwU1F1QURfaXQtKi5qc29uLmd6",highlighted:"!gzip -dkv SQuAD_it-*.json.gz",wrap:!1}}),G=new m({props:{code:"U1F1QURfaXQtdGVzdC5qc29uLmd6JTNBJTA5JTIwJTIwJTIwODcuNCUyNSUyMC0tJTIwcmVwbGFjZWQlMjB3aXRoJTIwU1F1QURfaXQtdGVzdC5qc29uJTBBU1F1QURfaXQtdHJhaW4uanNvbi5neiUzQSUwOSUyMCUyMCUyMDgyLjIlMjUlMjAtLSUyMHJlcGxhY2VkJTIwd2l0aCUyMFNRdUFEX2l0LXRyYWluLmpzb24=",highlighted:`SQuAD_it-test.json.gz:	   87.4% -- replaced with SQuAD_it-test.json
SQuAD_it-train.json.gz:	   82.2% -- replaced with SQuAD_it-train.json`,wrap:!1}}),U=new Dt({props:{$$slots:{default:[be]},$$scope:{ctx:f}}}),S=new m({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBc3F1YWRfaXRfZGF0YXNldCUyMCUzRCUyMGxvYWRfZGF0YXNldCglMjJqc29uJTIyJTJDJTIwZGF0YV9maWxlcyUzRCUyMlNRdUFEX2l0LXRyYWluLmpzb24lMjIlMkMlMjBmaWVsZCUzRCUyMmRhdGElMjIp",highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

squad_it_dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=<span class="hljs-string">&quot;SQuAD_it-train.json&quot;</span>, field=<span class="hljs-string">&quot;data&quot;</span>)`,wrap:!1}}),z=new m({props:{code:"c3F1YWRfaXRfZGF0YXNldA==",highlighted:"squad_it_dataset",wrap:!1}}),L=new m({props:{code:"RGF0YXNldERpY3QoJTdCJTBBJTIwJTIwJTIwJTIwdHJhaW4lM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ3RpdGxlJyUyQyUyMCdwYXJhZ3JhcGhzJyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwNDQyJTBBJTIwJTIwJTIwJTIwJTdEKSUwQSU3RCk=",highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;paragraphs&#x27;</span>],
        num_rows: <span class="hljs-number">442</span>
    })
})`,wrap:!1}}),E=new m({props:{code:"c3F1YWRfaXRfZGF0YXNldCU1QiUyMnRyYWluJTIyJTVEJTVCMCU1RA==",highlighted:'squad_it_dataset[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-number">0</span>]',wrap:!1}}),Y=new m({props:{code:"JTdCJTBBJTIwJTIwJTIwJTIwJTIydGl0bGUlMjIlM0ElMjAlMjJUZXJyZW1vdG8lMjBkZWwlMjBTaWNodWFuJTIwZGVsJTIwMjAwOCUyMiUyQyUwQSUyMCUyMCUyMCUyMCUyMnBhcmFncmFwaHMlMjIlM0ElMjAlNUIlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJjb250ZXh0JTIyJTNBJTIwJTIySWwlMjB0ZXJyZW1vdG8lMjBkZWwlMjBTaWNodWFuJTIwZGVsJTIwMjAwOCUyMG8lMjBpbCUyMHRlcnJlbW90by4uLiUyMiUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMnFhcyUyMiUzQSUyMCU1QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMmFuc3dlcnMlMjIlM0ElMjAlNUIlN0IlMjJhbnN3ZXJfc3RhcnQlMjIlM0ElMjAyOSUyQyUyMCUyMnRleHQlMjIlM0ElMjAlMjIyMDA4JTIyJTdEJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIyaWQlMjIlM0ElMjAlMjI1NmNkY2E3ODYyZDI5NTE0MDBmYTY4MjYlMjIlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjJxdWVzdGlvbiUyMiUzQSUyMCUyMkluJTIwcXVhbGUlMjBhbm5vJTIwc2klMjAlQzMlQTglMjB2ZXJpZmljYXRvJTIwaWwlMjB0ZXJyZW1vdG8lMjBuZWwlMjBTaWNodWFuJTNGJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwLi4uJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTVEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTdEJTJDJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwLi4uJTBBJTIwJTIwJTIwJTIwJTVEJTJDJTBBJTdE",highlighted:`{
    <span class="hljs-string">&quot;title&quot;</span>: <span class="hljs-string">&quot;Terremoto del Sichuan del 2008&quot;</span>,
    <span class="hljs-string">&quot;paragraphs&quot;</span>: [
        {
            <span class="hljs-string">&quot;context&quot;</span>: <span class="hljs-string">&quot;Il terremoto del Sichuan del 2008 o il terremoto...&quot;</span>,
            <span class="hljs-string">&quot;qas&quot;</span>: [
                {
                    <span class="hljs-string">&quot;answers&quot;</span>: [{<span class="hljs-string">&quot;answer_start&quot;</span>: <span class="hljs-number">29</span>, <span class="hljs-string">&quot;text&quot;</span>: <span class="hljs-string">&quot;2008&quot;</span>}],
                    <span class="hljs-string">&quot;id&quot;</span>: <span class="hljs-string">&quot;56cdca7862d2951400fa6826&quot;</span>,
                    <span class="hljs-string">&quot;question&quot;</span>: <span class="hljs-string">&quot;In quale anno si √® verificato il terremoto nel Sichuan?&quot;</span>,
                },
                ...
            ],
        },
        ...
    ],
}`,wrap:!1}}),V=new m({props:{code:"ZGF0YV9maWxlcyUyMCUzRCUyMCU3QiUyMnRyYWluJTIyJTNBJTIwJTIyU1F1QURfaXQtdHJhaW4uanNvbiUyMiUyQyUyMCUyMnRlc3QlMjIlM0ElMjAlMjJTUXVBRF9pdC10ZXN0Lmpzb24lMjIlN0QlMEFzcXVhZF9pdF9kYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmpzb24lMjIlMkMlMjBkYXRhX2ZpbGVzJTNEZGF0YV9maWxlcyUyQyUyMGZpZWxkJTNEJTIyZGF0YSUyMiklMEFzcXVhZF9pdF9kYXRhc2V0",highlighted:`data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;SQuAD_it-train.json&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;SQuAD_it-test.json&quot;</span>}
squad_it_dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=data_files, field=<span class="hljs-string">&quot;data&quot;</span>)
squad_it_dataset`,wrap:!1}}),W=new m({props:{code:"RGF0YXNldERpY3QoJTdCJTBBJTIwJTIwJTIwJTIwdHJhaW4lM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ3RpdGxlJyUyQyUyMCdwYXJhZ3JhcGhzJyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwNDQyJTBBJTIwJTIwJTIwJTIwJTdEKSUwQSUyMCUyMCUyMCUyMHRlc3QlM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ3RpdGxlJyUyQyUyMCdwYXJhZ3JhcGhzJyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwNDglMEElMjAlMjAlMjAlMjAlN0QpJTBBJTdEKQ==",highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;paragraphs&#x27;</span>],
        num_rows: <span class="hljs-number">442</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;title&#x27;</span>, <span class="hljs-string">&#x27;paragraphs&#x27;</span>],
        num_rows: <span class="hljs-number">48</span>
    })
})`,wrap:!1}}),g=new Dt({props:{$$slots:{default:[qe]},$$scope:{ctx:f}}}),K=new m({props:{code:"ZGF0YV9maWxlcyUyMCUzRCUyMCU3QiUyMnRyYWluJTIyJTNBJTIwJTIyU1F1QURfaXQtdHJhaW4uanNvbi5neiUyMiUyQyUyMCUyMnRlc3QlMjIlM0ElMjAlMjJTUXVBRF9pdC10ZXN0Lmpzb24uZ3olMjIlN0QlMEFzcXVhZF9pdF9kYXRhc2V0JTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmpzb24lMjIlMkMlMjBkYXRhX2ZpbGVzJTNEZGF0YV9maWxlcyUyQyUyMGZpZWxkJTNEJTIyZGF0YSUyMik=",highlighted:`data_files = {<span class="hljs-string">&quot;train&quot;</span>: <span class="hljs-string">&quot;SQuAD_it-train.json.gz&quot;</span>, <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;SQuAD_it-test.json.gz&quot;</span>}
squad_it_dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=data_files, field=<span class="hljs-string">&quot;data&quot;</span>)`,wrap:!1}}),at=new Yt({props:{title:"Loading a remote dataset",local:"loading-a-remote-dataset",headingTag:"h2"}}),lt=new m({props:{code:"dXJsJTIwJTNEJTIwJTIyaHR0cHMlM0ElMkYlMkZnaXRodWIuY29tJTJGY3J1eDgyJTJGc3F1YWQtaXQlMkZyYXclMkZtYXN0ZXIlMkYlMjIlMEFkYXRhX2ZpbGVzJTIwJTNEJTIwJTdCJTBBJTIwJTIwJTIwJTIwJTIydHJhaW4lMjIlM0ElMjB1cmwlMjAlMkIlMjAlMjJTUXVBRF9pdC10cmFpbi5qc29uLmd6JTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIydGVzdCUyMiUzQSUyMHVybCUyMCUyQiUyMCUyMlNRdUFEX2l0LXRlc3QuanNvbi5neiUyMiUyQyUwQSU3RCUwQXNxdWFkX2l0X2RhdGFzZXQlMjAlM0QlMjBsb2FkX2RhdGFzZXQoJTIyanNvbiUyMiUyQyUyMGRhdGFfZmlsZXMlM0RkYXRhX2ZpbGVzJTJDJTIwZmllbGQlM0QlMjJkYXRhJTIyKQ==",highlighted:`url = <span class="hljs-string">&quot;https://github.com/crux82/squad-it/raw/master/&quot;</span>
data_files = {
    <span class="hljs-string">&quot;train&quot;</span>: url + <span class="hljs-string">&quot;SQuAD_it-train.json.gz&quot;</span>,
    <span class="hljs-string">&quot;test&quot;</span>: url + <span class="hljs-string">&quot;SQuAD_it-test.json.gz&quot;</span>,
}
squad_it_dataset = load_dataset(<span class="hljs-string">&quot;json&quot;</span>, data_files=data_files, field=<span class="hljs-string">&quot;data&quot;</span>)`,wrap:!1}}),I=new Dt({props:{$$slots:{default:[_e]},$$scope:{ctx:f}}}),{c(){i=o("meta"),T=l(),r=o("p"),J=l(),p(j.$$.fragment),ot=l(),p(C.$$.fragment),dt=l(),$=o("p"),$.innerHTML=Wt,rt=l(),p(b.$$.fragment),pt=l(),p(q.$$.fragment),ut=l(),_=o("p"),_.textContent=Pt,Mt=l(),Q=o("table"),Q.innerHTML=Ot,yt=l(),R=o("p"),R.innerHTML=Kt,wt=l(),p(A.$$.fragment),ct=l(),v=o("p"),v.innerHTML=te,ht=l(),k=o("p"),k.innerHTML=ee,Tt=l(),p(X.$$.fragment),mt=l(),x=o("p"),x.innerHTML=ae,Jt=l(),p(B.$$.fragment),ft=l(),p(G.$$.fragment),Ut=l(),N=o("p"),N.innerHTML=se,gt=l(),p(U.$$.fragment),It=l(),F=o("p"),F.innerHTML=le,jt=l(),p(S.$$.fragment),Ct=l(),Z=o("p"),Z.innerHTML=ne,$t=l(),p(z.$$.fragment),bt=l(),p(L.$$.fragment),qt=l(),H=o("p"),H.innerHTML=ie,_t=l(),p(E.$$.fragment),Qt=l(),p(Y.$$.fragment),Rt=l(),D=o("p"),D.innerHTML=oe,At=l(),p(V.$$.fragment),vt=l(),p(W.$$.fragment),kt=l(),P=o("p"),P.textContent=de,Xt=l(),p(g.$$.fragment),xt=l(),O=o("p"),O.innerHTML=re,Bt=l(),p(K.$$.fragment),Gt=l(),tt=o("p"),tt.innerHTML=pe,Nt=l(),et=o("p"),et.textContent=ue,Ft=l(),p(at.$$.fragment),St=l(),st=o("p"),st.innerHTML=Me,Zt=l(),p(lt.$$.fragment),zt=l(),nt=o("p"),nt.innerHTML=ye,Lt=l(),p(I.$$.fragment),Ht=l(),it=o("p"),this.h()},l(t){const e=Ie("svelte-u9bgzb",document.head);i=d(e,"META",{name:!0,content:!0}),e.forEach(a),T=n(t),r=d(t,"P",{}),Te(r).forEach(a),J=n(t),u(j.$$.fragment,t),ot=n(t),u(C.$$.fragment,t),dt=n(t),$=d(t,"P",{"data-svelte-h":!0}),h($)!=="svelte-sz0u0k"&&($.innerHTML=Wt),rt=n(t),u(b.$$.fragment,t),pt=n(t),u(q.$$.fragment,t),ut=n(t),_=d(t,"P",{"data-svelte-h":!0}),h(_)!=="svelte-qw645d"&&(_.textContent=Pt),Mt=n(t),Q=d(t,"TABLE",{"data-svelte-h":!0}),h(Q)!=="svelte-19mvbg5"&&(Q.innerHTML=Ot),yt=n(t),R=d(t,"P",{"data-svelte-h":!0}),h(R)!=="svelte-14kil8q"&&(R.innerHTML=Kt),wt=n(t),u(A.$$.fragment,t),ct=n(t),v=d(t,"P",{"data-svelte-h":!0}),h(v)!=="svelte-3ydotp"&&(v.innerHTML=te),ht=n(t),k=d(t,"P",{"data-svelte-h":!0}),h(k)!=="svelte-1r8k6ga"&&(k.innerHTML=ee),Tt=n(t),u(X.$$.fragment,t),mt=n(t),x=d(t,"P",{"data-svelte-h":!0}),h(x)!=="svelte-1o5o6v1"&&(x.innerHTML=ae),Jt=n(t),u(B.$$.fragment,t),ft=n(t),u(G.$$.fragment,t),Ut=n(t),N=d(t,"P",{"data-svelte-h":!0}),h(N)!=="svelte-o2x4q5"&&(N.innerHTML=se),gt=n(t),u(U.$$.fragment,t),It=n(t),F=d(t,"P",{"data-svelte-h":!0}),h(F)!=="svelte-1014a18"&&(F.innerHTML=le),jt=n(t),u(S.$$.fragment,t),Ct=n(t),Z=d(t,"P",{"data-svelte-h":!0}),h(Z)!=="svelte-jktzys"&&(Z.innerHTML=ne),$t=n(t),u(z.$$.fragment,t),bt=n(t),u(L.$$.fragment,t),qt=n(t),H=d(t,"P",{"data-svelte-h":!0}),h(H)!=="svelte-fkm736"&&(H.innerHTML=ie),_t=n(t),u(E.$$.fragment,t),Qt=n(t),u(Y.$$.fragment,t),Rt=n(t),D=d(t,"P",{"data-svelte-h":!0}),h(D)!=="svelte-13g4lu1"&&(D.innerHTML=oe),At=n(t),u(V.$$.fragment,t),vt=n(t),u(W.$$.fragment,t),kt=n(t),P=d(t,"P",{"data-svelte-h":!0}),h(P)!=="svelte-kwuerg"&&(P.textContent=de),Xt=n(t),u(g.$$.fragment,t),xt=n(t),O=d(t,"P",{"data-svelte-h":!0}),h(O)!=="svelte-1b30j64"&&(O.innerHTML=re),Bt=n(t),u(K.$$.fragment,t),Gt=n(t),tt=d(t,"P",{"data-svelte-h":!0}),h(tt)!=="svelte-1a7ni7o"&&(tt.innerHTML=pe),Nt=n(t),et=d(t,"P",{"data-svelte-h":!0}),h(et)!=="svelte-dmjd2n"&&(et.textContent=ue),Ft=n(t),u(at.$$.fragment,t),St=n(t),st=d(t,"P",{"data-svelte-h":!0}),h(st)!=="svelte-ydrfit"&&(st.innerHTML=Me),Zt=n(t),u(lt.$$.fragment,t),zt=n(t),nt=d(t,"P",{"data-svelte-h":!0}),h(nt)!=="svelte-1gksz7y"&&(nt.innerHTML=ye),Lt=n(t),u(I.$$.fragment,t),Ht=n(t),it=d(t,"P",{}),Te(it).forEach(a),this.h()},h(){me(i,"name","hf:doc:metadata"),me(i,"content",Re)},m(t,e){je(document.head,i),s(t,T,e),s(t,r,e),s(t,J,e),M(j,t,e),s(t,ot,e),M(C,t,e),s(t,dt,e),s(t,$,e),s(t,rt,e),M(b,t,e),s(t,pt,e),M(q,t,e),s(t,ut,e),s(t,_,e),s(t,Mt,e),s(t,Q,e),s(t,yt,e),s(t,R,e),s(t,wt,e),M(A,t,e),s(t,ct,e),s(t,v,e),s(t,ht,e),s(t,k,e),s(t,Tt,e),M(X,t,e),s(t,mt,e),s(t,x,e),s(t,Jt,e),M(B,t,e),s(t,ft,e),M(G,t,e),s(t,Ut,e),s(t,N,e),s(t,gt,e),M(U,t,e),s(t,It,e),s(t,F,e),s(t,jt,e),M(S,t,e),s(t,Ct,e),s(t,Z,e),s(t,$t,e),M(z,t,e),s(t,bt,e),M(L,t,e),s(t,qt,e),s(t,H,e),s(t,_t,e),M(E,t,e),s(t,Qt,e),M(Y,t,e),s(t,Rt,e),s(t,D,e),s(t,At,e),M(V,t,e),s(t,vt,e),M(W,t,e),s(t,kt,e),s(t,P,e),s(t,Xt,e),M(g,t,e),s(t,xt,e),s(t,O,e),s(t,Bt,e),M(K,t,e),s(t,Gt,e),s(t,tt,e),s(t,Nt,e),s(t,et,e),s(t,Ft,e),M(at,t,e),s(t,St,e),s(t,st,e),s(t,Zt,e),M(lt,t,e),s(t,zt,e),s(t,nt,e),s(t,Lt,e),M(I,t,e),s(t,Ht,e),s(t,it,e),Et=!0},p(t,[e]){const we={};e&2&&(we.$$scope={dirty:e,ctx:t}),U.$set(we);const ce={};e&2&&(ce.$$scope={dirty:e,ctx:t}),g.$set(ce);const he={};e&2&&(he.$$scope={dirty:e,ctx:t}),I.$set(he)},i(t){Et||(y(j.$$.fragment,t),y(C.$$.fragment,t),y(b.$$.fragment,t),y(q.$$.fragment,t),y(A.$$.fragment,t),y(X.$$.fragment,t),y(B.$$.fragment,t),y(G.$$.fragment,t),y(U.$$.fragment,t),y(S.$$.fragment,t),y(z.$$.fragment,t),y(L.$$.fragment,t),y(E.$$.fragment,t),y(Y.$$.fragment,t),y(V.$$.fragment,t),y(W.$$.fragment,t),y(g.$$.fragment,t),y(K.$$.fragment,t),y(at.$$.fragment,t),y(lt.$$.fragment,t),y(I.$$.fragment,t),Et=!0)},o(t){w(j.$$.fragment,t),w(C.$$.fragment,t),w(b.$$.fragment,t),w(q.$$.fragment,t),w(A.$$.fragment,t),w(X.$$.fragment,t),w(B.$$.fragment,t),w(G.$$.fragment,t),w(U.$$.fragment,t),w(S.$$.fragment,t),w(z.$$.fragment,t),w(L.$$.fragment,t),w(E.$$.fragment,t),w(Y.$$.fragment,t),w(V.$$.fragment,t),w(W.$$.fragment,t),w(g.$$.fragment,t),w(K.$$.fragment,t),w(at.$$.fragment,t),w(lt.$$.fragment,t),w(I.$$.fragment,t),Et=!1},d(t){t&&(a(T),a(r),a(J),a(ot),a(dt),a($),a(rt),a(pt),a(ut),a(_),a(Mt),a(Q),a(yt),a(R),a(wt),a(ct),a(v),a(ht),a(k),a(Tt),a(mt),a(x),a(Jt),a(ft),a(Ut),a(N),a(gt),a(It),a(F),a(jt),a(Ct),a(Z),a($t),a(bt),a(qt),a(H),a(_t),a(Qt),a(Rt),a(D),a(At),a(vt),a(kt),a(P),a(Xt),a(xt),a(O),a(Bt),a(Gt),a(tt),a(Nt),a(et),a(Ft),a(St),a(st),a(Zt),a(zt),a(nt),a(Lt),a(Ht),a(it)),a(i),c(j,t),c(C,t),c(b,t),c(q,t),c(A,t),c(X,t),c(B,t),c(G,t),c(U,t),c(S,t),c(z,t),c(L,t),c(E,t),c(Y,t),c(V,t),c(W,t),c(g,t),c(K,t),c(at,t),c(lt,t),c(I,t)}}}const Re='{"title":"What if my dataset isn‚Äôt on the Hub?","local":"what-if-my-dataset-isnt-on-the-hub","sections":[{"title":"Working with local and remote datasets","local":"working-with-local-and-remote-datasets","sections":[],"depth":2},{"title":"Loading a local dataset","local":"loading-a-local-dataset","sections":[],"depth":2},{"title":"Loading a remote dataset","local":"loading-a-remote-dataset","sections":[],"depth":2}],"depth":1}';function Ae(f){return fe(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class Fe extends Ue{constructor(i){super(),ge(this,i,Ae,Qe,Je,{})}}export{Fe as component};
