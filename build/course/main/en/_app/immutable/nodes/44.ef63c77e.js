import{s as _l,o as Cl,n as kt}from"../chunks/scheduler.37c15a92.js";import{S as xl,i as Il,g as d,s as o,r as m,A as vl,h as u,f as n,c as r,j as Ul,u as f,x as y,k as gl,y as Rl,a,v as j,t as M,b as Pe,d as h,w as b,m as Nl,n as Zl,p as Ke}from"../chunks/index.2bf4358c.js";import{T as ft}from"../chunks/Tip.363c041f.js";import{Y as rs}from"../chunks/Youtube.1e50a667.js";import{C as U}from"../chunks/CodeBlock.4f5fc1ad.js";import{C as $l}from"../chunks/CourseFloatingBanner.15ba07e6.js";import{F as Al}from"../chunks/FrameworkSwitchCourse.8d4d4ab6.js";import{H as jt}from"../chunks/Heading.8ada512a.js";function Ql(w){let t,i;return t=new $l({props:{chapter:3,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter3/section2_tf.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter3/section2_tf.ipynb"}]}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Gl(w){let t,i;return t=new $l({props:{chapter:3,classNames:"absolute z-10 right-0 top-0",notebooks:[{label:"Google Colab",value:"https://colab.research.google.com/github/huggingface/notebooks/blob/master/course/en/chapter3/section2_pt.ipynb"},{label:"Aws Studio",value:"https://studiolab.sagemaker.aws/import/github/huggingface/notebooks/blob/master/course/en/chapter3/section2_pt.ipynb"}]}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Wl(w){let t,i='Continuing with the example from the <a href="/course/chapter2">previous chapter</a>, here is how we would train a sequence classifier on one batch in TensorFlow:',l,p,T;return p=new U({props:{code:"aW1wb3J0JTIwdGVuc29yZmxvdyUyMGFzJTIwdGYlMEFpbXBvcnQlMjBudW1weSUyMGFzJTIwbnAlMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQXV0b1Rva2VuaXplciUyQyUyMFRGQXV0b01vZGVsRm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbiUwQSUwQSUyMyUyMFNhbWUlMjBhcyUyMGJlZm9yZSUwQWNoZWNrcG9pbnQlMjAlM0QlMjAlMjJiZXJ0LWJhc2UtdW5jYXNlZCUyMiUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKGNoZWNrcG9pbnQpJTBBbW9kZWwlMjAlM0QlMjBURkF1dG9Nb2RlbEZvclNlcXVlbmNlQ2xhc3NpZmljYXRpb24uZnJvbV9wcmV0cmFpbmVkKGNoZWNrcG9pbnQpJTBBc2VxdWVuY2VzJTIwJTNEJTIwJTVCJTBBJTIwJTIwJTIwJTIwJTIySSd2ZSUyMGJlZW4lMjB3YWl0aW5nJTIwZm9yJTIwYSUyMEh1Z2dpbmdGYWNlJTIwY291cnNlJTIwbXklMjB3aG9sZSUyMGxpZmUuJTIyJTJDJTBBJTIwJTIwJTIwJTIwJTIyVGhpcyUyMGNvdXJzZSUyMGlzJTIwYW1hemluZyElMjIlMkMlMEElNUQlMEFiYXRjaCUyMCUzRCUyMGRpY3QodG9rZW5pemVyKHNlcXVlbmNlcyUyQyUyMHBhZGRpbmclM0RUcnVlJTJDJTIwdHJ1bmNhdGlvbiUzRFRydWUlMkMlMjByZXR1cm5fdGVuc29ycyUzRCUyMnRmJTIyKSklMEElMEElMjMlMjBUaGlzJTIwaXMlMjBuZXclMEFtb2RlbC5jb21waWxlKG9wdGltaXplciUzRCUyMmFkYW0lMjIlMkMlMjBsb3NzJTNEJTIyc3BhcnNlX2NhdGVnb3JpY2FsX2Nyb3NzZW50cm9weSUyMiklMEFsYWJlbHMlMjAlM0QlMjB0Zi5jb252ZXJ0X3RvX3RlbnNvciglNUIxJTJDJTIwMSU1RCklMEFtb2RlbC50cmFpbl9vbl9iYXRjaChiYXRjaCUyQyUyMGxhYmVscyk=",highlighted:`<span class="hljs-keyword">import</span> tensorflow <span class="hljs-keyword">as</span> tf
<span class="hljs-keyword">import</span> numpy <span class="hljs-keyword">as</span> np
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer, TFAutoModelForSequenceClassification

<span class="hljs-comment"># Same as before</span>
checkpoint = <span class="hljs-string">&quot;bert-base-uncased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(checkpoint)
model = TFAutoModelForSequenceClassification.from_pretrained(checkpoint)
sequences = [
    <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,
    <span class="hljs-string">&quot;This course is amazing!&quot;</span>,
]
batch = <span class="hljs-built_in">dict</span>(tokenizer(sequences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>))

<span class="hljs-comment"># This is new</span>
model.<span class="hljs-built_in">compile</span>(optimizer=<span class="hljs-string">&quot;adam&quot;</span>, loss=<span class="hljs-string">&quot;sparse_categorical_crossentropy&quot;</span>)
labels = tf.convert_to_tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])
model.train_on_batch(batch, labels)`,wrap:!1}}),{c(){t=d("p"),t.innerHTML=i,l=o(),m(p.$$.fragment)},l(c){t=u(c,"P",{"data-svelte-h":!0}),y(t)!=="svelte-1bedvbw"&&(t.innerHTML=i),l=r(c),f(p.$$.fragment,c)},m(c,g){a(c,t,g),a(c,l,g),j(p,c,g),T=!0},i(c){T||(h(p.$$.fragment,c),T=!0)},o(c){M(p.$$.fragment,c),T=!1},d(c){c&&(n(t),n(l)),b(p,c)}}}function Bl(w){let t,i='Continuing with the example from the <a href="/course/chapter2">previous chapter</a>, here is how we would train a sequence classifier on one batch in PyTorch:',l,p,T;return p=new U({props:{code:"aW1wb3J0JTIwdG9yY2glMEFmcm9tJTIwdHJhbnNmb3JtZXJzJTIwaW1wb3J0JTIwQWRhbVclMkMlMjBBdXRvVG9rZW5pemVyJTJDJTIwQXV0b01vZGVsRm9yU2VxdWVuY2VDbGFzc2lmaWNhdGlvbiUwQSUwQSUyMyUyMFNhbWUlMjBhcyUyMGJlZm9yZSUwQWNoZWNrcG9pbnQlMjAlM0QlMjAlMjJiZXJ0LWJhc2UtdW5jYXNlZCUyMiUwQXRva2VuaXplciUyMCUzRCUyMEF1dG9Ub2tlbml6ZXIuZnJvbV9wcmV0cmFpbmVkKGNoZWNrcG9pbnQpJTBBbW9kZWwlMjAlM0QlMjBBdXRvTW9kZWxGb3JTZXF1ZW5jZUNsYXNzaWZpY2F0aW9uLmZyb21fcHJldHJhaW5lZChjaGVja3BvaW50KSUwQXNlcXVlbmNlcyUyMCUzRCUyMCU1QiUwQSUyMCUyMCUyMCUyMCUyMkkndmUlMjBiZWVuJTIwd2FpdGluZyUyMGZvciUyMGElMjBIdWdnaW5nRmFjZSUyMGNvdXJzZSUyMG15JTIwd2hvbGUlMjBsaWZlLiUyMiUyQyUwQSUyMCUyMCUyMCUyMCUyMlRoaXMlMjBjb3Vyc2UlMjBpcyUyMGFtYXppbmchJTIyJTJDJTBBJTVEJTBBYmF0Y2glMjAlM0QlMjB0b2tlbml6ZXIoc2VxdWVuY2VzJTJDJTIwcGFkZGluZyUzRFRydWUlMkMlMjB0cnVuY2F0aW9uJTNEVHJ1ZSUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIycHQlMjIpJTBBJTBBJTIzJTIwVGhpcyUyMGlzJTIwbmV3JTBBYmF0Y2glNUIlMjJsYWJlbHMlMjIlNUQlMjAlM0QlMjB0b3JjaC50ZW5zb3IoJTVCMSUyQyUyMDElNUQpJTBBJTBBb3B0aW1pemVyJTIwJTNEJTIwQWRhbVcobW9kZWwucGFyYW1ldGVycygpKSUwQWxvc3MlMjAlM0QlMjBtb2RlbCgqKmJhdGNoKS5sb3NzJTBBbG9zcy5iYWNrd2FyZCgpJTBBb3B0aW1pemVyLnN0ZXAoKQ==",highlighted:`<span class="hljs-keyword">import</span> torch
<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AdamW, AutoTokenizer, AutoModelForSequenceClassification

<span class="hljs-comment"># Same as before</span>
checkpoint = <span class="hljs-string">&quot;bert-base-uncased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(checkpoint)
model = AutoModelForSequenceClassification.from_pretrained(checkpoint)
sequences = [
    <span class="hljs-string">&quot;I&#x27;ve been waiting for a HuggingFace course my whole life.&quot;</span>,
    <span class="hljs-string">&quot;This course is amazing!&quot;</span>,
]
batch = tokenizer(sequences, padding=<span class="hljs-literal">True</span>, truncation=<span class="hljs-literal">True</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-comment"># This is new</span>
batch[<span class="hljs-string">&quot;labels&quot;</span>] = torch.tensor([<span class="hljs-number">1</span>, <span class="hljs-number">1</span>])

optimizer = AdamW(model.parameters())
loss = model(**batch).loss
loss.backward()
optimizer.step()`,wrap:!1}}),{c(){t=d("p"),t.innerHTML=i,l=o(),m(p.$$.fragment)},l(c){t=u(c,"P",{"data-svelte-h":!0}),y(t)!=="svelte-18ln3r8"&&(t.innerHTML=i),l=r(c),f(p.$$.fragment,c)},m(c,g){a(c,t,g),a(c,l,g),j(p,c,g),T=!0},i(c){T||(h(p.$$.fragment,c),T=!0)},o(c){M(p.$$.fragment,c),T=!1},d(c){c&&(n(t),n(l)),b(p,c)}}}function Xl(w){let t,i;return t=new rs({props:{id:"W_gMJF0xomE"}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function zl(w){let t,i;return t=new rs({props:{id:"_BZearw7f0w"}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Vl(w){let t;return{c(){t=Nl("⚠️ **Warning** Make sure that `datasets` is installed by running `pip install datasets`. Then, load the MRPC dataset and print it to see what it contains.")},l(i){t=Zl(i,"⚠️ **Warning** Make sure that `datasets` is installed by running `pip install datasets`. Then, load the MRPC dataset and print it to see what it contains.")},m(i,l){a(i,t,l)},d(i){i&&n(t)}}}function El(w){let t,i="✏️ <strong>Try it out!</strong> Look at element 15 of the training set and element 87 of the validation set. What are their labels?";return{c(){t=d("p"),t.innerHTML=i},l(l){t=u(l,"P",{"data-svelte-h":!0}),y(t)!=="svelte-vjl0ht"&&(t.innerHTML=i)},m(l,p){a(l,t,p)},p:kt,d(l){l&&n(t)}}}function Hl(w){let t,i;return t=new rs({props:{id:"P-rZWqcB6CE"}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Sl(w){let t,i;return t=new rs({props:{id:"0u3ioSwev3s"}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Yl(w){let t,i="✏️ <strong>Try it out!</strong> Take element 15 of the training set and tokenize the two sentences separately and as a pair. What’s the difference between the two results?";return{c(){t=d("p"),t.innerHTML=i},l(l){t=u(l,"P",{"data-svelte-h":!0}),y(t)!=="svelte-1j17f76"&&(t.innerHTML=i)},m(l,p){a(l,t,p)},p:kt,d(l){l&&n(t)}}}function Fl(w){let t,i="The function that is responsible for putting together samples inside a batch is called a <em>collate function</em>. The default collator is a function that will just convert your samples to tf.Tensor and concatenate them (recursively if your elements are lists, tuples, or dictionaries). This won’t be possible in our case since the inputs we have won’t all be of the same size. We have deliberately postponed the padding, to only apply it as necessary on each batch and avoid having over-long inputs with a lot of padding. This will speed up training by quite a bit, but note that if you’re training on a TPU it can cause problems — TPUs prefer fixed shapes, even when that requires extra padding.";return{c(){t=d("p"),t.innerHTML=i},l(l){t=u(l,"P",{"data-svelte-h":!0}),y(t)!=="svelte-ect424"&&(t.innerHTML=i)},m(l,p){a(l,t,p)},d(l){l&&n(t)}}}function Dl(w){let t,i="The function that is responsible for putting together samples inside a batch is called a <em>collate function</em>. It’s an argument you can pass when you build a <code>DataLoader</code>, the default being a function that will just convert your samples to PyTorch tensors and concatenate them (recursively if your elements are lists, tuples, or dictionaries). This won’t be possible in our case since the inputs we have won’t all be of the same size. We have deliberately postponed the padding, to only apply it as necessary on each batch and avoid having over-long inputs with a lot of padding. This will speed up training by quite a bit, but note that if you’re training on a TPU it can cause problems — TPUs prefer fixed shapes, even when that requires extra padding.";return{c(){t=d("p"),t.innerHTML=i},l(l){t=u(l,"P",{"data-svelte-h":!0}),y(t)!=="svelte-1gicira"&&(t.innerHTML=i)},m(l,p){a(l,t,p)},d(l){l&&n(t)}}}function ql(w){let t,i;return t=new U({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERhdGFDb2xsYXRvcldpdGhQYWRkaW5nJTBBJTBBZGF0YV9jb2xsYXRvciUyMCUzRCUyMERhdGFDb2xsYXRvcldpdGhQYWRkaW5nKHRva2VuaXplciUzRHRva2VuaXplciUyQyUyMHJldHVybl90ZW5zb3JzJTNEJTIydGYlMjIp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorWithPadding

data_collator = DataCollatorWithPadding(tokenizer=tokenizer, return_tensors=<span class="hljs-string">&quot;tf&quot;</span>)`,wrap:!1}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Ll(w){let t,i;return t=new U({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMERhdGFDb2xsYXRvcldpdGhQYWRkaW5nJTBBJTBBZGF0YV9jb2xsYXRvciUyMCUzRCUyMERhdGFDb2xsYXRvcldpdGhQYWRkaW5nKHRva2VuaXplciUzRHRva2VuaXplcik=",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> DataCollatorWithPadding

data_collator = DataCollatorWithPadding(tokenizer=tokenizer)`,wrap:!1}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Pl(w){let t,i,l,p="Looking good! Now that we’ve gone from raw text to batches our model can deal with, we’re ready to fine-tune it!",T;return t=new U({props:{code:"JTdCJ2F0dGVudGlvbl9tYXNrJyUzQSUyMHRvcmNoLlNpemUoJTVCOCUyQyUyMDY3JTVEKSUyQyUwQSUyMCdpbnB1dF9pZHMnJTNBJTIwdG9yY2guU2l6ZSglNUI4JTJDJTIwNjclNUQpJTJDJTBBJTIwJ3Rva2VuX3R5cGVfaWRzJyUzQSUyMHRvcmNoLlNpemUoJTVCOCUyQyUyMDY3JTVEKSUyQyUwQSUyMCdsYWJlbHMnJTNBJTIwdG9yY2guU2l6ZSglNUI4JTVEKSU3RA==",highlighted:`{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: torch.Size([<span class="hljs-number">8</span>, <span class="hljs-number">67</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: torch.Size([<span class="hljs-number">8</span>, <span class="hljs-number">67</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: torch.Size([<span class="hljs-number">8</span>, <span class="hljs-number">67</span>]),
 <span class="hljs-string">&#x27;labels&#x27;</span>: torch.Size([<span class="hljs-number">8</span>])}`,wrap:!1}}),{c(){m(t.$$.fragment),i=o(),l=d("p"),l.textContent=p},l(c){f(t.$$.fragment,c),i=r(c),l=u(c,"P",{"data-svelte-h":!0}),y(l)!=="svelte-3l70up"&&(l.textContent=p)},m(c,g){j(t,c,g),a(c,i,g),a(c,l,g),T=!0},i(c){T||(h(t.$$.fragment,c),T=!0)},o(c){M(t.$$.fragment,c),T=!1},d(c){c&&(n(i),n(l)),b(t,c)}}}function Kl(w){let t,i;return t=new U({props:{code:"JTdCJ2F0dGVudGlvbl9tYXNrJyUzQSUyMFRlbnNvclNoYXBlKCU1QjglMkMlMjA2NyU1RCklMkMlMEElMjAnaW5wdXRfaWRzJyUzQSUyMFRlbnNvclNoYXBlKCU1QjglMkMlMjA2NyU1RCklMkMlMEElMjAndG9rZW5fdHlwZV9pZHMnJTNBJTIwVGVuc29yU2hhcGUoJTVCOCUyQyUyMDY3JTVEKSUyQyUwQSUyMCdsYWJlbHMnJTNBJTIwVGVuc29yU2hhcGUoJTVCOCU1RCklN0Q=",highlighted:`{<span class="hljs-string">&#x27;attention_mask&#x27;</span>: TensorShape([<span class="hljs-number">8</span>, <span class="hljs-number">67</span>]),
 <span class="hljs-string">&#x27;input_ids&#x27;</span>: TensorShape([<span class="hljs-number">8</span>, <span class="hljs-number">67</span>]),
 <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: TensorShape([<span class="hljs-number">8</span>, <span class="hljs-number">67</span>]),
 <span class="hljs-string">&#x27;labels&#x27;</span>: TensorShape([<span class="hljs-number">8</span>])}`,wrap:!1}}),{c(){m(t.$$.fragment)},l(l){f(t.$$.fragment,l)},m(l,p){j(t,l,p),i=!0},i(l){i||(h(t.$$.fragment,l),i=!0)},o(l){M(t.$$.fragment,l),i=!1},d(l){b(t,l)}}}function Ol(w){let t,i="✏️ <strong>Try it out!</strong> Replicate the preprocessing on the GLUE SST-2 dataset. It’s a little bit different since it’s composed of single sentences instead of pairs, but the rest of what we did should look the same. For a harder challenge, try to write a preprocessing function that works on any of the GLUE tasks.";return{c(){t=d("p"),t.innerHTML=i},l(l){t=u(l,"P",{"data-svelte-h":!0}),y(t)!=="svelte-1ydnchh"&&(t.innerHTML=i)},m(l,p){a(l,t,p)},p:kt,d(l){l&&n(t)}}}function kl(w){let t,i="Now that we have our dataset and a data collator, we need to put them together. We could manually load batches and collate them, but that’s a lot of work, and probably not very performant either. Instead, there’s a simple method that offers a performant solution to this problem: <code>to_tf_dataset()</code>. This will wrap a <code>tf.data.Dataset</code> around your dataset, with an optional collation function. <code>tf.data.Dataset</code> is a native TensorFlow format that Keras can use for <code>model.fit()</code>, so this one method immediately converts a 🤗 Dataset to a format that’s ready for training. Let’s see it in action with our dataset!",l,p,T,c,g="And that’s it! We can take those datasets forward into the next lecture, where training will be pleasantly straightforward after all the hard work of data preprocessing.",G;return p=new U({props:{code:"dGZfdHJhaW5fZGF0YXNldCUyMCUzRCUyMHRva2VuaXplZF9kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVELnRvX3RmX2RhdGFzZXQoJTBBJTIwJTIwJTIwJTIwY29sdW1ucyUzRCU1QiUyMmF0dGVudGlvbl9tYXNrJTIyJTJDJTIwJTIyaW5wdXRfaWRzJTIyJTJDJTIwJTIydG9rZW5fdHlwZV9pZHMlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjBsYWJlbF9jb2xzJTNEJTVCJTIybGFiZWxzJTIyJTVEJTJDJTBBJTIwJTIwJTIwJTIwc2h1ZmZsZSUzRFRydWUlMkMlMEElMjAlMjAlMjAlMjBjb2xsYXRlX2ZuJTNEZGF0YV9jb2xsYXRvciUyQyUwQSUyMCUyMCUyMCUyMGJhdGNoX3NpemUlM0Q4JTJDJTBBKSUwQSUwQXRmX3ZhbGlkYXRpb25fZGF0YXNldCUyMCUzRCUyMHRva2VuaXplZF9kYXRhc2V0cyU1QiUyMnZhbGlkYXRpb24lMjIlNUQudG9fdGZfZGF0YXNldCglMEElMjAlMjAlMjAlMjBjb2x1bW5zJTNEJTVCJTIyYXR0ZW50aW9uX21hc2slMjIlMkMlMjAlMjJpbnB1dF9pZHMlMjIlMkMlMjAlMjJ0b2tlbl90eXBlX2lkcyUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMGxhYmVsX2NvbHMlM0QlNUIlMjJsYWJlbHMlMjIlNUQlMkMlMEElMjAlMjAlMjAlMjBzaHVmZmxlJTNERmFsc2UlMkMlMEElMjAlMjAlMjAlMjBjb2xsYXRlX2ZuJTNEZGF0YV9jb2xsYXRvciUyQyUwQSUyMCUyMCUyMCUyMGJhdGNoX3NpemUlM0Q4JTJDJTBBKQ==",highlighted:`tf_train_dataset = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    label_cols=[<span class="hljs-string">&quot;labels&quot;</span>],
    shuffle=<span class="hljs-literal">True</span>,
    collate_fn=data_collator,
    batch_size=<span class="hljs-number">8</span>,
)

tf_validation_dataset = tokenized_datasets[<span class="hljs-string">&quot;validation&quot;</span>].to_tf_dataset(
    columns=[<span class="hljs-string">&quot;attention_mask&quot;</span>, <span class="hljs-string">&quot;input_ids&quot;</span>, <span class="hljs-string">&quot;token_type_ids&quot;</span>],
    label_cols=[<span class="hljs-string">&quot;labels&quot;</span>],
    shuffle=<span class="hljs-literal">False</span>,
    collate_fn=data_collator,
    batch_size=<span class="hljs-number">8</span>,
)`,wrap:!1}}),{c(){t=d("p"),t.innerHTML=i,l=o(),m(p.$$.fragment),T=o(),c=d("p"),c.textContent=g},l(J){t=u(J,"P",{"data-svelte-h":!0}),y(t)!=="svelte-1ep2ytl"&&(t.innerHTML=i),l=r(J),f(p.$$.fragment,J),T=r(J),c=u(J,"P",{"data-svelte-h":!0}),y(c)!=="svelte-2qcqqp"&&(c.textContent=g)},m(J,$){a(J,t,$),a(J,l,$),j(p,J,$),a(J,T,$),a(J,c,$),G=!0},i(J){G||(h(p.$$.fragment,J),G=!0)},o(J){M(p.$$.fragment,J),G=!1},d(J){J&&(n(t),n(l),n(T),n(c)),b(p,J)}}}function en(w){let t,i,l,p,T,c,g,G,J,$,Oe,_,C,es,E,$t="Of course, just training the model on two sentences is not going to yield very good results. To get better results, you will need to prepare a bigger dataset.",ps,H,_t='In this section we will use as an example the MRPC (Microsoft Research Paraphrase Corpus) dataset, introduced in a <a href="https://www.aclweb.org/anthology/I05-5002.pdf" rel="nofollow">paper</a> by William B. Dolan and Chris Brockett. The dataset consists of 5,801 pairs of sentences, with a label indicating if they are paraphrases or not (i.e., if both sentences mean the same thing). We’ve selected it for this chapter because it’s a small dataset, so it’s easy to experiment with training on it.',cs,S,hs,x,I,ss,Y,Ct='The Hub doesn’t just contain models; it also has multiple datasets in lots of different languages. You can browse the datasets <a href="https://huggingface.co/datasets" rel="nofollow">here</a>, and we recommend you try to load and process a new dataset once you have gone through this section (see the general documentation <a href="https://huggingface.co/docs/datasets/loading" rel="nofollow">here</a>). But for now, let’s focus on the MRPC dataset! This is one of the 10 datasets composing the <a href="https://gluebenchmark.com/" rel="nofollow">GLUE benchmark</a>, which is an academic benchmark that is used to measure the performance of ML models across 10 different text classification tasks.',Ms,F,xt="The 🤗 Datasets library provides a very simple command to download and cache a dataset on the Hub. We can download the MRPC dataset like this:",ds,B,us,D,ys,q,ms,L,It="As you can see, we get a <code>DatasetDict</code> object which contains the training set, the validation set, and the test set. Each of those contains several columns (<code>sentence1</code>, <code>sentence2</code>, <code>label</code>, and <code>idx</code>) and a variable number of rows, which are the number of elements in each set (so, there are 3,668 pairs of sentences in the training set, 408 in the validation set, and 1,725 in the test set).",fs,P,vt="This command downloads and caches the dataset, by default in <em>~/.cache/huggingface/datasets</em>. Recall from Chapter 2 that you can customize your cache folder by setting the <code>HF_HOME</code> environment variable.",js,K,Rt="We can access each pair of sentences in our <code>raw_datasets</code> object by indexing, like with a dictionary:",bs,O,ws,ee,Js,se,Nt="We can see the labels are already integers, so we won’t have to do any preprocessing there. To know which integer corresponds to which label, we can inspect the <code>features</code> of our <code>raw_train_dataset</code>. This will tell us the type of each column:",Ts,te,Us,le,gs,ne,Zt="Behind the scenes, <code>label</code> is of type <code>ClassLabel</code>, and the mapping of integers to label name is stored in the <em>names</em> folder. <code>0</code> corresponds to <code>not_equivalent</code>, and <code>1</code> corresponds to <code>equivalent</code>.",ks,X,$s,ae,_s,v,R,ts,ie,At='To preprocess the dataset, we need to convert the text to numbers the model can make sense of. As you saw in the <a href="/course/chapter2">previous chapter</a>, this is done with a tokenizer. We can feed the tokenizer one sentence or a list of sentences, so we can directly tokenize all the first sentences and all the second sentences of each pair like this:',Cs,oe,xs,re,Qt="However, we can’t just pass two sequences to the model and get a prediction of whether the two sentences are paraphrases or not. We need to handle the two sequences as a pair, and apply the appropriate preprocessing. Fortunately, the tokenizer can also take a pair of sequences and prepare it the way our BERT model expects:",Is,pe,vs,ce,Rs,he,Gt='We discussed the <code>input_ids</code> and <code>attention_mask</code> keys in <a href="/course/chapter2">Chapter 2</a>, but we put off talking about <code>token_type_ids</code>. In this example, this is what tells the model which part of the input is the first sentence and which is the second sentence.',Ns,z,Zs,Me,Wt="If we decode the IDs inside <code>input_ids</code> back to words:",As,de,Qs,ue,Bt="we will get:",Gs,ye,Ws,me,Xt="So we see the model expects the inputs to be of the form <code>[CLS] sentence1 [SEP] sentence2 [SEP]</code> when there are two sentences. Aligning this with the <code>token_type_ids</code> gives us:",Bs,fe,Xs,je,zt="As you can see, the parts of the input corresponding to <code>[CLS] sentence1 [SEP]</code> all have a token type ID of <code>0</code>, while the other parts, corresponding to <code>sentence2 [SEP]</code>, all have a token type ID of <code>1</code>.",zs,be,Vt="Note that if you select a different checkpoint, you won’t necessarily have the <code>token_type_ids</code> in your tokenized inputs (for instance, they’re not returned if you use a DistilBERT model). They are only returned when the model will know what to do with them, because it has seen them during its pretraining.",Vs,we,Et='Here, BERT is pretrained with token type IDs, and on top of the masked language modeling objective we talked about in <a href="/course/chapter1">Chapter 1</a>, it has an additional objective called <em>next sentence prediction</em>. The goal with this task is to model the relationship between pairs of sentences.',Es,Je,Ht="With next sentence prediction, the model is provided pairs of sentences (with randomly masked tokens) and asked to predict whether the second sentence follows the first. To make the task non-trivial, half of the time the sentences follow each other in the original document they were extracted from, and the other half of the time the two sentences come from two different documents.",Hs,Te,St="In general, you don’t need to worry about whether or not there are <code>token_type_ids</code> in your tokenized inputs: as long as you use the same checkpoint for the tokenizer and the model, everything will be fine as the tokenizer knows what to provide to its model.",Ss,Ue,Yt='Now that we have seen how our tokenizer can deal with one pair of sentences, we can use it to tokenize our whole dataset: like in the <a href="/course/chapter2">previous chapter</a>, we can feed the tokenizer a list of pairs of sentences by giving it the list of first sentences, then the list of second sentences. This is also compatible with the padding and truncation options we saw in <a href="/course/chapter2">Chapter 2</a>. So, one way to preprocess the training dataset is:',Ys,ge,Fs,ke,Ft='This works well, but it has the disadvantage of returning a dictionary (with our keys, <code>input_ids</code>, <code>attention_mask</code>, and <code>token_type_ids</code>, and values that are lists of lists). It will also only work if you have enough RAM to store your whole dataset during the tokenization (whereas the datasets from the 🤗 Datasets library are <a href="https://arrow.apache.org/" rel="nofollow">Apache Arrow</a> files stored on the disk, so you only keep the samples you ask for loaded in memory).',Ds,$e,Dt='To keep the data as a dataset, we will use the <a href="https://huggingface.co/docs/datasets/package_reference/main_classes#datasets.Dataset.map" rel="nofollow"><code>Dataset.map()</code></a> method. This also allows us some extra flexibility, if we need more preprocessing done than just tokenization. The <code>map()</code> method works by applying a function on each element of the dataset, so let’s define a function that tokenizes our inputs:',qs,_e,Ls,Ce,qt='This function takes a dictionary (like the items of our dataset) and returns a new dictionary with the keys <code>input_ids</code>, <code>attention_mask</code>, and <code>token_type_ids</code>. Note that it also works if the <code>example</code> dictionary contains several samples (each key as a list of sentences) since the <code>tokenizer</code> works on lists of pairs of sentences, as seen before. This will allow us to use the option <code>batched=True</code> in our call to <code>map()</code>, which will greatly speed up the tokenization. The <code>tokenizer</code> is backed by a tokenizer written in Rust from the <a href="https://github.com/huggingface/tokenizers" rel="nofollow">🤗 Tokenizers</a> library. This tokenizer can be very fast, but only if we give it lots of inputs at once.',Ps,xe,Lt="Note that we’ve left the <code>padding</code> argument out in our tokenization function for now. This is because padding all the samples to the maximum length is not efficient: it’s better to pad the samples when we’re building a batch, as then we only need to pad to the maximum length in that batch, and not the maximum length in the entire dataset. This can save a lot of time and processing power when the inputs have very variable lengths!",Ks,Ie,Pt="Here is how we apply the tokenization function on all our datasets at once. We’re using <code>batched=True</code> in our call to <code>map</code> so the function is applied to multiple elements of our dataset at once, and not on each element separately. This allows for faster preprocessing.",Os,ve,et,Re,Kt="The way the 🤗 Datasets library applies this processing is by adding new fields to the datasets, one for each key in the dictionary returned by the preprocessing function:",st,Ne,tt,Ze,Ot="You can even use multiprocessing when applying your preprocessing function with <code>map()</code> by passing along a <code>num_proc</code> argument. We didn’t do this here because the 🤗 Tokenizers library already uses multiple threads to tokenize our samples faster, but if you are not using a fast tokenizer backed by this library, this could speed up your preprocessing.",lt,Ae,el="Our <code>tokenize_function</code> returns a dictionary with the keys <code>input_ids</code>, <code>attention_mask</code>, and <code>token_type_ids</code>, so those three fields are added to all splits of our dataset. Note that we could also have changed existing fields if our preprocessing function returned a new value for an existing key in the dataset to which we applied <code>map()</code>.",nt,Qe,sl="The last thing we will need to do is pad all the examples to the length of the longest element when we batch elements together — a technique we refer to as <em>dynamic padding</em>.",at,Ge,it,We,ot,ls,Be,tl="To do this in practice, we have to define a collate function that will apply the correct amount of padding to the items of the dataset we want to batch together. Fortunately, the 🤗 Transformers library provides us with such a function via <code>DataCollatorWithPadding</code>. It takes a tokenizer when you instantiate it (to know which padding token to use, and whether the model expects padding to be on the left or on the right of the inputs) and will do everything you need:",rt,N,Z,ns,Xe,ll="To test this new toy, let’s grab a few samples from our training set that we would like to batch together. Here, we remove the columns <code>idx</code>, <code>sentence1</code>, and <code>sentence2</code> as they won’t be needed and contain strings (and we can’t create tensors with strings) and have a look at the lengths of each entry in the batch:",pt,ze,ct,Ve,ht,Ee,nl="No surprise, we get samples of varying length, from 32 to 67. Dynamic padding means the samples in this batch should all be padded to a length of 67, the maximum length inside the batch. Without dynamic padding, all of the samples would have to be padded to the maximum length in the whole dataset, or the maximum length the model can accept. Let’s double-check that our <code>data_collator</code> is dynamically padding the batch properly:",Mt,He,dt,A,Q,as,V,ut,is,os,yt;T=new Al({props:{fw:w[0]}}),g=new jt({props:{title:"Processing the data",local:"processing-the-data",headingTag:"h1"}});const al=[Gl,Ql],Se=[];function il(e,s){return e[0]==="pt"?0:1}J=il(w),$=Se[J]=al[J](w);const ol=[Bl,Wl],Ye=[];function rl(e,s){return e[0]==="pt"?0:1}_=rl(w),C=Ye[_]=ol[_](w),S=new jt({props:{title:"Loading a dataset from the Hub",local:"loading-a-dataset-from-the-hub",headingTag:"h3"}});const pl=[zl,Xl],Fe=[];function cl(e,s){return e[0]==="pt"?0:1}x=cl(w),I=Fe[x]=pl[x](w),B=new ft({props:{$$slots:{default:[Vl]},$$scope:{ctx:w}}}),D=new U({props:{code:"ZnJvbSUyMGRhdGFzZXRzJTIwaW1wb3J0JTIwbG9hZF9kYXRhc2V0JTBBJTBBcmF3X2RhdGFzZXRzJTIwJTNEJTIwbG9hZF9kYXRhc2V0KCUyMmdsdWUlMjIlMkMlMjAlMjJtcnBjJTIyKSUwQXJhd19kYXRhc2V0cw==",highlighted:`<span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

raw_datasets = load_dataset(<span class="hljs-string">&quot;glue&quot;</span>, <span class="hljs-string">&quot;mrpc&quot;</span>)
raw_datasets`,wrap:!1}}),q=new U({props:{code:"RGF0YXNldERpY3QoJTdCJTBBJTIwJTIwJTIwJTIwdHJhaW4lM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ3NlbnRlbmNlMSclMkMlMjAnc2VudGVuY2UyJyUyQyUyMCdsYWJlbCclMkMlMjAnaWR4JyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwMzY2OCUwQSUyMCUyMCUyMCUyMCU3RCklMEElMjAlMjAlMjAlMjB2YWxpZGF0aW9uJTNBJTIwRGF0YXNldCglN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmZWF0dXJlcyUzQSUyMCU1QidzZW50ZW5jZTEnJTJDJTIwJ3NlbnRlbmNlMiclMkMlMjAnbGFiZWwnJTJDJTIwJ2lkeCclNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBudW1fcm93cyUzQSUyMDQwOCUwQSUyMCUyMCUyMCUyMCU3RCklMEElMjAlMjAlMjAlMjB0ZXN0JTNBJTIwRGF0YXNldCglN0IlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBmZWF0dXJlcyUzQSUyMCU1QidzZW50ZW5jZTEnJTJDJTIwJ3NlbnRlbmNlMiclMkMlMjAnbGFiZWwnJTJDJTIwJ2lkeCclNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBudW1fcm93cyUzQSUyMDE3MjUlMEElMjAlMjAlMjAlMjAlN0QpJTBBJTdEKQ==",highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
        num_rows: <span class="hljs-number">3668</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
        num_rows: <span class="hljs-number">408</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>],
        num_rows: <span class="hljs-number">1725</span>
    })
})`,wrap:!1}}),O=new U({props:{code:"cmF3X3RyYWluX2RhdGFzZXQlMjAlM0QlMjByYXdfZGF0YXNldHMlNUIlMjJ0cmFpbiUyMiU1RCUwQXJhd190cmFpbl9kYXRhc2V0JTVCMCU1RA==",highlighted:`raw_train_dataset = raw_datasets[<span class="hljs-string">&quot;train&quot;</span>]
raw_train_dataset[<span class="hljs-number">0</span>]`,wrap:!1}}),ee=new U({props:{code:"JTdCJ2lkeCclM0ElMjAwJTJDJTBBJTIwJ2xhYmVsJyUzQSUyMDElMkMlMEElMjAnc2VudGVuY2UxJyUzQSUyMCdBbXJvemklMjBhY2N1c2VkJTIwaGlzJTIwYnJvdGhlciUyMCUyQyUyMHdob20lMjBoZSUyMGNhbGxlZCUyMCUyMiUyMHRoZSUyMHdpdG5lc3MlMjAlMjIlMjAlMkMlMjBvZiUyMGRlbGliZXJhdGVseSUyMGRpc3RvcnRpbmclMjBoaXMlMjBldmlkZW5jZSUyMC4nJTJDJTBBJTIwJ3NlbnRlbmNlMiclM0ElMjAnUmVmZXJyaW5nJTIwdG8lMjBoaW0lMjBhcyUyMG9ubHklMjAlMjIlMjB0aGUlMjB3aXRuZXNzJTIwJTIyJTIwJTJDJTIwQW1yb3ppJTIwYWNjdXNlZCUyMGhpcyUyMGJyb3RoZXIlMjBvZiUyMGRlbGliZXJhdGVseSUyMGRpc3RvcnRpbmclMjBoaXMlMjBldmlkZW5jZSUyMC4nJTdE",highlighted:`{<span class="hljs-string">&#x27;idx&#x27;</span>: <span class="hljs-number">0</span>,
 <span class="hljs-string">&#x27;label&#x27;</span>: <span class="hljs-number">1</span>,
 <span class="hljs-string">&#x27;sentence1&#x27;</span>: <span class="hljs-string">&#x27;Amrozi accused his brother , whom he called &quot; the witness &quot; , of deliberately distorting his evidence .&#x27;</span>,
 <span class="hljs-string">&#x27;sentence2&#x27;</span>: <span class="hljs-string">&#x27;Referring to him as only &quot; the witness &quot; , Amrozi accused his brother of deliberately distorting his evidence .&#x27;</span>}`,wrap:!1}}),te=new U({props:{code:"cmF3X3RyYWluX2RhdGFzZXQuZmVhdHVyZXM=",highlighted:"raw_train_dataset.features",wrap:!1}}),le=new U({props:{code:"JTdCJ3NlbnRlbmNlMSclM0ElMjBWYWx1ZShkdHlwZSUzRCdzdHJpbmcnJTJDJTIwaWQlM0ROb25lKSUyQyUwQSUyMCdzZW50ZW5jZTInJTNBJTIwVmFsdWUoZHR5cGUlM0Qnc3RyaW5nJyUyQyUyMGlkJTNETm9uZSklMkMlMEElMjAnbGFiZWwnJTNBJTIwQ2xhc3NMYWJlbChudW1fY2xhc3NlcyUzRDIlMkMlMjBuYW1lcyUzRCU1Qidub3RfZXF1aXZhbGVudCclMkMlMjAnZXF1aXZhbGVudCclNUQlMkMlMjBuYW1lc19maWxlJTNETm9uZSUyQyUyMGlkJTNETm9uZSklMkMlMEElMjAnaWR4JyUzQSUyMFZhbHVlKGR0eXBlJTNEJ2ludDMyJyUyQyUyMGlkJTNETm9uZSklN0Q=",highlighted:`{<span class="hljs-string">&#x27;sentence1&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;sentence2&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;string&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;label&#x27;</span>: ClassLabel(num_classes=<span class="hljs-number">2</span>, names=[<span class="hljs-string">&#x27;not_equivalent&#x27;</span>, <span class="hljs-string">&#x27;equivalent&#x27;</span>], names_file=<span class="hljs-literal">None</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>),
 <span class="hljs-string">&#x27;idx&#x27;</span>: Value(dtype=<span class="hljs-string">&#x27;int32&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-literal">None</span>)}`,wrap:!1}}),X=new ft({props:{$$slots:{default:[El]},$$scope:{ctx:w}}}),ae=new jt({props:{title:"Preprocessing a dataset",local:"preprocessing-a-dataset",headingTag:"h3"}});const hl=[Sl,Hl],De=[];function Ml(e,s){return e[0]==="pt"?0:1}v=Ml(w),R=De[v]=hl[v](w),oe=new U({props:{code:"ZnJvbSUyMHRyYW5zZm9ybWVycyUyMGltcG9ydCUyMEF1dG9Ub2tlbml6ZXIlMEElMEFjaGVja3BvaW50JTIwJTNEJTIwJTIyYmVydC1iYXNlLXVuY2FzZWQlMjIlMEF0b2tlbml6ZXIlMjAlM0QlMjBBdXRvVG9rZW5pemVyLmZyb21fcHJldHJhaW5lZChjaGVja3BvaW50KSUwQXRva2VuaXplZF9zZW50ZW5jZXNfMSUyMCUzRCUyMHRva2VuaXplcihyYXdfZGF0YXNldHMlNUIlMjJ0cmFpbiUyMiU1RCU1QiUyMnNlbnRlbmNlMSUyMiU1RCklMEF0b2tlbml6ZWRfc2VudGVuY2VzXzIlMjAlM0QlMjB0b2tlbml6ZXIocmF3X2RhdGFzZXRzJTVCJTIydHJhaW4lMjIlNUQlNUIlMjJzZW50ZW5jZTIlMjIlNUQp",highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

checkpoint = <span class="hljs-string">&quot;bert-base-uncased&quot;</span>
tokenizer = AutoTokenizer.from_pretrained(checkpoint)
tokenized_sentences_1 = tokenizer(raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;sentence1&quot;</span>])
tokenized_sentences_2 = tokenizer(raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;sentence2&quot;</span>])`,wrap:!1}}),pe=new U({props:{code:"aW5wdXRzJTIwJTNEJTIwdG9rZW5pemVyKCUyMlRoaXMlMjBpcyUyMHRoZSUyMGZpcnN0JTIwc2VudGVuY2UuJTIyJTJDJTIwJTIyVGhpcyUyMGlzJTIwdGhlJTIwc2Vjb25kJTIwb25lLiUyMiklMEFpbnB1dHM=",highlighted:`inputs = tokenizer(<span class="hljs-string">&quot;This is the first sentence.&quot;</span>, <span class="hljs-string">&quot;This is the second one.&quot;</span>)
inputs`,wrap:!1}}),ce=new U({props:{code:"JTdCJTIwJTBBJTIwJTIwJ2lucHV0X2lkcyclM0ElMjAlNUIxMDElMkMlMjAyMDIzJTJDJTIwMjAwMyUyQyUyMDE5OTYlMkMlMjAyMDM0JTJDJTIwNjI1MSUyQyUyMDEwMTIlMkMlMjAxMDIlMkMlMjAyMDIzJTJDJTIwMjAwMyUyQyUyMDE5OTYlMkMlMjAyMTE3JTJDJTIwMjAyOCUyQyUyMDEwMTIlMkMlMjAxMDIlNUQlMkMlMEElMjAlMjAndG9rZW5fdHlwZV9pZHMnJTNBJTIwJTVCMCUyQyUyMDAlMkMlMjAwJTJDJTIwMCUyQyUyMDAlMkMlMjAwJTJDJTIwMCUyQyUyMDAlMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAxJTVEJTJDJTBBJTIwJTIwJ2F0dGVudGlvbl9tYXNrJyUzQSUyMCU1QjElMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAxJTJDJTIwMSUyQyUyMDElMkMlMjAxJTJDJTIwMSU1RCUwQSU3RA==",highlighted:`{ 
  <span class="hljs-string">&#x27;input_ids&#x27;</span>: [<span class="hljs-number">101</span>, <span class="hljs-number">2023</span>, <span class="hljs-number">2003</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">2034</span>, <span class="hljs-number">6251</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>, <span class="hljs-number">2023</span>, <span class="hljs-number">2003</span>, <span class="hljs-number">1996</span>, <span class="hljs-number">2117</span>, <span class="hljs-number">2028</span>, <span class="hljs-number">1012</span>, <span class="hljs-number">102</span>],
  <span class="hljs-string">&#x27;token_type_ids&#x27;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>],
  <span class="hljs-string">&#x27;attention_mask&#x27;</span>: [<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>]
}`,wrap:!1}}),z=new ft({props:{$$slots:{default:[Yl]},$$scope:{ctx:w}}}),de=new U({props:{code:"dG9rZW5pemVyLmNvbnZlcnRfaWRzX3RvX3Rva2VucyhpbnB1dHMlNUIlMjJpbnB1dF9pZHMlMjIlNUQp",highlighted:'tokenizer.convert_ids_to_tokens(inputs[<span class="hljs-string">&quot;input_ids&quot;</span>])',wrap:!1}}),ye=new U({props:{code:"JTVCJyU1QkNMUyU1RCclMkMlMjAndGhpcyclMkMlMjAnaXMnJTJDJTIwJ3RoZSclMkMlMjAnZmlyc3QnJTJDJTIwJ3NlbnRlbmNlJyUyQyUyMCcuJyUyQyUyMCclNUJTRVAlNUQnJTJDJTIwJ3RoaXMnJTJDJTIwJ2lzJyUyQyUyMCd0aGUnJTJDJTIwJ3NlY29uZCclMkMlMjAnb25lJyUyQyUyMCcuJyUyQyUyMCclNUJTRVAlNUQnJTVE",highlighted:'[<span class="hljs-string">&#x27;[CLS]&#x27;</span>, <span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;sentence&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;[SEP]&#x27;</span>, <span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;[SEP]&#x27;</span>]',wrap:!1}}),fe=new U({props:{code:"JTVCJyU1QkNMUyU1RCclMkMlMjAndGhpcyclMkMlMjAnaXMnJTJDJTIwJ3RoZSclMkMlMjAnZmlyc3QnJTJDJTIwJ3NlbnRlbmNlJyUyQyUyMCcuJyUyQyUyMCclNUJTRVAlNUQnJTJDJTIwJ3RoaXMnJTJDJTIwJ2lzJyUyQyUyMCd0aGUnJTJDJTIwJ3NlY29uZCclMkMlMjAnb25lJyUyQyUyMCcuJyUyQyUyMCclNUJTRVAlNUQnJTVEJTBBJTVCJTIwJTIwJTIwJTIwJTIwJTIwMCUyQyUyMCUyMCUyMCUyMCUyMCUyMDAlMkMlMjAlMjAlMjAlMjAwJTJDJTIwJTIwJTIwJTIwJTIwMCUyQyUyMCUyMCUyMCUyMCUyMCUyMCUyMDAlMkMlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAwJTJDJTIwJTIwJTIwMCUyQyUyMCUyMCUyMCUyMCUyMCUyMCUyMDAlMkMlMjAlMjAlMjAlMjAlMjAlMjAxJTJDJTIwJTIwJTIwJTIwMSUyQyUyMCUyMCUyMCUyMCUyMDElMkMlMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjAxJTJDJTIwJTIwJTIwJTIwJTIwMSUyQyUyMCUyMCUyMDElMkMlMjAlMjAlMjAlMjAlMjAlMjAlMjAxJTVE",highlighted:`[<span class="hljs-string">&#x27;[CLS]&#x27;</span>, <span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;first&#x27;</span>, <span class="hljs-string">&#x27;sentence&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;[SEP]&#x27;</span>, <span class="hljs-string">&#x27;this&#x27;</span>, <span class="hljs-string">&#x27;is&#x27;</span>, <span class="hljs-string">&#x27;the&#x27;</span>, <span class="hljs-string">&#x27;second&#x27;</span>, <span class="hljs-string">&#x27;one&#x27;</span>, <span class="hljs-string">&#x27;.&#x27;</span>, <span class="hljs-string">&#x27;[SEP]&#x27;</span>]
[      <span class="hljs-number">0</span>,      <span class="hljs-number">0</span>,    <span class="hljs-number">0</span>,     <span class="hljs-number">0</span>,       <span class="hljs-number">0</span>,          <span class="hljs-number">0</span>,   <span class="hljs-number">0</span>,       <span class="hljs-number">0</span>,      <span class="hljs-number">1</span>,    <span class="hljs-number">1</span>,     <span class="hljs-number">1</span>,        <span class="hljs-number">1</span>,     <span class="hljs-number">1</span>,   <span class="hljs-number">1</span>,       <span class="hljs-number">1</span>]`,wrap:!1}}),ge=new U({props:{code:"dG9rZW5pemVkX2RhdGFzZXQlMjAlM0QlMjB0b2tlbml6ZXIoJTBBJTIwJTIwJTIwJTIwcmF3X2RhdGFzZXRzJTVCJTIydHJhaW4lMjIlNUQlNUIlMjJzZW50ZW5jZTElMjIlNUQlMkMlMEElMjAlMjAlMjAlMjByYXdfZGF0YXNldHMlNUIlMjJ0cmFpbiUyMiU1RCU1QiUyMnNlbnRlbmNlMiUyMiU1RCUyQyUwQSUyMCUyMCUyMCUyMHBhZGRpbmclM0RUcnVlJTJDJTBBJTIwJTIwJTIwJTIwdHJ1bmNhdGlvbiUzRFRydWUlMkMlMEEp",highlighted:`tokenized_dataset = tokenizer(
    raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;sentence1&quot;</span>],
    raw_datasets[<span class="hljs-string">&quot;train&quot;</span>][<span class="hljs-string">&quot;sentence2&quot;</span>],
    padding=<span class="hljs-literal">True</span>,
    truncation=<span class="hljs-literal">True</span>,
)`,wrap:!1}}),_e=new U({props:{code:"ZGVmJTIwdG9rZW5pemVfZnVuY3Rpb24oZXhhbXBsZSklM0ElMEElMjAlMjAlMjAlMjByZXR1cm4lMjB0b2tlbml6ZXIoZXhhbXBsZSU1QiUyMnNlbnRlbmNlMSUyMiU1RCUyQyUyMGV4YW1wbGUlNUIlMjJzZW50ZW5jZTIlMjIlNUQlMkMlMjB0cnVuY2F0aW9uJTNEVHJ1ZSk=",highlighted:`<span class="hljs-keyword">def</span> <span class="hljs-title function_">tokenize_function</span>(<span class="hljs-params">example</span>):
    <span class="hljs-keyword">return</span> tokenizer(example[<span class="hljs-string">&quot;sentence1&quot;</span>], example[<span class="hljs-string">&quot;sentence2&quot;</span>], truncation=<span class="hljs-literal">True</span>)`,wrap:!1}}),ve=new U({props:{code:"dG9rZW5pemVkX2RhdGFzZXRzJTIwJTNEJTIwcmF3X2RhdGFzZXRzLm1hcCh0b2tlbml6ZV9mdW5jdGlvbiUyQyUyMGJhdGNoZWQlM0RUcnVlKSUwQXRva2VuaXplZF9kYXRhc2V0cw==",highlighted:`tokenized_datasets = raw_datasets.<span class="hljs-built_in">map</span>(tokenize_function, batched=<span class="hljs-literal">True</span>)
tokenized_datasets`,wrap:!1}}),Ne=new U({props:{code:"RGF0YXNldERpY3QoJTdCJTBBJTIwJTIwJTIwJTIwdHJhaW4lM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ2F0dGVudGlvbl9tYXNrJyUyQyUyMCdpZHgnJTJDJTIwJ2lucHV0X2lkcyclMkMlMjAnbGFiZWwnJTJDJTIwJ3NlbnRlbmNlMSclMkMlMjAnc2VudGVuY2UyJyUyQyUyMCd0b2tlbl90eXBlX2lkcyclNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBudW1fcm93cyUzQSUyMDM2NjglMEElMjAlMjAlMjAlMjAlN0QpJTBBJTIwJTIwJTIwJTIwdmFsaWRhdGlvbiUzQSUyMERhdGFzZXQoJTdCJTBBJTIwJTIwJTIwJTIwJTIwJTIwJTIwJTIwZmVhdHVyZXMlM0ElMjAlNUInYXR0ZW50aW9uX21hc2snJTJDJTIwJ2lkeCclMkMlMjAnaW5wdXRfaWRzJyUyQyUyMCdsYWJlbCclMkMlMjAnc2VudGVuY2UxJyUyQyUyMCdzZW50ZW5jZTInJTJDJTIwJ3Rva2VuX3R5cGVfaWRzJyU1RCUyQyUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMG51bV9yb3dzJTNBJTIwNDA4JTBBJTIwJTIwJTIwJTIwJTdEKSUwQSUyMCUyMCUyMCUyMHRlc3QlM0ElMjBEYXRhc2V0KCU3QiUwQSUyMCUyMCUyMCUyMCUyMCUyMCUyMCUyMGZlYXR1cmVzJTNBJTIwJTVCJ2F0dGVudGlvbl9tYXNrJyUyQyUyMCdpZHgnJTJDJTIwJ2lucHV0X2lkcyclMkMlMjAnbGFiZWwnJTJDJTIwJ3NlbnRlbmNlMSclMkMlMjAnc2VudGVuY2UyJyUyQyUyMCd0b2tlbl90eXBlX2lkcyclNUQlMkMlMEElMjAlMjAlMjAlMjAlMjAlMjAlMjAlMjBudW1fcm93cyUzQSUyMDE3MjUlMEElMjAlMjAlMjAlMjAlN0QpJTBBJTdEKQ==",highlighted:`DatasetDict({
    train: Dataset({
        features: [<span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>],
        num_rows: <span class="hljs-number">3668</span>
    })
    validation: Dataset({
        features: [<span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>],
        num_rows: <span class="hljs-number">408</span>
    })
    test: Dataset({
        features: [<span class="hljs-string">&#x27;attention_mask&#x27;</span>, <span class="hljs-string">&#x27;idx&#x27;</span>, <span class="hljs-string">&#x27;input_ids&#x27;</span>, <span class="hljs-string">&#x27;label&#x27;</span>, <span class="hljs-string">&#x27;sentence1&#x27;</span>, <span class="hljs-string">&#x27;sentence2&#x27;</span>, <span class="hljs-string">&#x27;token_type_ids&#x27;</span>],
        num_rows: <span class="hljs-number">1725</span>
    })
})`,wrap:!1}}),Ge=new jt({props:{title:"Dynamic padding",local:"dynamic-padding",headingTag:"h3"}}),We=new rs({props:{id:"7q5NyFT8REg"}});function dl(e,s){return e[0]==="pt"?Dl:Fl}let mt=dl(w),W=mt(w);const ul=[Ll,ql],qe=[];function yl(e,s){return e[0]==="pt"?0:1}N=yl(w),Z=qe[N]=ul[N](w),ze=new U({props:{code:"c2FtcGxlcyUyMCUzRCUyMHRva2VuaXplZF9kYXRhc2V0cyU1QiUyMnRyYWluJTIyJTVEJTVCJTNBOCU1RCUwQXNhbXBsZXMlMjAlM0QlMjAlN0JrJTNBJTIwdiUyMGZvciUyMGslMkMlMjB2JTIwaW4lMjBzYW1wbGVzLml0ZW1zKCklMjBpZiUyMGslMjBub3QlMjBpbiUyMCU1QiUyMmlkeCUyMiUyQyUyMCUyMnNlbnRlbmNlMSUyMiUyQyUyMCUyMnNlbnRlbmNlMiUyMiU1RCU3RCUwQSU1Qmxlbih4KSUyMGZvciUyMHglMjBpbiUyMHNhbXBsZXMlNUIlMjJpbnB1dF9pZHMlMjIlNUQlNUQ=",highlighted:`samples = tokenized_datasets[<span class="hljs-string">&quot;train&quot;</span>][:<span class="hljs-number">8</span>]
samples = {k: v <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> samples.items() <span class="hljs-keyword">if</span> k <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> [<span class="hljs-string">&quot;idx&quot;</span>, <span class="hljs-string">&quot;sentence1&quot;</span>, <span class="hljs-string">&quot;sentence2&quot;</span>]}
[<span class="hljs-built_in">len</span>(x) <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> samples[<span class="hljs-string">&quot;input_ids&quot;</span>]]`,wrap:!1}}),Ve=new U({props:{code:"JTVCNTAlMkMlMjA1OSUyQyUyMDQ3JTJDJTIwNjclMkMlMjA1OSUyQyUyMDUwJTJDJTIwNjIlMkMlMjAzMiU1RA==",highlighted:'[<span class="hljs-number">50</span>, <span class="hljs-number">59</span>, <span class="hljs-number">47</span>, <span class="hljs-number">67</span>, <span class="hljs-number">59</span>, <span class="hljs-number">50</span>, <span class="hljs-number">62</span>, <span class="hljs-number">32</span>]',wrap:!1}}),He=new U({props:{code:"YmF0Y2glMjAlM0QlMjBkYXRhX2NvbGxhdG9yKHNhbXBsZXMpJTBBJTdCayUzQSUyMHYuc2hhcGUlMjBmb3IlMjBrJTJDJTIwdiUyMGluJTIwYmF0Y2guaXRlbXMoKSU3RA==",highlighted:`batch = data_collator(samples)
{k: v.shape <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> batch.items()}`,wrap:!1}});const ml=[Kl,Pl],Le=[];function fl(e,s){return e[0]==="tf"?0:1}A=fl(w),Q=Le[A]=ml[A](w),V=new ft({props:{$$slots:{default:[Ol]},$$scope:{ctx:w}}});let k=w[0]==="tf"&&kl();return{c(){t=d("meta"),i=o(),l=d("p"),p=o(),m(T.$$.fragment),c=o(),m(g.$$.fragment),G=o(),$.c(),Oe=o(),C.c(),es=o(),E=d("p"),E.textContent=$t,ps=o(),H=d("p"),H.innerHTML=_t,cs=o(),m(S.$$.fragment),hs=o(),I.c(),ss=o(),Y=d("p"),Y.innerHTML=Ct,Ms=o(),F=d("p"),F.textContent=xt,ds=o(),m(B.$$.fragment),us=o(),m(D.$$.fragment),ys=o(),m(q.$$.fragment),ms=o(),L=d("p"),L.innerHTML=It,fs=o(),P=d("p"),P.innerHTML=vt,js=o(),K=d("p"),K.innerHTML=Rt,bs=o(),m(O.$$.fragment),ws=o(),m(ee.$$.fragment),Js=o(),se=d("p"),se.innerHTML=Nt,Ts=o(),m(te.$$.fragment),Us=o(),m(le.$$.fragment),gs=o(),ne=d("p"),ne.innerHTML=Zt,ks=o(),m(X.$$.fragment),$s=o(),m(ae.$$.fragment),_s=o(),R.c(),ts=o(),ie=d("p"),ie.innerHTML=At,Cs=o(),m(oe.$$.fragment),xs=o(),re=d("p"),re.textContent=Qt,Is=o(),m(pe.$$.fragment),vs=o(),m(ce.$$.fragment),Rs=o(),he=d("p"),he.innerHTML=Gt,Ns=o(),m(z.$$.fragment),Zs=o(),Me=d("p"),Me.innerHTML=Wt,As=o(),m(de.$$.fragment),Qs=o(),ue=d("p"),ue.textContent=Bt,Gs=o(),m(ye.$$.fragment),Ws=o(),me=d("p"),me.innerHTML=Xt,Bs=o(),m(fe.$$.fragment),Xs=o(),je=d("p"),je.innerHTML=zt,zs=o(),be=d("p"),be.innerHTML=Vt,Vs=o(),we=d("p"),we.innerHTML=Et,Es=o(),Je=d("p"),Je.textContent=Ht,Hs=o(),Te=d("p"),Te.innerHTML=St,Ss=o(),Ue=d("p"),Ue.innerHTML=Yt,Ys=o(),m(ge.$$.fragment),Fs=o(),ke=d("p"),ke.innerHTML=Ft,Ds=o(),$e=d("p"),$e.innerHTML=Dt,qs=o(),m(_e.$$.fragment),Ls=o(),Ce=d("p"),Ce.innerHTML=qt,Ps=o(),xe=d("p"),xe.innerHTML=Lt,Ks=o(),Ie=d("p"),Ie.innerHTML=Pt,Os=o(),m(ve.$$.fragment),et=o(),Re=d("p"),Re.textContent=Kt,st=o(),m(Ne.$$.fragment),tt=o(),Ze=d("p"),Ze.innerHTML=Ot,lt=o(),Ae=d("p"),Ae.innerHTML=el,nt=o(),Qe=d("p"),Qe.innerHTML=sl,at=o(),m(Ge.$$.fragment),it=o(),m(We.$$.fragment),ot=o(),W.c(),ls=o(),Be=d("p"),Be.innerHTML=tl,rt=o(),Z.c(),ns=o(),Xe=d("p"),Xe.innerHTML=ll,pt=o(),m(ze.$$.fragment),ct=o(),m(Ve.$$.fragment),ht=o(),Ee=d("p"),Ee.innerHTML=nl,Mt=o(),m(He.$$.fragment),dt=o(),Q.c(),as=o(),m(V.$$.fragment),ut=o(),k&&k.c(),is=o(),os=d("p"),this.h()},l(e){const s=vl("svelte-u9bgzb",document.head);t=u(s,"META",{name:!0,content:!0}),s.forEach(n),i=r(e),l=u(e,"P",{}),Ul(l).forEach(n),p=r(e),f(T.$$.fragment,e),c=r(e),f(g.$$.fragment,e),G=r(e),$.l(e),Oe=r(e),C.l(e),es=r(e),E=u(e,"P",{"data-svelte-h":!0}),y(E)!=="svelte-k42f7q"&&(E.textContent=$t),ps=r(e),H=u(e,"P",{"data-svelte-h":!0}),y(H)!=="svelte-zjffq0"&&(H.innerHTML=_t),cs=r(e),f(S.$$.fragment,e),hs=r(e),I.l(e),ss=r(e),Y=u(e,"P",{"data-svelte-h":!0}),y(Y)!=="svelte-1l7s9ct"&&(Y.innerHTML=Ct),Ms=r(e),F=u(e,"P",{"data-svelte-h":!0}),y(F)!=="svelte-a0uedu"&&(F.textContent=xt),ds=r(e),f(B.$$.fragment,e),us=r(e),f(D.$$.fragment,e),ys=r(e),f(q.$$.fragment,e),ms=r(e),L=u(e,"P",{"data-svelte-h":!0}),y(L)!=="svelte-1c0bj8y"&&(L.innerHTML=It),fs=r(e),P=u(e,"P",{"data-svelte-h":!0}),y(P)!=="svelte-124lsw3"&&(P.innerHTML=vt),js=r(e),K=u(e,"P",{"data-svelte-h":!0}),y(K)!=="svelte-65xqw4"&&(K.innerHTML=Rt),bs=r(e),f(O.$$.fragment,e),ws=r(e),f(ee.$$.fragment,e),Js=r(e),se=u(e,"P",{"data-svelte-h":!0}),y(se)!=="svelte-1o36uf9"&&(se.innerHTML=Nt),Ts=r(e),f(te.$$.fragment,e),Us=r(e),f(le.$$.fragment,e),gs=r(e),ne=u(e,"P",{"data-svelte-h":!0}),y(ne)!=="svelte-1c3slq1"&&(ne.innerHTML=Zt),ks=r(e),f(X.$$.fragment,e),$s=r(e),f(ae.$$.fragment,e),_s=r(e),R.l(e),ts=r(e),ie=u(e,"P",{"data-svelte-h":!0}),y(ie)!=="svelte-cvke6e"&&(ie.innerHTML=At),Cs=r(e),f(oe.$$.fragment,e),xs=r(e),re=u(e,"P",{"data-svelte-h":!0}),y(re)!=="svelte-17gxq0h"&&(re.textContent=Qt),Is=r(e),f(pe.$$.fragment,e),vs=r(e),f(ce.$$.fragment,e),Rs=r(e),he=u(e,"P",{"data-svelte-h":!0}),y(he)!=="svelte-s9c1sv"&&(he.innerHTML=Gt),Ns=r(e),f(z.$$.fragment,e),Zs=r(e),Me=u(e,"P",{"data-svelte-h":!0}),y(Me)!=="svelte-17ajvt1"&&(Me.innerHTML=Wt),As=r(e),f(de.$$.fragment,e),Qs=r(e),ue=u(e,"P",{"data-svelte-h":!0}),y(ue)!=="svelte-1oivwa"&&(ue.textContent=Bt),Gs=r(e),f(ye.$$.fragment,e),Ws=r(e),me=u(e,"P",{"data-svelte-h":!0}),y(me)!=="svelte-1tvepx7"&&(me.innerHTML=Xt),Bs=r(e),f(fe.$$.fragment,e),Xs=r(e),je=u(e,"P",{"data-svelte-h":!0}),y(je)!=="svelte-10hqnfn"&&(je.innerHTML=zt),zs=r(e),be=u(e,"P",{"data-svelte-h":!0}),y(be)!=="svelte-hspdt8"&&(be.innerHTML=Vt),Vs=r(e),we=u(e,"P",{"data-svelte-h":!0}),y(we)!=="svelte-11u1x7y"&&(we.innerHTML=Et),Es=r(e),Je=u(e,"P",{"data-svelte-h":!0}),y(Je)!=="svelte-1e7se1j"&&(Je.textContent=Ht),Hs=r(e),Te=u(e,"P",{"data-svelte-h":!0}),y(Te)!=="svelte-1ujm1f5"&&(Te.innerHTML=St),Ss=r(e),Ue=u(e,"P",{"data-svelte-h":!0}),y(Ue)!=="svelte-57wndc"&&(Ue.innerHTML=Yt),Ys=r(e),f(ge.$$.fragment,e),Fs=r(e),ke=u(e,"P",{"data-svelte-h":!0}),y(ke)!=="svelte-12m6ruz"&&(ke.innerHTML=Ft),Ds=r(e),$e=u(e,"P",{"data-svelte-h":!0}),y($e)!=="svelte-ykgx4y"&&($e.innerHTML=Dt),qs=r(e),f(_e.$$.fragment,e),Ls=r(e),Ce=u(e,"P",{"data-svelte-h":!0}),y(Ce)!=="svelte-1jfj8zf"&&(Ce.innerHTML=qt),Ps=r(e),xe=u(e,"P",{"data-svelte-h":!0}),y(xe)!=="svelte-ko1qsu"&&(xe.innerHTML=Lt),Ks=r(e),Ie=u(e,"P",{"data-svelte-h":!0}),y(Ie)!=="svelte-oo95cw"&&(Ie.innerHTML=Pt),Os=r(e),f(ve.$$.fragment,e),et=r(e),Re=u(e,"P",{"data-svelte-h":!0}),y(Re)!=="svelte-12x3mv1"&&(Re.textContent=Kt),st=r(e),f(Ne.$$.fragment,e),tt=r(e),Ze=u(e,"P",{"data-svelte-h":!0}),y(Ze)!=="svelte-b2zdkp"&&(Ze.innerHTML=Ot),lt=r(e),Ae=u(e,"P",{"data-svelte-h":!0}),y(Ae)!=="svelte-k426ib"&&(Ae.innerHTML=el),nt=r(e),Qe=u(e,"P",{"data-svelte-h":!0}),y(Qe)!=="svelte-1onxd79"&&(Qe.innerHTML=sl),at=r(e),f(Ge.$$.fragment,e),it=r(e),f(We.$$.fragment,e),ot=r(e),W.l(e),ls=r(e),Be=u(e,"P",{"data-svelte-h":!0}),y(Be)!=="svelte-1b915t7"&&(Be.innerHTML=tl),rt=r(e),Z.l(e),ns=r(e),Xe=u(e,"P",{"data-svelte-h":!0}),y(Xe)!=="svelte-1dw0kzt"&&(Xe.innerHTML=ll),pt=r(e),f(ze.$$.fragment,e),ct=r(e),f(Ve.$$.fragment,e),ht=r(e),Ee=u(e,"P",{"data-svelte-h":!0}),y(Ee)!=="svelte-1g0r85d"&&(Ee.innerHTML=nl),Mt=r(e),f(He.$$.fragment,e),dt=r(e),Q.l(e),as=r(e),f(V.$$.fragment,e),ut=r(e),k&&k.l(e),is=r(e),os=u(e,"P",{}),Ul(os).forEach(n),this.h()},h(){gl(t,"name","hf:doc:metadata"),gl(t,"content",sn)},m(e,s){Rl(document.head,t),a(e,i,s),a(e,l,s),a(e,p,s),j(T,e,s),a(e,c,s),j(g,e,s),a(e,G,s),Se[J].m(e,s),a(e,Oe,s),Ye[_].m(e,s),a(e,es,s),a(e,E,s),a(e,ps,s),a(e,H,s),a(e,cs,s),j(S,e,s),a(e,hs,s),Fe[x].m(e,s),a(e,ss,s),a(e,Y,s),a(e,Ms,s),a(e,F,s),a(e,ds,s),j(B,e,s),a(e,us,s),j(D,e,s),a(e,ys,s),j(q,e,s),a(e,ms,s),a(e,L,s),a(e,fs,s),a(e,P,s),a(e,js,s),a(e,K,s),a(e,bs,s),j(O,e,s),a(e,ws,s),j(ee,e,s),a(e,Js,s),a(e,se,s),a(e,Ts,s),j(te,e,s),a(e,Us,s),j(le,e,s),a(e,gs,s),a(e,ne,s),a(e,ks,s),j(X,e,s),a(e,$s,s),j(ae,e,s),a(e,_s,s),De[v].m(e,s),a(e,ts,s),a(e,ie,s),a(e,Cs,s),j(oe,e,s),a(e,xs,s),a(e,re,s),a(e,Is,s),j(pe,e,s),a(e,vs,s),j(ce,e,s),a(e,Rs,s),a(e,he,s),a(e,Ns,s),j(z,e,s),a(e,Zs,s),a(e,Me,s),a(e,As,s),j(de,e,s),a(e,Qs,s),a(e,ue,s),a(e,Gs,s),j(ye,e,s),a(e,Ws,s),a(e,me,s),a(e,Bs,s),j(fe,e,s),a(e,Xs,s),a(e,je,s),a(e,zs,s),a(e,be,s),a(e,Vs,s),a(e,we,s),a(e,Es,s),a(e,Je,s),a(e,Hs,s),a(e,Te,s),a(e,Ss,s),a(e,Ue,s),a(e,Ys,s),j(ge,e,s),a(e,Fs,s),a(e,ke,s),a(e,Ds,s),a(e,$e,s),a(e,qs,s),j(_e,e,s),a(e,Ls,s),a(e,Ce,s),a(e,Ps,s),a(e,xe,s),a(e,Ks,s),a(e,Ie,s),a(e,Os,s),j(ve,e,s),a(e,et,s),a(e,Re,s),a(e,st,s),j(Ne,e,s),a(e,tt,s),a(e,Ze,s),a(e,lt,s),a(e,Ae,s),a(e,nt,s),a(e,Qe,s),a(e,at,s),j(Ge,e,s),a(e,it,s),j(We,e,s),a(e,ot,s),W.m(e,s),a(e,ls,s),a(e,Be,s),a(e,rt,s),qe[N].m(e,s),a(e,ns,s),a(e,Xe,s),a(e,pt,s),j(ze,e,s),a(e,ct,s),j(Ve,e,s),a(e,ht,s),a(e,Ee,s),a(e,Mt,s),j(He,e,s),a(e,dt,s),Le[A].m(e,s),a(e,as,s),j(V,e,s),a(e,ut,s),k&&k.m(e,s),a(e,is,s),a(e,os,s),yt=!0},p(e,[s]){const jl={};s&1&&(jl.fw=e[0]),T.$set(jl);let bt=J;J=il(e),J!==bt&&(Ke(),M(Se[bt],1,1,()=>{Se[bt]=null}),Pe(),$=Se[J],$||($=Se[J]=al[J](e),$.c()),h($,1),$.m(Oe.parentNode,Oe));let wt=_;_=rl(e),_!==wt&&(Ke(),M(Ye[wt],1,1,()=>{Ye[wt]=null}),Pe(),C=Ye[_],C||(C=Ye[_]=ol[_](e),C.c()),h(C,1),C.m(es.parentNode,es));let Jt=x;x=cl(e),x!==Jt&&(Ke(),M(Fe[Jt],1,1,()=>{Fe[Jt]=null}),Pe(),I=Fe[x],I||(I=Fe[x]=pl[x](e),I.c()),h(I,1),I.m(ss.parentNode,ss));const bl={};s&2&&(bl.$$scope={dirty:s,ctx:e}),B.$set(bl);const wl={};s&2&&(wl.$$scope={dirty:s,ctx:e}),X.$set(wl);let Tt=v;v=Ml(e),v!==Tt&&(Ke(),M(De[Tt],1,1,()=>{De[Tt]=null}),Pe(),R=De[v],R||(R=De[v]=hl[v](e),R.c()),h(R,1),R.m(ts.parentNode,ts));const Jl={};s&2&&(Jl.$$scope={dirty:s,ctx:e}),z.$set(Jl),mt!==(mt=dl(e))&&(W.d(1),W=mt(e),W&&(W.c(),W.m(ls.parentNode,ls)));let Ut=N;N=yl(e),N!==Ut&&(Ke(),M(qe[Ut],1,1,()=>{qe[Ut]=null}),Pe(),Z=qe[N],Z||(Z=qe[N]=ul[N](e),Z.c()),h(Z,1),Z.m(ns.parentNode,ns));let gt=A;A=fl(e),A!==gt&&(Ke(),M(Le[gt],1,1,()=>{Le[gt]=null}),Pe(),Q=Le[A],Q||(Q=Le[A]=ml[A](e),Q.c()),h(Q,1),Q.m(as.parentNode,as));const Tl={};s&2&&(Tl.$$scope={dirty:s,ctx:e}),V.$set(Tl),e[0]==="tf"?k?s&1&&h(k,1):(k=kl(),k.c(),h(k,1),k.m(is.parentNode,is)):k&&(Ke(),M(k,1,1,()=>{k=null}),Pe())},i(e){yt||(h(T.$$.fragment,e),h(g.$$.fragment,e),h($),h(C),h(S.$$.fragment,e),h(I),h(B.$$.fragment,e),h(D.$$.fragment,e),h(q.$$.fragment,e),h(O.$$.fragment,e),h(ee.$$.fragment,e),h(te.$$.fragment,e),h(le.$$.fragment,e),h(X.$$.fragment,e),h(ae.$$.fragment,e),h(R),h(oe.$$.fragment,e),h(pe.$$.fragment,e),h(ce.$$.fragment,e),h(z.$$.fragment,e),h(de.$$.fragment,e),h(ye.$$.fragment,e),h(fe.$$.fragment,e),h(ge.$$.fragment,e),h(_e.$$.fragment,e),h(ve.$$.fragment,e),h(Ne.$$.fragment,e),h(Ge.$$.fragment,e),h(We.$$.fragment,e),h(Z),h(ze.$$.fragment,e),h(Ve.$$.fragment,e),h(He.$$.fragment,e),h(Q),h(V.$$.fragment,e),h(k),yt=!0)},o(e){M(T.$$.fragment,e),M(g.$$.fragment,e),M($),M(C),M(S.$$.fragment,e),M(I),M(B.$$.fragment,e),M(D.$$.fragment,e),M(q.$$.fragment,e),M(O.$$.fragment,e),M(ee.$$.fragment,e),M(te.$$.fragment,e),M(le.$$.fragment,e),M(X.$$.fragment,e),M(ae.$$.fragment,e),M(R),M(oe.$$.fragment,e),M(pe.$$.fragment,e),M(ce.$$.fragment,e),M(z.$$.fragment,e),M(de.$$.fragment,e),M(ye.$$.fragment,e),M(fe.$$.fragment,e),M(ge.$$.fragment,e),M(_e.$$.fragment,e),M(ve.$$.fragment,e),M(Ne.$$.fragment,e),M(Ge.$$.fragment,e),M(We.$$.fragment,e),M(Z),M(ze.$$.fragment,e),M(Ve.$$.fragment,e),M(He.$$.fragment,e),M(Q),M(V.$$.fragment,e),M(k),yt=!1},d(e){e&&(n(i),n(l),n(p),n(c),n(G),n(Oe),n(es),n(E),n(ps),n(H),n(cs),n(hs),n(ss),n(Y),n(Ms),n(F),n(ds),n(us),n(ys),n(ms),n(L),n(fs),n(P),n(js),n(K),n(bs),n(ws),n(Js),n(se),n(Ts),n(Us),n(gs),n(ne),n(ks),n($s),n(_s),n(ts),n(ie),n(Cs),n(xs),n(re),n(Is),n(vs),n(Rs),n(he),n(Ns),n(Zs),n(Me),n(As),n(Qs),n(ue),n(Gs),n(Ws),n(me),n(Bs),n(Xs),n(je),n(zs),n(be),n(Vs),n(we),n(Es),n(Je),n(Hs),n(Te),n(Ss),n(Ue),n(Ys),n(Fs),n(ke),n(Ds),n($e),n(qs),n(Ls),n(Ce),n(Ps),n(xe),n(Ks),n(Ie),n(Os),n(et),n(Re),n(st),n(tt),n(Ze),n(lt),n(Ae),n(nt),n(Qe),n(at),n(it),n(ot),n(ls),n(Be),n(rt),n(ns),n(Xe),n(pt),n(ct),n(ht),n(Ee),n(Mt),n(dt),n(as),n(ut),n(is),n(os)),n(t),b(T,e),b(g,e),Se[J].d(e),Ye[_].d(e),b(S,e),Fe[x].d(e),b(B,e),b(D,e),b(q,e),b(O,e),b(ee,e),b(te,e),b(le,e),b(X,e),b(ae,e),De[v].d(e),b(oe,e),b(pe,e),b(ce,e),b(z,e),b(de,e),b(ye,e),b(fe,e),b(ge,e),b(_e,e),b(ve,e),b(Ne,e),b(Ge,e),b(We,e),W.d(e),qe[N].d(e),b(ze,e),b(Ve,e),b(He,e),Le[A].d(e),b(V,e),k&&k.d(e)}}}const sn='{"title":"Processing the data","local":"processing-the-data","sections":[{"title":"Loading a dataset from the Hub","local":"loading-a-dataset-from-the-hub","sections":[],"depth":3},{"title":"Preprocessing a dataset","local":"preprocessing-a-dataset","sections":[],"depth":3},{"title":"Dynamic padding","local":"dynamic-padding","sections":[],"depth":3}],"depth":1}';function tn(w,t,i){let l="pt";return Cl(()=>{const p=new URLSearchParams(window.location.search);i(0,l=p.get("fw")||"pt")}),[l]}class Mn extends xl{constructor(t){super(),Il(this,t,tn,en,_l,{})}}export{Mn as component};
